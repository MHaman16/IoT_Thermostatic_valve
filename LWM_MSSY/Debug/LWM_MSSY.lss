
LWM_MSSY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800200  00003064  000030f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003064  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001892  00800322  00800322  0000321a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000321a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000618  00000000  00000000  0000328c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008e6c  00000000  00000000  000038a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003797  00000000  00000000  0000c710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003d98  00000000  00000000  0000fea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001000  00000000  00000000  00013c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000026a2  00000000  00000000  00014c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004744  00000000  00000000  000172e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  0001ba26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c6       	rjmp	.+3218   	; 0xcc8 <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f6 c6       	rjmp	.+3564   	; 0xe7e <__vector_36>
      92:	00 00       	nop
      94:	d8 c6       	rjmp	.+3504   	; 0xe46 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	fe c5       	rjmp	.+3068   	; 0xca6 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	13 e0       	ldi	r17, 0x03	; 3
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e4 e6       	ldi	r30, 0x64	; 100
     14c:	f0 e3       	ldi	r31, 0x30	; 48
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a2 32       	cpi	r26, 0x22	; 34
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2b e1       	ldi	r18, 0x1B	; 27
     160:	a2 e2       	ldi	r26, 0x22	; 34
     162:	b3 e0       	ldi	r27, 0x03	; 3
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a4 3b       	cpi	r26, 0xB4	; 180
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	9e d4       	rcall	.+2364   	; 0xaac <main>
     170:	0c 94 30 18 	jmp	0x3060	; 0x3060 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <ADC_Init>:
	while((tbi(ADCSRA,ADSC))){} //pockat nez skonci, sice polling, ale proc ne, je to rychle a nezavysle
	//pomocna = ADCL | (ADCH << 8);
	tmp=ADC; 
	ADCSRA |= (1<<ADIF); //vynulovat priznak konverze - tim ze zapiseme 1, viz datasheet
	return tmp;
}
     176:	ac e7       	ldi	r26, 0x7C	; 124
     178:	b0 e0       	ldi	r27, 0x00	; 0
     17a:	1c 92       	st	X, r1
     17c:	ea e7       	ldi	r30, 0x7A	; 122
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	10 82       	st	Z, r1
     182:	90 81       	ld	r25, Z
     184:	89 2b       	or	r24, r25
     186:	80 83       	st	Z, r24
     188:	8c 91       	ld	r24, X
     18a:	90 e4       	ldi	r25, 0x40	; 64
     18c:	69 9f       	mul	r22, r25
     18e:	b0 01       	movw	r22, r0
     190:	11 24       	eor	r1, r1
     192:	68 2b       	or	r22, r24
     194:	6c 93       	st	X, r22
     196:	80 81       	ld	r24, Z
     198:	80 68       	ori	r24, 0x80	; 128
     19a:	80 83       	st	Z, r24
     19c:	eb e7       	ldi	r30, 0x7B	; 123
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	88 23       	and	r24, r24
     1a4:	ec f7       	brge	.-6      	; 0x1a0 <ADC_Init+0x2a>
     1a6:	eb e7       	ldi	r30, 0x7B	; 123
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	80 81       	ld	r24, Z
     1ac:	85 ff       	sbrs	r24, 5
     1ae:	fd cf       	rjmp	.-6      	; 0x1aa <ADC_Init+0x34>
     1b0:	08 95       	ret

000001b2 <ADC_getOffset>:
uint16_t ADC_getOffset(uint8_t chan) {		//offset 1000
	uint16_t tmp=0;
	//smazat MUX
	ADMUX &= ~(31 << MUX0); // copak ten zapis znamena?
     1b2:	ec e7       	ldi	r30, 0x7C	; 124
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	90 81       	ld	r25, Z
     1b8:	90 7e       	andi	r25, 0xE0	; 224
     1ba:	90 83       	st	Z, r25
	ADCSRB&= ~(1 << MUX5);
     1bc:	ab e7       	ldi	r26, 0x7B	; 123
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	9c 91       	ld	r25, X
     1c2:	97 7f       	andi	r25, 0xF7	; 247
     1c4:	9c 93       	st	X, r25
	//nastavit spravny kanal
	ADMUX |= (chan<<MUX0);
     1c6:	90 81       	ld	r25, Z
     1c8:	89 2b       	or	r24, r25
     1ca:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // spustit konverzi
     1cc:	ea e7       	ldi	r30, 0x7A	; 122
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	80 64       	ori	r24, 0x40	; 64
     1d4:	80 83       	st	Z, r24
	while((tbi(ADCSRA,ADSC))){} //pockat nez skonci, sice polling, ale proc ne, je to rychle a nezavysle
     1d6:	80 81       	ld	r24, Z
     1d8:	86 fd       	sbrc	r24, 6
     1da:	fd cf       	rjmp	.-6      	; 0x1d6 <ADC_getOffset+0x24>
	//pomocna = ADCL | (ADCH << 8);
	tmp=ADC;
     1dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     1e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	ADCSRA |= (1<<ADIF); //vynulovat priznak konverze - tim ze zapiseme 1, viz datasheet
     1e4:	ea e7       	ldi	r30, 0x7A	; 122
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	20 81       	ld	r18, Z
     1ea:	20 61       	ori	r18, 0x10	; 16
     1ec:	20 83       	st	Z, r18
	if (((tmp >> 9)  & 0x01) == 1)
     1ee:	91 ff       	sbrs	r25, 1
     1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <ADC_getOffset+0x46>
	{
		tmp = 1000 - (~tmp);
     1f2:	87 51       	subi	r24, 0x17	; 23
     1f4:	9c 4f       	sbci	r25, 0xFC	; 252
     1f6:	08 95       	ret
	}
	else
	{
		tmp = 1000 + tmp;
     1f8:	88 51       	subi	r24, 0x18	; 24
     1fa:	9c 4f       	sbci	r25, 0xFC	; 252
	}
	return tmp;
}
     1fc:	08 95       	ret

000001fe <bmp085_writemem>:
 * get altitude
 */
double bmp085_getaltitude() {
	bmp085_getrawpressure();
	return ((1 - pow(bmp085_rawpressure/(double)101325, 0.1903 )) / 0.0000225577) + BMP085_UNITMOFFSET;
}
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	d8 2f       	mov	r29, r24
     204:	c6 2f       	mov	r28, r22
     206:	8e ee       	ldi	r24, 0xEE	; 238
     208:	0e 94 15 14 	call	0x282a	; 0x282a <i2c_start_wait>
     20c:	8d 2f       	mov	r24, r29
     20e:	0e 94 48 14 	call	0x2890	; 0x2890 <i2c_write>
     212:	8c 2f       	mov	r24, r28
     214:	0e 94 48 14 	call	0x2890	; 0x2890 <i2c_write>
     218:	0e 94 3f 14 	call	0x287e	; 0x287e <i2c_stop>
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	08 95       	ret

00000222 <bmp085_readmem>:
     222:	cf 92       	push	r12
     224:	df 92       	push	r13
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	c8 2f       	mov	r28, r24
     234:	f6 2e       	mov	r15, r22
     236:	d7 2f       	mov	r29, r23
     238:	e4 2e       	mov	r14, r20
     23a:	8e ee       	ldi	r24, 0xEE	; 238
     23c:	0e 94 15 14 	call	0x282a	; 0x282a <i2c_start_wait>
     240:	8c 2f       	mov	r24, r28
     242:	0e 94 48 14 	call	0x2890	; 0x2890 <i2c_write>
     246:	8f ee       	ldi	r24, 0xEF	; 239
     248:	0e 94 3d 14 	call	0x287a	; 0x287a <i2c_rep_start>
     24c:	ee 20       	and	r14, r14
     24e:	09 f1       	breq	.+66     	; 0x292 <bmp085_readmem+0x70>
     250:	0f 2d       	mov	r16, r15
     252:	1d 2f       	mov	r17, r29
     254:	cc 24       	eor	r12, r12
     256:	ca 94       	dec	r12
     258:	ce 0c       	add	r12, r14
     25a:	d1 2c       	mov	r13, r1
     25c:	8f ef       	ldi	r24, 0xFF	; 255
     25e:	c8 1a       	sub	r12, r24
     260:	d8 0a       	sbc	r13, r24
     262:	c0 e0       	ldi	r28, 0x00	; 0
     264:	d0 e0       	ldi	r29, 0x00	; 0
     266:	f1 2c       	mov	r15, r1
     268:	e1 e0       	ldi	r30, 0x01	; 1
     26a:	ee 1a       	sub	r14, r30
     26c:	f1 08       	sbc	r15, r1
     26e:	ce 15       	cp	r28, r14
     270:	df 05       	cpc	r29, r15
     272:	29 f4       	brne	.+10     	; 0x27e <bmp085_readmem+0x5c>
     274:	0e 94 65 14 	call	0x28ca	; 0x28ca <i2c_readNak>
     278:	f8 01       	movw	r30, r16
     27a:	80 83       	st	Z, r24
     27c:	04 c0       	rjmp	.+8      	; 0x286 <bmp085_readmem+0x64>
     27e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <i2c_readAck>
     282:	f8 01       	movw	r30, r16
     284:	80 83       	st	Z, r24
     286:	21 96       	adiw	r28, 0x01	; 1
     288:	0f 5f       	subi	r16, 0xFF	; 255
     28a:	1f 4f       	sbci	r17, 0xFF	; 255
     28c:	cc 15       	cp	r28, r12
     28e:	dd 05       	cpc	r29, r13
     290:	71 f7       	brne	.-36     	; 0x26e <bmp085_readmem+0x4c>
     292:	0e 94 3f 14 	call	0x287e	; 0x287e <i2c_stop>
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	df 90       	pop	r13
     2a4:	cf 90       	pop	r12
     2a6:	08 95       	ret

000002a8 <bmp085_avaragefilter>:
     2a8:	cf 92       	push	r12
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	6b 01       	movw	r12, r22
     2b2:	7c 01       	movw	r14, r24
     2b4:	a2 e2       	ldi	r26, 0x22	; 34
     2b6:	b3 e0       	ldi	r27, 0x03	; 3
     2b8:	26 e7       	ldi	r18, 0x76	; 118
     2ba:	33 e0       	ldi	r19, 0x03	; 3
     2bc:	fd 01       	movw	r30, r26
     2be:	44 81       	ldd	r20, Z+4	; 0x04
     2c0:	55 81       	ldd	r21, Z+5	; 0x05
     2c2:	66 81       	ldd	r22, Z+6	; 0x06
     2c4:	77 81       	ldd	r23, Z+7	; 0x07
     2c6:	41 93       	st	Z+, r20
     2c8:	51 93       	st	Z+, r21
     2ca:	61 93       	st	Z+, r22
     2cc:	71 93       	st	Z+, r23
     2ce:	e2 17       	cp	r30, r18
     2d0:	f3 07       	cpc	r31, r19
     2d2:	a9 f7       	brne	.-22     	; 0x2be <bmp085_avaragefilter+0x16>
     2d4:	c0 92 72 03 	sts	0x0372, r12	; 0x800372 <__data_end+0x50>
     2d8:	d0 92 73 03 	sts	0x0373, r13	; 0x800373 <__data_end+0x51>
     2dc:	e0 92 74 03 	sts	0x0374, r14	; 0x800374 <__data_end+0x52>
     2e0:	f0 92 75 03 	sts	0x0375, r15	; 0x800375 <__data_end+0x53>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	cb 01       	movw	r24, r22
     2ea:	cd 90       	ld	r12, X+
     2ec:	dd 90       	ld	r13, X+
     2ee:	ed 90       	ld	r14, X+
     2f0:	fd 90       	ld	r15, X+
     2f2:	6c 0d       	add	r22, r12
     2f4:	7d 1d       	adc	r23, r13
     2f6:	8e 1d       	adc	r24, r14
     2f8:	9f 1d       	adc	r25, r15
     2fa:	a2 17       	cp	r26, r18
     2fc:	b3 07       	cpc	r27, r19
     2fe:	a9 f7       	brne	.-22     	; 0x2ea <bmp085_avaragefilter+0x42>
     300:	25 e1       	ldi	r18, 0x15	; 21
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__divmodsi4>
     30c:	ca 01       	movw	r24, r20
     30e:	b9 01       	movw	r22, r18
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	08 95       	ret

0000031a <bmp085_getcalibration>:
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	1f 92       	push	r1
     320:	1f 92       	push	r1
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	1a 82       	std	Y+2, r1	; 0x02
     328:	19 82       	std	Y+1, r1	; 0x01
     32a:	42 e0       	ldi	r20, 0x02	; 2
     32c:	be 01       	movw	r22, r28
     32e:	6f 5f       	subi	r22, 0xFF	; 255
     330:	7f 4f       	sbci	r23, 0xFF	; 255
     332:	8a ea       	ldi	r24, 0xAA	; 170
     334:	76 df       	rcall	.-276    	; 0x222 <bmp085_readmem>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	98 2f       	mov	r25, r24
     33c:	88 27       	eor	r24, r24
     33e:	2a 81       	ldd	r18, Y+2	; 0x02
     340:	82 2b       	or	r24, r18
     342:	90 93 72 1b 	sts	0x1B72, r25	; 0x801b72 <bmp085_regac1+0x1>
     346:	80 93 71 1b 	sts	0x1B71, r24	; 0x801b71 <bmp085_regac1>
     34a:	42 e0       	ldi	r20, 0x02	; 2
     34c:	be 01       	movw	r22, r28
     34e:	6f 5f       	subi	r22, 0xFF	; 255
     350:	7f 4f       	sbci	r23, 0xFF	; 255
     352:	8c ea       	ldi	r24, 0xAC	; 172
     354:	66 df       	rcall	.-308    	; 0x222 <bmp085_readmem>
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	98 2f       	mov	r25, r24
     35c:	88 27       	eor	r24, r24
     35e:	2a 81       	ldd	r18, Y+2	; 0x02
     360:	82 2b       	or	r24, r18
     362:	90 93 7a 1b 	sts	0x1B7A, r25	; 0x801b7a <bmp085_regac2+0x1>
     366:	80 93 79 1b 	sts	0x1B79, r24	; 0x801b79 <bmp085_regac2>
     36a:	42 e0       	ldi	r20, 0x02	; 2
     36c:	be 01       	movw	r22, r28
     36e:	6f 5f       	subi	r22, 0xFF	; 255
     370:	7f 4f       	sbci	r23, 0xFF	; 255
     372:	8e ea       	ldi	r24, 0xAE	; 174
     374:	56 df       	rcall	.-340    	; 0x222 <bmp085_readmem>
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	98 2f       	mov	r25, r24
     37c:	88 27       	eor	r24, r24
     37e:	2a 81       	ldd	r18, Y+2	; 0x02
     380:	82 2b       	or	r24, r18
     382:	90 93 66 1b 	sts	0x1B66, r25	; 0x801b66 <bmp085_regac3+0x1>
     386:	80 93 65 1b 	sts	0x1B65, r24	; 0x801b65 <bmp085_regac3>
     38a:	42 e0       	ldi	r20, 0x02	; 2
     38c:	be 01       	movw	r22, r28
     38e:	6f 5f       	subi	r22, 0xFF	; 255
     390:	7f 4f       	sbci	r23, 0xFF	; 255
     392:	80 eb       	ldi	r24, 0xB0	; 176
     394:	46 df       	rcall	.-372    	; 0x222 <bmp085_readmem>
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	98 2f       	mov	r25, r24
     39c:	88 27       	eor	r24, r24
     39e:	2a 81       	ldd	r18, Y+2	; 0x02
     3a0:	82 2b       	or	r24, r18
     3a2:	90 93 5e 1b 	sts	0x1B5E, r25	; 0x801b5e <bmp085_regac4+0x1>
     3a6:	80 93 5d 1b 	sts	0x1B5D, r24	; 0x801b5d <bmp085_regac4>
     3aa:	42 e0       	ldi	r20, 0x02	; 2
     3ac:	be 01       	movw	r22, r28
     3ae:	6f 5f       	subi	r22, 0xFF	; 255
     3b0:	7f 4f       	sbci	r23, 0xFF	; 255
     3b2:	82 eb       	ldi	r24, 0xB2	; 178
     3b4:	36 df       	rcall	.-404    	; 0x222 <bmp085_readmem>
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	98 2f       	mov	r25, r24
     3bc:	88 27       	eor	r24, r24
     3be:	2a 81       	ldd	r18, Y+2	; 0x02
     3c0:	82 2b       	or	r24, r18
     3c2:	90 93 76 1b 	sts	0x1B76, r25	; 0x801b76 <bmp085_regac5+0x1>
     3c6:	80 93 75 1b 	sts	0x1B75, r24	; 0x801b75 <bmp085_regac5>
     3ca:	42 e0       	ldi	r20, 0x02	; 2
     3cc:	be 01       	movw	r22, r28
     3ce:	6f 5f       	subi	r22, 0xFF	; 255
     3d0:	7f 4f       	sbci	r23, 0xFF	; 255
     3d2:	84 eb       	ldi	r24, 0xB4	; 180
     3d4:	26 df       	rcall	.-436    	; 0x222 <bmp085_readmem>
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	98 2f       	mov	r25, r24
     3dc:	88 27       	eor	r24, r24
     3de:	2a 81       	ldd	r18, Y+2	; 0x02
     3e0:	82 2b       	or	r24, r18
     3e2:	90 93 6e 1b 	sts	0x1B6E, r25	; 0x801b6e <bmp085_regac6+0x1>
     3e6:	80 93 6d 1b 	sts	0x1B6D, r24	; 0x801b6d <bmp085_regac6>
     3ea:	42 e0       	ldi	r20, 0x02	; 2
     3ec:	be 01       	movw	r22, r28
     3ee:	6f 5f       	subi	r22, 0xFF	; 255
     3f0:	7f 4f       	sbci	r23, 0xFF	; 255
     3f2:	86 eb       	ldi	r24, 0xB6	; 182
     3f4:	16 df       	rcall	.-468    	; 0x222 <bmp085_readmem>
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	98 2f       	mov	r25, r24
     3fc:	88 27       	eor	r24, r24
     3fe:	2a 81       	ldd	r18, Y+2	; 0x02
     400:	82 2b       	or	r24, r18
     402:	90 93 6c 1b 	sts	0x1B6C, r25	; 0x801b6c <bmp085_regb1+0x1>
     406:	80 93 6b 1b 	sts	0x1B6B, r24	; 0x801b6b <bmp085_regb1>
     40a:	42 e0       	ldi	r20, 0x02	; 2
     40c:	be 01       	movw	r22, r28
     40e:	6f 5f       	subi	r22, 0xFF	; 255
     410:	7f 4f       	sbci	r23, 0xFF	; 255
     412:	88 eb       	ldi	r24, 0xB8	; 184
     414:	06 df       	rcall	.-500    	; 0x222 <bmp085_readmem>
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	98 2f       	mov	r25, r24
     41c:	88 27       	eor	r24, r24
     41e:	2a 81       	ldd	r18, Y+2	; 0x02
     420:	82 2b       	or	r24, r18
     422:	90 93 60 1b 	sts	0x1B60, r25	; 0x801b60 <bmp085_regb2+0x1>
     426:	80 93 5f 1b 	sts	0x1B5F, r24	; 0x801b5f <bmp085_regb2>
     42a:	42 e0       	ldi	r20, 0x02	; 2
     42c:	be 01       	movw	r22, r28
     42e:	6f 5f       	subi	r22, 0xFF	; 255
     430:	7f 4f       	sbci	r23, 0xFF	; 255
     432:	8a eb       	ldi	r24, 0xBA	; 186
     434:	f6 de       	rcall	.-532    	; 0x222 <bmp085_readmem>
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	98 2f       	mov	r25, r24
     43c:	88 27       	eor	r24, r24
     43e:	2a 81       	ldd	r18, Y+2	; 0x02
     440:	82 2b       	or	r24, r18
     442:	90 93 74 1b 	sts	0x1B74, r25	; 0x801b74 <bmp085_regmb+0x1>
     446:	80 93 73 1b 	sts	0x1B73, r24	; 0x801b73 <bmp085_regmb>
     44a:	42 e0       	ldi	r20, 0x02	; 2
     44c:	be 01       	movw	r22, r28
     44e:	6f 5f       	subi	r22, 0xFF	; 255
     450:	7f 4f       	sbci	r23, 0xFF	; 255
     452:	8c eb       	ldi	r24, 0xBC	; 188
     454:	e6 de       	rcall	.-564    	; 0x222 <bmp085_readmem>
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	98 2f       	mov	r25, r24
     45c:	88 27       	eor	r24, r24
     45e:	2a 81       	ldd	r18, Y+2	; 0x02
     460:	82 2b       	or	r24, r18
     462:	90 93 78 1b 	sts	0x1B78, r25	; 0x801b78 <bmp085_regmc+0x1>
     466:	80 93 77 1b 	sts	0x1B77, r24	; 0x801b77 <bmp085_regmc>
     46a:	42 e0       	ldi	r20, 0x02	; 2
     46c:	be 01       	movw	r22, r28
     46e:	6f 5f       	subi	r22, 0xFF	; 255
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	8e eb       	ldi	r24, 0xBE	; 190
     474:	d6 de       	rcall	.-596    	; 0x222 <bmp085_readmem>
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	98 2f       	mov	r25, r24
     47c:	88 27       	eor	r24, r24
     47e:	2a 81       	ldd	r18, Y+2	; 0x02
     480:	82 2b       	or	r24, r18
     482:	90 93 70 1b 	sts	0x1B70, r25	; 0x801b70 <bmp085_regmd+0x1>
     486:	80 93 6f 1b 	sts	0x1B6F, r24	; 0x801b6f <bmp085_regmd>
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <bmp085_getrawtemperature>:
     494:	cf 92       	push	r12
     496:	df 92       	push	r13
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	1f 92       	push	r1
     4a6:	1f 92       	push	r1
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	1a 82       	std	Y+2, r1	; 0x02
     4ae:	19 82       	std	Y+1, r1	; 0x01
     4b0:	6e e2       	ldi	r22, 0x2E	; 46
     4b2:	84 ef       	ldi	r24, 0xF4	; 244
     4b4:	a4 de       	rcall	.-696    	; 0x1fe <bmp085_writemem>
     4b6:	8f e0       	ldi	r24, 0x0F	; 15
     4b8:	97 e2       	ldi	r25, 0x27	; 39
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <bmp085_getrawtemperature+0x26>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <bmp085_getrawtemperature+0x2c>
     4c0:	00 00       	nop
     4c2:	42 e0       	ldi	r20, 0x02	; 2
     4c4:	be 01       	movw	r22, r28
     4c6:	6f 5f       	subi	r22, 0xFF	; 255
     4c8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ca:	86 ef       	ldi	r24, 0xF6	; 246
     4cc:	aa de       	rcall	.-684    	; 0x222 <bmp085_readmem>
     4ce:	29 81       	ldd	r18, Y+1	; 0x01
     4d0:	82 2f       	mov	r24, r18
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	a0 e0       	ldi	r26, 0x00	; 0
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	44 27       	eor	r20, r20
     4da:	58 2f       	mov	r21, r24
     4dc:	69 2f       	mov	r22, r25
     4de:	7a 2f       	mov	r23, r26
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
     4e2:	48 2b       	or	r20, r24
     4e4:	80 91 6d 1b 	lds	r24, 0x1B6D	; 0x801b6d <bmp085_regac6>
     4e8:	90 91 6e 1b 	lds	r25, 0x1B6E	; 0x801b6e <bmp085_regac6+0x1>
     4ec:	9a 01       	movw	r18, r20
     4ee:	ab 01       	movw	r20, r22
     4f0:	28 1b       	sub	r18, r24
     4f2:	39 0b       	sbc	r19, r25
     4f4:	41 09       	sbc	r20, r1
     4f6:	51 09       	sbc	r21, r1
     4f8:	a0 91 75 1b 	lds	r26, 0x1B75	; 0x801b75 <bmp085_regac5>
     4fc:	b0 91 76 1b 	lds	r27, 0x1B76	; 0x801b76 <bmp085_regac5+0x1>
     500:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__muluhisi3>
     504:	6b 01       	movw	r12, r22
     506:	7c 01       	movw	r14, r24
     508:	0b 2e       	mov	r0, r27
     50a:	bf e0       	ldi	r27, 0x0F	; 15
     50c:	f5 94       	asr	r15
     50e:	e7 94       	ror	r14
     510:	d7 94       	ror	r13
     512:	c7 94       	ror	r12
     514:	ba 95       	dec	r27
     516:	d1 f7       	brne	.-12     	; 0x50c <bmp085_getrawtemperature+0x78>
     518:	b0 2d       	mov	r27, r0
     51a:	60 91 77 1b 	lds	r22, 0x1B77	; 0x801b77 <bmp085_regmc>
     51e:	70 91 78 1b 	lds	r23, 0x1B78	; 0x801b78 <bmp085_regmc+0x1>
     522:	cb 01       	movw	r24, r22
     524:	77 0f       	add	r23, r23
     526:	aa 0b       	sbc	r26, r26
     528:	bb 0b       	sbc	r27, r27
     52a:	bc 01       	movw	r22, r24
     52c:	cd 01       	movw	r24, r26
     52e:	05 2e       	mov	r0, r21
     530:	5b e0       	ldi	r21, 0x0B	; 11
     532:	66 0f       	add	r22, r22
     534:	77 1f       	adc	r23, r23
     536:	88 1f       	adc	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	5a 95       	dec	r21
     53c:	d1 f7       	brne	.-12     	; 0x532 <bmp085_getrawtemperature+0x9e>
     53e:	50 2d       	mov	r21, r0
     540:	20 91 6f 1b 	lds	r18, 0x1B6F	; 0x801b6f <bmp085_regmd>
     544:	30 91 70 1b 	lds	r19, 0x1B70	; 0x801b70 <bmp085_regmd+0x1>
     548:	89 01       	movw	r16, r18
     54a:	33 0f       	add	r19, r19
     54c:	22 0b       	sbc	r18, r18
     54e:	33 0b       	sbc	r19, r19
     550:	a9 01       	movw	r20, r18
     552:	98 01       	movw	r18, r16
     554:	2c 0d       	add	r18, r12
     556:	3d 1d       	adc	r19, r13
     558:	4e 1d       	adc	r20, r14
     55a:	5f 1d       	adc	r21, r15
     55c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <__divmodsi4>
     560:	c2 0e       	add	r12, r18
     562:	d3 1e       	adc	r13, r19
     564:	e4 1e       	adc	r14, r20
     566:	f5 1e       	adc	r15, r21
     568:	c0 92 67 1b 	sts	0x1B67, r12	; 0x801b67 <bmp085_rawtemperature>
     56c:	d0 92 68 1b 	sts	0x1B68, r13	; 0x801b68 <bmp085_rawtemperature+0x1>
     570:	e0 92 69 1b 	sts	0x1B69, r14	; 0x801b69 <bmp085_rawtemperature+0x2>
     574:	f0 92 6a 1b 	sts	0x1B6A, r15	; 0x801b6a <bmp085_rawtemperature+0x3>
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	df 90       	pop	r13
     58a:	cf 90       	pop	r12
     58c:	08 95       	ret

0000058e <bmp085_getrawpressure>:
     58e:	4f 92       	push	r4
     590:	5f 92       	push	r5
     592:	6f 92       	push	r6
     594:	7f 92       	push	r7
     596:	8f 92       	push	r8
     598:	9f 92       	push	r9
     59a:	af 92       	push	r10
     59c:	bf 92       	push	r11
     59e:	cf 92       	push	r12
     5a0:	df 92       	push	r13
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	2b 97       	sbiw	r28, 0x0b	; 11
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	19 82       	std	Y+1, r1	; 0x01
     5c0:	1a 82       	std	Y+2, r1	; 0x02
     5c2:	1b 82       	std	Y+3, r1	; 0x03
     5c4:	67 df       	rcall	.-306    	; 0x494 <bmp085_getrawtemperature>
     5c6:	64 ef       	ldi	r22, 0xF4	; 244
     5c8:	84 ef       	ldi	r24, 0xF4	; 244
     5ca:	19 de       	rcall	.-974    	; 0x1fe <bmp085_writemem>
     5cc:	8f e1       	ldi	r24, 0x1F	; 31
     5ce:	9b ec       	ldi	r25, 0xCB	; 203
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <bmp085_getrawpressure+0x42>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <bmp085_getrawpressure+0x48>
     5d6:	00 00       	nop
     5d8:	43 e0       	ldi	r20, 0x03	; 3
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	86 ef       	ldi	r24, 0xF6	; 246
     5e2:	1f de       	rcall	.-962    	; 0x222 <bmp085_readmem>
     5e4:	c0 90 67 1b 	lds	r12, 0x1B67	; 0x801b67 <bmp085_rawtemperature>
     5e8:	d0 90 68 1b 	lds	r13, 0x1B68	; 0x801b68 <bmp085_rawtemperature+0x1>
     5ec:	e0 90 69 1b 	lds	r14, 0x1B69	; 0x801b69 <bmp085_rawtemperature+0x2>
     5f0:	f0 90 6a 1b 	lds	r15, 0x1B6A	; 0x801b6a <bmp085_rawtemperature+0x3>
     5f4:	97 01       	movw	r18, r14
     5f6:	86 01       	movw	r16, r12
     5f8:	00 5a       	subi	r16, 0xA0	; 160
     5fa:	1f 40       	sbci	r17, 0x0F	; 15
     5fc:	21 09       	sbc	r18, r1
     5fe:	31 09       	sbc	r19, r1
     600:	0c 83       	std	Y+4, r16	; 0x04
     602:	1d 83       	std	Y+5, r17	; 0x05
     604:	2e 83       	std	Y+6, r18	; 0x06
     606:	3f 83       	std	Y+7, r19	; 0x07
     608:	a9 01       	movw	r20, r18
     60a:	98 01       	movw	r18, r16
     60c:	ca 01       	movw	r24, r20
     60e:	b9 01       	movw	r22, r18
     610:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__mulsi3>
     614:	2b 01       	movw	r4, r22
     616:	3c 01       	movw	r6, r24
     618:	a0 91 65 1b 	lds	r26, 0x1B65	; 0x801b65 <bmp085_regac3>
     61c:	b0 91 66 1b 	lds	r27, 0x1B66	; 0x801b66 <bmp085_regac3+0x1>
     620:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__mulshisi3>
     624:	4b 01       	movw	r8, r22
     626:	5c 01       	movw	r10, r24
     628:	07 2e       	mov	r0, r23
     62a:	7d e0       	ldi	r23, 0x0D	; 13
     62c:	b5 94       	asr	r11
     62e:	a7 94       	ror	r10
     630:	97 94       	ror	r9
     632:	87 94       	ror	r8
     634:	7a 95       	dec	r23
     636:	d1 f7       	brne	.-12     	; 0x62c <bmp085_getrawpressure+0x9e>
     638:	70 2d       	mov	r23, r0
     63a:	a0 91 6b 1b 	lds	r26, 0x1B6B	; 0x801b6b <bmp085_regb1>
     63e:	b0 91 6c 1b 	lds	r27, 0x1B6C	; 0x801b6c <bmp085_regb1+0x1>
     642:	a3 01       	movw	r20, r6
     644:	92 01       	movw	r18, r4
     646:	01 2e       	mov	r0, r17
     648:	1c e0       	ldi	r17, 0x0C	; 12
     64a:	55 95       	asr	r21
     64c:	47 95       	ror	r20
     64e:	37 95       	ror	r19
     650:	27 95       	ror	r18
     652:	1a 95       	dec	r17
     654:	d1 f7       	brne	.-12     	; 0x64a <bmp085_getrawpressure+0xbc>
     656:	10 2d       	mov	r17, r0
     658:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__mulshisi3>
     65c:	bb 27       	eor	r27, r27
     65e:	97 fd       	sbrc	r25, 7
     660:	b0 95       	com	r27
     662:	ab 2f       	mov	r26, r27
     664:	88 0d       	add	r24, r8
     666:	99 1d       	adc	r25, r9
     668:	aa 1d       	adc	r26, r10
     66a:	bb 1d       	adc	r27, r11
     66c:	02 96       	adiw	r24, 0x02	; 2
     66e:	a1 1d       	adc	r26, r1
     670:	b1 1d       	adc	r27, r1
     672:	b5 95       	asr	r27
     674:	a7 95       	ror	r26
     676:	97 95       	ror	r25
     678:	87 95       	ror	r24
     67a:	b5 95       	asr	r27
     67c:	a7 95       	ror	r26
     67e:	97 95       	ror	r25
     680:	87 95       	ror	r24
     682:	9c 01       	movw	r18, r24
     684:	ad 01       	movw	r20, r26
     686:	30 58       	subi	r19, 0x80	; 128
     688:	4f 4f       	sbci	r20, 0xFF	; 255
     68a:	5f 4f       	sbci	r21, 0xFF	; 255
     68c:	a0 91 5d 1b 	lds	r26, 0x1B5D	; 0x801b5d <bmp085_regac4>
     690:	b0 91 5e 1b 	lds	r27, 0x1B5E	; 0x801b5e <bmp085_regac4+0x1>
     694:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__muluhisi3>
     698:	8b 01       	movw	r16, r22
     69a:	9c 01       	movw	r18, r24
     69c:	0f 2e       	mov	r0, r31
     69e:	ff e0       	ldi	r31, 0x0F	; 15
     6a0:	36 95       	lsr	r19
     6a2:	27 95       	ror	r18
     6a4:	17 95       	ror	r17
     6a6:	07 95       	ror	r16
     6a8:	fa 95       	dec	r31
     6aa:	d1 f7       	brne	.-12     	; 0x6a0 <bmp085_getrawpressure+0x112>
     6ac:	f0 2d       	mov	r31, r0
     6ae:	08 87       	std	Y+8, r16	; 0x08
     6b0:	19 87       	std	Y+9, r17	; 0x09
     6b2:	2a 87       	std	Y+10, r18	; 0x0a
     6b4:	3b 87       	std	Y+11, r19	; 0x0b
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	2a 81       	ldd	r18, Y+2	; 0x02
     6ba:	42 2f       	mov	r20, r18
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	76 2f       	mov	r23, r22
     6c4:	65 2f       	mov	r22, r21
     6c6:	54 2f       	mov	r21, r20
     6c8:	44 27       	eor	r20, r20
     6ca:	68 2b       	or	r22, r24
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	8a 01       	movw	r16, r20
     6d0:	9b 01       	movw	r18, r22
     6d2:	08 2b       	or	r16, r24
     6d4:	d9 01       	movw	r26, r18
     6d6:	c8 01       	movw	r24, r16
     6d8:	6c 01       	movw	r12, r24
     6da:	7d 01       	movw	r14, r26
     6dc:	68 94       	set
     6de:	14 f8       	bld	r1, 4
     6e0:	f5 94       	asr	r15
     6e2:	e7 94       	ror	r14
     6e4:	d7 94       	ror	r13
     6e6:	c7 94       	ror	r12
     6e8:	16 94       	lsr	r1
     6ea:	d1 f7       	brne	.-12     	; 0x6e0 <bmp085_getrawpressure+0x152>
     6ec:	80 90 71 1b 	lds	r8, 0x1B71	; 0x801b71 <bmp085_regac1>
     6f0:	90 90 72 1b 	lds	r9, 0x1B72	; 0x801b72 <bmp085_regac1+0x1>
     6f4:	09 2c       	mov	r0, r9
     6f6:	00 0c       	add	r0, r0
     6f8:	aa 08       	sbc	r10, r10
     6fa:	bb 08       	sbc	r11, r11
     6fc:	88 0c       	add	r8, r8
     6fe:	99 1c       	adc	r9, r9
     700:	aa 1c       	adc	r10, r10
     702:	bb 1c       	adc	r11, r11
     704:	88 0c       	add	r8, r8
     706:	99 1c       	adc	r9, r9
     708:	aa 1c       	adc	r10, r10
     70a:	bb 1c       	adc	r11, r11
     70c:	a0 91 5f 1b 	lds	r26, 0x1B5F	; 0x801b5f <bmp085_regb2>
     710:	b0 91 60 1b 	lds	r27, 0x1B60	; 0x801b60 <bmp085_regb2+0x1>
     714:	a3 01       	movw	r20, r6
     716:	92 01       	movw	r18, r4
     718:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__mulshisi3>
     71c:	2b 01       	movw	r4, r22
     71e:	3c 01       	movw	r6, r24
     720:	03 2e       	mov	r0, r19
     722:	37 e1       	ldi	r19, 0x17	; 23
     724:	75 94       	asr	r7
     726:	67 94       	ror	r6
     728:	57 94       	ror	r5
     72a:	47 94       	ror	r4
     72c:	3a 95       	dec	r19
     72e:	d1 f7       	brne	.-12     	; 0x724 <bmp085_getrawpressure+0x196>
     730:	30 2d       	mov	r19, r0
     732:	a0 91 79 1b 	lds	r26, 0x1B79	; 0x801b79 <bmp085_regac2>
     736:	b0 91 7a 1b 	lds	r27, 0x1B7A	; 0x801b7a <bmp085_regac2+0x1>
     73a:	2c 81       	ldd	r18, Y+4	; 0x04
     73c:	3d 81       	ldd	r19, Y+5	; 0x05
     73e:	4e 81       	ldd	r20, Y+6	; 0x06
     740:	5f 81       	ldd	r21, Y+7	; 0x07
     742:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__mulshisi3>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	07 2e       	mov	r0, r23
     74c:	7b e0       	ldi	r23, 0x0B	; 11
     74e:	b5 95       	asr	r27
     750:	a7 95       	ror	r26
     752:	97 95       	ror	r25
     754:	87 95       	ror	r24
     756:	7a 95       	dec	r23
     758:	d1 f7       	brne	.-12     	; 0x74e <bmp085_getrawpressure+0x1c0>
     75a:	70 2d       	mov	r23, r0
     75c:	48 0e       	add	r4, r24
     75e:	59 1e       	adc	r5, r25
     760:	6a 1e       	adc	r6, r26
     762:	7b 1e       	adc	r7, r27
     764:	84 0c       	add	r8, r4
     766:	95 1c       	adc	r9, r5
     768:	a6 1c       	adc	r10, r6
     76a:	b7 1c       	adc	r11, r7
     76c:	88 0c       	add	r8, r8
     76e:	99 1c       	adc	r9, r9
     770:	aa 1c       	adc	r10, r10
     772:	bb 1c       	adc	r11, r11
     774:	a7 01       	movw	r20, r14
     776:	96 01       	movw	r18, r12
     778:	28 19       	sub	r18, r8
     77a:	39 09       	sbc	r19, r9
     77c:	4a 09       	sbc	r20, r10
     77e:	5b 09       	sbc	r21, r11
     780:	aa e6       	ldi	r26, 0x6A	; 106
     782:	b8 e1       	ldi	r27, 0x18	; 24
     784:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__muluhisi3>
     788:	99 23       	and	r25, r25
     78a:	6c f0       	brlt	.+26     	; 0x7a6 <bmp085_getrawpressure+0x218>
     78c:	66 0f       	add	r22, r22
     78e:	77 1f       	adc	r23, r23
     790:	88 1f       	adc	r24, r24
     792:	99 1f       	adc	r25, r25
     794:	28 85       	ldd	r18, Y+8	; 0x08
     796:	39 85       	ldd	r19, Y+9	; 0x09
     798:	4a 85       	ldd	r20, Y+10	; 0x0a
     79a:	5b 85       	ldd	r21, Y+11	; 0x0b
     79c:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodsi4>
     7a0:	69 01       	movw	r12, r18
     7a2:	7a 01       	movw	r14, r20
     7a4:	0c c0       	rjmp	.+24     	; 0x7be <bmp085_getrawpressure+0x230>
     7a6:	28 85       	ldd	r18, Y+8	; 0x08
     7a8:	39 85       	ldd	r19, Y+9	; 0x09
     7aa:	4a 85       	ldd	r20, Y+10	; 0x0a
     7ac:	5b 85       	ldd	r21, Y+11	; 0x0b
     7ae:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodsi4>
     7b2:	69 01       	movw	r12, r18
     7b4:	7a 01       	movw	r14, r20
     7b6:	cc 0c       	add	r12, r12
     7b8:	dd 1c       	adc	r13, r13
     7ba:	ee 1c       	adc	r14, r14
     7bc:	ff 1c       	adc	r15, r15
     7be:	99 27       	eor	r25, r25
     7c0:	f7 fc       	sbrc	r15, 7
     7c2:	9a 95       	dec	r25
     7c4:	8f 2d       	mov	r24, r15
     7c6:	7e 2d       	mov	r23, r14
     7c8:	6d 2d       	mov	r22, r13
     7ca:	9b 01       	movw	r18, r22
     7cc:	ac 01       	movw	r20, r24
     7ce:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__mulsi3>
     7d2:	9b 01       	movw	r18, r22
     7d4:	ac 01       	movw	r20, r24
     7d6:	ae ed       	ldi	r26, 0xDE	; 222
     7d8:	bb e0       	ldi	r27, 0x0B	; 11
     7da:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__muluhisi3>
     7de:	4c 01       	movw	r8, r24
     7e0:	bb 24       	eor	r11, r11
     7e2:	97 fc       	sbrc	r9, 7
     7e4:	b0 94       	com	r11
     7e6:	ab 2c       	mov	r10, r11
     7e8:	a3 e4       	ldi	r26, 0x43	; 67
     7ea:	b3 ee       	ldi	r27, 0xE3	; 227
     7ec:	a7 01       	movw	r20, r14
     7ee:	96 01       	movw	r18, r12
     7f0:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__mulohisi3>
     7f4:	bb 27       	eor	r27, r27
     7f6:	97 fd       	sbrc	r25, 7
     7f8:	b0 95       	com	r27
     7fa:	ab 2f       	mov	r26, r27
     7fc:	88 0d       	add	r24, r8
     7fe:	99 1d       	adc	r25, r9
     800:	aa 1d       	adc	r26, r10
     802:	bb 1d       	adc	r27, r11
     804:	81 53       	subi	r24, 0x31	; 49
     806:	91 4f       	sbci	r25, 0xF1	; 241
     808:	af 4f       	sbci	r26, 0xFF	; 255
     80a:	bf 4f       	sbci	r27, 0xFF	; 255
     80c:	68 94       	set
     80e:	13 f8       	bld	r1, 3
     810:	b5 95       	asr	r27
     812:	a7 95       	ror	r26
     814:	97 95       	ror	r25
     816:	87 95       	ror	r24
     818:	16 94       	lsr	r1
     81a:	d1 f7       	brne	.-12     	; 0x810 <bmp085_getrawpressure+0x282>
     81c:	bc 01       	movw	r22, r24
     81e:	cd 01       	movw	r24, r26
     820:	6c 0d       	add	r22, r12
     822:	7d 1d       	adc	r23, r13
     824:	8e 1d       	adc	r24, r14
     826:	9f 1d       	adc	r25, r15
     828:	60 93 61 1b 	sts	0x1B61, r22	; 0x801b61 <bmp085_rawpressure>
     82c:	70 93 62 1b 	sts	0x1B62, r23	; 0x801b62 <bmp085_rawpressure+0x1>
     830:	80 93 63 1b 	sts	0x1B63, r24	; 0x801b63 <bmp085_rawpressure+0x2>
     834:	90 93 64 1b 	sts	0x1B64, r25	; 0x801b64 <bmp085_rawpressure+0x3>
     838:	37 dd       	rcall	.-1426   	; 0x2a8 <bmp085_avaragefilter>
     83a:	60 93 61 1b 	sts	0x1B61, r22	; 0x801b61 <bmp085_rawpressure>
     83e:	70 93 62 1b 	sts	0x1B62, r23	; 0x801b62 <bmp085_rawpressure+0x1>
     842:	80 93 63 1b 	sts	0x1B63, r24	; 0x801b63 <bmp085_rawpressure+0x2>
     846:	90 93 64 1b 	sts	0x1B64, r25	; 0x801b64 <bmp085_rawpressure+0x3>
     84a:	2b 96       	adiw	r28, 0x0b	; 11
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	bf 90       	pop	r11
     868:	af 90       	pop	r10
     86a:	9f 90       	pop	r9
     86c:	8f 90       	pop	r8
     86e:	7f 90       	pop	r7
     870:	6f 90       	pop	r6
     872:	5f 90       	pop	r5
     874:	4f 90       	pop	r4
     876:	08 95       	ret

00000878 <bmp085_gettemperature>:
     878:	0d de       	rcall	.-998    	; 0x494 <bmp085_getrawtemperature>
     87a:	80 91 67 1b 	lds	r24, 0x1B67	; 0x801b67 <bmp085_rawtemperature>
     87e:	90 91 68 1b 	lds	r25, 0x1B68	; 0x801b68 <bmp085_rawtemperature+0x1>
     882:	a0 91 69 1b 	lds	r26, 0x1B69	; 0x801b69 <bmp085_rawtemperature+0x2>
     886:	b0 91 6a 1b 	lds	r27, 0x1B6A	; 0x801b6a <bmp085_rawtemperature+0x3>
     88a:	08 96       	adiw	r24, 0x08	; 8
     88c:	a1 1d       	adc	r26, r1
     88e:	b1 1d       	adc	r27, r1
     890:	bc 01       	movw	r22, r24
     892:	cd 01       	movw	r24, r26
     894:	68 94       	set
     896:	13 f8       	bld	r1, 3
     898:	95 95       	asr	r25
     89a:	87 95       	ror	r24
     89c:	77 95       	ror	r23
     89e:	67 95       	ror	r22
     8a0:	16 94       	lsr	r1
     8a2:	d1 f7       	brne	.-12     	; 0x898 <bmp085_gettemperature+0x20>
     8a4:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__floatsisf>
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e2       	ldi	r20, 0x20	; 32
     8ae:	51 e4       	ldi	r21, 0x41	; 65
     8b0:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__divsf3>
     8b4:	08 95       	ret

000008b6 <bmp085_init>:

/*
 * init bmp085
 */
void bmp085_init() {
     8b6:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
     8b8:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8bc:	8a e1       	ldi	r24, 0x1A	; 26
     8be:	8a 95       	dec	r24
     8c0:	f1 f7       	brne	.-4      	; 0x8be <bmp085_init+0x8>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <bmp085_init+0xe>
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
     8c4:	2a dd       	rcall	.-1452   	; 0x31a <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
     8c6:	e6 dd       	rcall	.-1076   	; 0x494 <bmp085_getrawtemperature>
     8c8:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
     8ca:	61 de       	rcall	.-830    	; 0x58e <bmp085_getrawpressure>
     8cc:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     8ce:	e9 f7       	brne	.-6      	; 0x8ca <bmp085_init+0x14>
		bmp085_getrawpressure();
	}
	#endif
}
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <appDataInd>:
	}
	if ((d + Hystereze) > setTemperature)
	{
		openClose(0);
	}
}
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	dc 01       	movw	r26, r24
     8dc:	19 96       	adiw	r26, 0x09	; 9
     8de:	2c 91       	ld	r18, X
     8e0:	22 23       	and	r18, r18
     8e2:	81 f0       	breq	.+32     	; 0x904 <appDataInd+0x30>
     8e4:	8c 01       	movw	r16, r24
     8e6:	c0 e0       	ldi	r28, 0x00	; 0
     8e8:	d8 01       	movw	r26, r16
     8ea:	17 96       	adiw	r26, 0x07	; 7
     8ec:	ed 91       	ld	r30, X+
     8ee:	fc 91       	ld	r31, X
     8f0:	18 97       	sbiw	r26, 0x08	; 8
     8f2:	ec 0f       	add	r30, r28
     8f4:	f1 1d       	adc	r31, r1
     8f6:	80 81       	ld	r24, Z
     8f8:	4b d2       	rcall	.+1174   	; 0xd90 <HAL_UartWriteByte>
     8fa:	cf 5f       	subi	r28, 0xFF	; 255
     8fc:	f8 01       	movw	r30, r16
     8fe:	81 85       	ldd	r24, Z+9	; 0x09
     900:	c8 17       	cp	r28, r24
     902:	90 f3       	brcs	.-28     	; 0x8e8 <appDataInd+0x14>
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	08 95       	ret

0000090e <APP_WriteString>:
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
     914:	88 81       	ld	r24, Y
     916:	88 23       	and	r24, r24
     918:	29 f0       	breq	.+10     	; 0x924 <APP_WriteString+0x16>
     91a:	21 96       	adiw	r28, 0x01	; 1
     91c:	39 d2       	rcall	.+1138   	; 0xd90 <HAL_UartWriteByte>
     91e:	89 91       	ld	r24, Y+
     920:	81 11       	cpse	r24, r1
     922:	fc cf       	rjmp	.-8      	; 0x91c <APP_WriteString+0xe>
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <appSendData>:
     92a:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <appDataReqBusy>
     92e:	81 11       	cpse	r24, r1
     930:	04 c0       	rjmp	.+8      	; 0x93a <appSendData+0x10>
     932:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <appUartBufferPtr>
     936:	81 11       	cpse	r24, r1
     938:	0b c0       	rjmp	.+22     	; 0x950 <appSendData+0x26>
     93a:	8c e0       	ldi	r24, 0x0C	; 12
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	e7 df       	rcall	.-50     	; 0x90e <APP_WriteString>
     940:	87 ec       	ldi	r24, 0xC7	; 199
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	f1 f7       	brne	.-4      	; 0x944 <appSendData+0x1a>
     948:	00 c0       	rjmp	.+0      	; 0x94a <appSendData+0x20>
     94a:	00 00       	nop
     94c:	ee cf       	rjmp	.-36     	; 0x92a <appSendData>
     94e:	08 95       	ret
     950:	82 e5       	ldi	r24, 0x52	; 82
     952:	94 e0       	ldi	r25, 0x04	; 4
     954:	88 d3       	rcall	.+1808   	; 0x1066 <NWK_DataReq>
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <appDataReqBusy>
     95c:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <appUartBufferPtr>
     960:	08 95       	ret

00000962 <HAL_UartBytesReceived>:
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	8c 01       	movw	r16, r24
     96e:	89 2b       	or	r24, r25
     970:	c9 f0       	breq	.+50     	; 0x9a4 <HAL_UartBytesReceived+0x42>
     972:	c0 e0       	ldi	r28, 0x00	; 0
     974:	d0 e0       	ldi	r29, 0x00	; 0
     976:	41 d2       	rcall	.+1154   	; 0xdfa <HAL_UartReadByte>
     978:	f8 2e       	mov	r15, r24
     97a:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <appUartBufferPtr>
     97e:	9d 36       	cpi	r25, 0x6D	; 109
     980:	09 f4       	brne	.+2      	; 0x984 <HAL_UartBytesReceived+0x22>
     982:	d3 df       	rcall	.-90     	; 0x92a <appSendData>
     984:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <appUartBufferPtr>
     988:	ed 36       	cpi	r30, 0x6D	; 109
     98a:	40 f4       	brcc	.+16     	; 0x99c <HAL_UartBytesReceived+0x3a>
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	8e 0f       	add	r24, r30
     990:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <appUartBufferPtr>
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	e9 58       	subi	r30, 0x89	; 137
     998:	fc 4f       	sbci	r31, 0xFC	; 252
     99a:	f0 82       	st	Z, r15
     99c:	21 96       	adiw	r28, 0x01	; 1
     99e:	c0 17       	cp	r28, r16
     9a0:	d1 07       	cpc	r29, r17
     9a2:	49 f7       	brne	.-46     	; 0x976 <HAL_UartBytesReceived+0x14>
     9a4:	83 e6       	ldi	r24, 0x63	; 99
     9a6:	94 e0       	ldi	r25, 0x04	; 4
     9a8:	0e 94 71 11 	call	0x22e2	; 0x22e2 <SYS_TimerStop>
     9ac:	83 e6       	ldi	r24, 0x63	; 99
     9ae:	94 e0       	ldi	r25, 0x04	; 4
     9b0:	0e 94 c8 11 	call	0x2390	; 0x2390 <SYS_TimerStart>
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	08 95       	ret

000009c0 <appTimerHandler>:
     9c0:	b4 cf       	rjmp	.-152    	; 0x92a <appSendData>
     9c2:	08 95       	ret

000009c4 <APP_sendHello>:
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	89 e0       	ldi	r24, 0x09	; 9
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <malloc>
     9d6:	ec 01       	movw	r28, r24
     9d8:	80 e8       	ldi	r24, 0x80	; 128
     9da:	88 83       	st	Y, r24
     9dc:	80 e2       	ldi	r24, 0x20	; 32
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	9b 83       	std	Y+3, r25	; 0x03
     9e2:	8a 83       	std	Y+2, r24	; 0x02
     9e4:	80 e1       	ldi	r24, 0x10	; 16
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <malloc>
     9f0:	9d 83       	std	Y+5, r25	; 0x05
     9f2:	8c 83       	std	Y+4, r24	; 0x04
     9f4:	11 e0       	ldi	r17, 0x01	; 1
     9f6:	fc 01       	movw	r30, r24
     9f8:	10 83       	st	Z, r17
     9fa:	11 83       	std	Z+1, r17	; 0x01
     9fc:	82 e4       	ldi	r24, 0x42	; 66
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	98 87       	std	Y+8, r25	; 0x08
     a02:	8f 83       	std	Y+7, r24	; 0x07
     a04:	1e 82       	std	Y+6, r1	; 0x06
     a06:	89 e0       	ldi	r24, 0x09	; 9
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <malloc>
     a0e:	7c 01       	movw	r14, r24
     a10:	49 e0       	ldi	r20, 0x09	; 9
     a12:	bc 01       	movw	r22, r24
     a14:	ce 01       	movw	r24, r28
     a16:	cb d0       	rcall	.+406    	; 0xbae <serialize_hello_packet>
     a18:	99 e0       	ldi	r25, 0x09	; 9
     a1a:	f7 01       	movw	r30, r14
     a1c:	a4 ee       	ldi	r26, 0xE4	; 228
     a1e:	b3 e0       	ldi	r27, 0x03	; 3
     a20:	01 90       	ld	r0, Z+
     a22:	0d 92       	st	X+, r0
     a24:	9a 95       	dec	r25
     a26:	e1 f7       	brne	.-8      	; 0xa20 <APP_sendHello+0x5c>
     a28:	e2 e5       	ldi	r30, 0x52	; 82
     a2a:	f4 e0       	ldi	r31, 0x04	; 4
     a2c:	16 82       	std	Z+6, r1	; 0x06
     a2e:	15 82       	std	Z+5, r1	; 0x05
     a30:	17 83       	std	Z+7, r17	; 0x07
     a32:	10 87       	std	Z+8, r17	; 0x08
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	81 87       	std	Z+9, r24	; 0x09
     a38:	84 ee       	ldi	r24, 0xE4	; 228
     a3a:	93 e0       	ldi	r25, 0x03	; 3
     a3c:	93 87       	std	Z+11, r25	; 0x0b
     a3e:	82 87       	std	Z+10, r24	; 0x0a
     a40:	89 e0       	ldi	r24, 0x09	; 9
     a42:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <appUartBufferPtr>
     a46:	84 87       	std	Z+12, r24	; 0x0c
     a48:	82 e3       	ldi	r24, 0x32	; 50
     a4a:	95 e0       	ldi	r25, 0x05	; 5
     a4c:	96 87       	std	Z+14, r25	; 0x0e
     a4e:	85 87       	std	Z+13, r24	; 0x0d
     a50:	6c df       	rcall	.-296    	; 0x92a <appSendData>
     a52:	80 e3       	ldi	r24, 0x30	; 48
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	5b df       	rcall	.-330    	; 0x90e <APP_WriteString>
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	08 95       	ret

00000a64 <appDataConf>:
     a64:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <appDataReqBusy>
     a68:	fc 01       	movw	r30, r24
     a6a:	87 85       	ldd	r24, Z+15	; 0x0f
     a6c:	81 11       	cpse	r24, r1
     a6e:	04 c0       	rjmp	.+8      	; 0xa78 <appDataConf+0x14>
     a70:	8f e4       	ldi	r24, 0x4F	; 79
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	4c cf       	rjmp	.-360    	; 0x90e <APP_WriteString>
     a76:	08 95       	ret
     a78:	88 e6       	ldi	r24, 0x68	; 104
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	48 df       	rcall	.-368    	; 0x90e <APP_WriteString>
     a7e:	55 cf       	rjmp	.-342    	; 0x92a <appSendData>
     a80:	08 95       	ret

00000a82 <CheckButtons>:

void CheckButtons(){
	if (!tbi(PINE, PINE7))
     a82:	67 99       	sbic	0x0c, 7	; 12
     a84:	08 c0       	rjmp	.+16     	; 0xa96 <CheckButtons+0x14>
	{
		openClose(0);
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 70 13 	call	0x26e0	; 0x26e0 <openClose>
		TermostaticValveMod = 0;
     a8c:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <TermostaticValveMod>
		HAL_TimerDelay(200);
     a90:	88 ec       	ldi	r24, 0xC8	; 200
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	e6 d0       	rcall	.+460    	; 0xc62 <HAL_TimerDelay>
	}	
	if (!tbi(PINF, PINF3))
     a96:	7b 99       	sbic	0x0f, 3	; 15
     a98:	08 c0       	rjmp	.+16     	; 0xaaa <CheckButtons+0x28>
	{
		openClose(1);
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <openClose>
		TermostaticValveMod = 0;
     aa0:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <TermostaticValveMod>
		HAL_TimerDelay(200);		
     aa4:	88 ec       	ldi	r24, 0xC8	; 200
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	dc c0       	rjmp	.+440    	; 0xc62 <HAL_TimerDelay>
     aaa:	08 95       	ret

00000aac <main>:
}



int main(void)
{
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	2a 97       	sbiw	r28, 0x0a	; 10
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
	SYS_Init();
     ac0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <SYS_Init>
	HAL_UartInit(38400);
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	76 e9       	ldi	r23, 0x96	; 150
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0c d1       	rcall	.+536    	; 0xce6 <HAL_UartInit>
	initTermosticValve();
     ace:	0e 94 5e 13 	call	0x26bc	; 0x26bc <initTermosticValve>
	i2c_init();
     ad2:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <i2c_init>
	bmp085_init();
     ad6:	ef de       	rcall	.-546    	; 0x8b6 <bmp085_init>
	//Tlacitka vstup
	cbi(DDRG, DDG5);	//tlacitko 3
     ad8:	9d 98       	cbi	0x13, 5	; 19
	cbi(DDRF, DDF3);	//tlacitko 2
     ada:	83 98       	cbi	0x10, 3	; 16
	cbi(DDRE, DDE7);	//tlacitko 1
     adc:	6f 98       	cbi	0x0d, 7	; 13
	
	//Tlacitka pull-up
	sbi(PORTG, 5);	//tlacitko 3
     ade:	a5 9a       	sbi	0x14, 5	; 20
	sbi(PORTF, 3);	//tlacitko 2
     ae0:	8b 9a       	sbi	0x11, 3	; 17
	sbi(PORTE, 7);	//tlacitko 1
     ae2:	77 9a       	sbi	0x0e, 7	; 14
	HAL_UartWriteByte('a');
     ae4:	81 e6       	ldi	r24, 0x61	; 97
     ae6:	54 d1       	rcall	.+680    	; 0xd90 <HAL_UartWriteByte>
	uint16_t CycleCounter = 0;
	APP_sendHello();
     ae8:	6d df       	rcall	.-294    	; 0x9c4 <APP_sendHello>
	//Tlacitka pull-up
	sbi(PORTG, 5);	//tlacitko 3
	sbi(PORTF, 3);	//tlacitko 2
	sbi(PORTE, 7);	//tlacitko 1
	HAL_UartWriteByte('a');
	uint16_t CycleCounter = 0;
     aea:	00 e0       	ldi	r16, 0x00	; 0
     aec:	10 e0       	ldi	r17, 0x00	; 0
NWK_OpenEndpoint(NETWORK_ENDPOINT, appDataInd);
NWK_OpenEndpoint(GET_SET_ENDPOINT, appDataInd);

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     aee:	0f 2e       	mov	r0, r31
     af0:	f3 e6       	ldi	r31, 0x63	; 99
     af2:	ef 2e       	mov	r14, r31
     af4:	f4 e0       	ldi	r31, 0x04	; 4
     af6:	ff 2e       	mov	r15, r31
     af8:	f0 2d       	mov	r31, r0
     afa:	0f 2e       	mov	r0, r31
     afc:	f4 e1       	ldi	r31, 0x14	; 20
     afe:	8f 2e       	mov	r8, r31
     b00:	91 2c       	mov	r9, r1
     b02:	a1 2c       	mov	r10, r1
     b04:	b1 2c       	mov	r11, r1
     b06:	f0 2d       	mov	r31, r0
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
appTimer.handler = appTimerHandler;
     b08:	0f 2e       	mov	r0, r31
     b0a:	f0 ee       	ldi	r31, 0xE0	; 224
     b0c:	cf 2e       	mov	r12, r31
     b0e:	f4 e0       	ldi	r31, 0x04	; 4
     b10:	df 2e       	mov	r13, r31
     b12:	f0 2d       	mov	r31, r0
				//setPosition(pos);
				HAL_UartWriteString("Teplota:\r\n");
				itoa((int)d, vysledek_string, 10);
				HAL_UartWriteString(vysledek_string);
				HAL_UartWriteString("\r\n");
			CycleCounter = 0;
     b14:	21 2c       	mov	r2, r1
     b16:	31 2c       	mov	r3, r1
	//openClose(0);


	while (1)
	{
		SYS_TaskHandler();
     b18:	0e 94 03 11 	call	0x2206	; 0x2206 <SYS_TaskHandler>
		HAL_UartTaskHandler();
     b1c:	07 d2       	rcall	.+1038   	; 0xf2c <HAL_UartTaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
switch (appState)
     b1e:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <appState>
     b22:	81 11       	cpse	r24, r1
     b24:	1f c0       	rjmp	.+62     	; 0xb64 <main+0xb8>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
NWK_SetAddr(APP_ADDR);
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e8       	ldi	r25, 0x80	; 128
     b2a:	5a d2       	rcall	.+1204   	; 0xfe0 <NWK_SetAddr>
NWK_SetPanId(APP_PANID);
     b2c:	88 e8       	ldi	r24, 0x88	; 136
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	5e d2       	rcall	.+1212   	; 0xfee <NWK_SetPanId>
PHY_SetChannel(APP_CHANNEL);
     b32:	8f e0       	ldi	r24, 0x0F	; 15
     b34:	0e 94 2a 10 	call	0x2054	; 0x2054 <PHY_SetChannel>
#ifdef PHY_AT86RF212
PHY_SetBand(APP_BAND);
PHY_SetModulation(APP_MODULATION);
#endif
PHY_SetRxState(true);
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	0e 94 26 10 	call	0x204c	; 0x204c <PHY_SetRxState>

NWK_OpenEndpoint(NETWORK_ENDPOINT, appDataInd);
     b3e:	6a e6       	ldi	r22, 0x6A	; 106
     b40:	74 e0       	ldi	r23, 0x04	; 4
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	5b d2       	rcall	.+1206   	; 0xffc <NWK_OpenEndpoint>
NWK_OpenEndpoint(GET_SET_ENDPOINT, appDataInd);
     b46:	6a e6       	ldi	r22, 0x6A	; 106
     b48:	74 e0       	ldi	r23, 0x04	; 4
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	57 d2       	rcall	.+1198   	; 0xffc <NWK_OpenEndpoint>

HAL_BoardInit();

appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     b4e:	f7 01       	movw	r30, r14
     b50:	86 82       	std	Z+6, r8	; 0x06
     b52:	97 82       	std	Z+7, r9	; 0x07
     b54:	a0 86       	std	Z+8, r10	; 0x08
     b56:	b1 86       	std	Z+9, r11	; 0x09
appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     b58:	12 86       	std	Z+10, r1	; 0x0a
appTimer.handler = appTimerHandler;
     b5a:	d4 86       	std	Z+12, r13	; 0x0c
     b5c:	c3 86       	std	Z+11, r12	; 0x0b
switch (appState)
{
case APP_STATE_INITIAL:
{
appInit();
appState = APP_STATE_IDLE;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <appState>
	{
		SYS_TaskHandler();
		HAL_UartTaskHandler();
		APP_TaskHandler();
	
		CheckButtons();
     b64:	8e df       	rcall	.-228    	; 0xa82 <CheckButtons>
	

		if (CycleCounter == 800)
     b66:	00 32       	cpi	r16, 0x20	; 32
     b68:	f3 e0       	ldi	r31, 0x03	; 3
     b6a:	1f 07       	cpc	r17, r31
     b6c:	d1 f4       	brne	.+52     	; 0xba2 <main+0xf6>
			//if(TermostaticValveMod == 1) Thermostatic();
			/*if(pos == 100) smer = 1;
				if(pos == 0) smer = 0;
				if(smer == 0) pos += 10;
				if(smer == 1) pos -= 10;*/
				double d = bmp085_gettemperature();
     b6e:	84 de       	rcall	.-760    	; 0x878 <bmp085_gettemperature>
     b70:	2b 01       	movw	r4, r22
     b72:	3c 01       	movw	r6, r24
				//setPosition(pos);
				HAL_UartWriteString("Teplota:\r\n");
     b74:	8e e7       	ldi	r24, 0x7E	; 126
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	32 d1       	rcall	.+612    	; 0xdde <HAL_UartWriteString>
				itoa((int)d, vysledek_string, 10);
     b7a:	c3 01       	movw	r24, r6
     b7c:	b2 01       	movw	r22, r4
     b7e:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__fixsfsi>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b86:	4a e0       	ldi	r20, 0x0A	; 10
     b88:	be 01       	movw	r22, r28
     b8a:	6f 5f       	subi	r22, 0xFF	; 255
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
     b8e:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__itoa_ncheck>
				HAL_UartWriteString(vysledek_string);
     b92:	ce 01       	movw	r24, r28
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	23 d1       	rcall	.+582    	; 0xdde <HAL_UartWriteString>
				HAL_UartWriteString("\r\n");
     b98:	8d e2       	ldi	r24, 0x2D	; 45
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	20 d1       	rcall	.+576    	; 0xdde <HAL_UartWriteString>
			CycleCounter = 0;
     b9e:	02 2d       	mov	r16, r2
     ba0:	13 2d       	mov	r17, r3
			}*/
		}
	
	
	
		CycleCounter++;
     ba2:	0f 5f       	subi	r16, 0xFF	; 255
     ba4:	1f 4f       	sbci	r17, 0xFF	; 255
	
		HAL_TimerDelay(2500);	
     ba6:	84 ec       	ldi	r24, 0xC4	; 196
     ba8:	99 e0       	ldi	r25, 0x09	; 9
     baa:	5b d0       	rcall	.+182    	; 0xc62 <HAL_TimerDelay>
	}
     bac:	b5 cf       	rjmp	.-150    	; 0xb18 <main+0x6c>

00000bae <serialize_hello_packet>:
#ifdef DEBUGGING
	debug_packet(frame_payload, packet_length);
#endif // DEBUGGING
}

void serialize_hello_packet(HelloPacket_t *hello_packet, uint8_t *frame_payload, uint8_t packet_length) {
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	8c 01       	movw	r16, r24
     bbc:	7b 01       	movw	r14, r22
	memcpy(frame_payload, hello_packet, 4);
     bbe:	fc 01       	movw	r30, r24
     bc0:	80 81       	ld	r24, Z
     bc2:	91 81       	ldd	r25, Z+1	; 0x01
     bc4:	a2 81       	ldd	r26, Z+2	; 0x02
     bc6:	b3 81       	ldd	r27, Z+3	; 0x03
     bc8:	fb 01       	movw	r30, r22
     bca:	80 83       	st	Z, r24
     bcc:	91 83       	std	Z+1, r25	; 0x01
     bce:	a2 83       	std	Z+2, r26	; 0x02
     bd0:	b3 83       	std	Z+3, r27	; 0x03
	memcpy(&frame_payload[packet_length - 4], hello_packet->data_part.items, packet_length - 7);
     bd2:	c4 2f       	mov	r28, r20
     bd4:	d0 e0       	ldi	r29, 0x00	; 0
     bd6:	ce 01       	movw	r24, r28
     bd8:	04 97       	sbiw	r24, 0x04	; 4
     bda:	ae 01       	movw	r20, r28
     bdc:	47 50       	subi	r20, 0x07	; 7
     bde:	51 09       	sbc	r21, r1
     be0:	f8 01       	movw	r30, r16
     be2:	64 81       	ldd	r22, Z+4	; 0x04
     be4:	75 81       	ldd	r23, Z+5	; 0x05
     be6:	8e 0d       	add	r24, r14
     be8:	9f 1d       	adc	r25, r15
     bea:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <memcpy>
	memcpy(&frame_payload[packet_length - 3], &hello_packet->sleep, 3);
     bee:	23 97       	sbiw	r28, 0x03	; 3
     bf0:	ce 0d       	add	r28, r14
     bf2:	df 1d       	adc	r29, r15
     bf4:	f8 01       	movw	r30, r16
     bf6:	86 81       	ldd	r24, Z+6	; 0x06
     bf8:	97 81       	ldd	r25, Z+7	; 0x07
     bfa:	a0 85       	ldd	r26, Z+8	; 0x08
     bfc:	88 83       	st	Y, r24
     bfe:	99 83       	std	Y+1, r25	; 0x01
     c00:	aa 83       	std	Y+2, r26	; 0x02
#ifdef DEBUGGING
	debug_packet(frame_payload, packet_length);
#endif // DEBUGGING
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	08 95       	ret

00000c10 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     c10:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	a8 95       	wdr
     c18:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c1c:	88 61       	ori	r24, 0x18	; 24
     c1e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c22:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c26:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     c28:	e1 e6       	ldi	r30, 0x61	; 97
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 e8       	ldi	r24, 0x80	; 128
     c2e:	80 83       	st	Z, r24
  CLKPR = 0;
     c30:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     c32:	78 94       	sei

  HAL_TimerInit();
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <HAL_TimerInit>
     c36:	08 95       	ret

00000c38 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
     c38:	10 92 7b 1b 	sts	0x1B7B, r1	; 0x801b7b <halTimerIrqCount>

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     c3c:	80 e1       	ldi	r24, 0x10	; 16
     c3e:	97 e2       	ldi	r25, 0x27	; 39
     c40:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     c44:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
  TCCR4B = (1 << WGM12);              // CTC mode
     c48:	e1 ea       	ldi	r30, 0xA1	; 161
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	88 e0       	ldi	r24, 0x08	; 8
     c4e:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
     c50:	80 81       	ld	r24, Z
     c52:	82 60       	ori	r24, 0x02	; 2
     c54:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     c56:	e2 e7       	ldi	r30, 0x72	; 114
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	82 60       	ori	r24, 0x02	; 2
     c5e:	80 83       	st	Z, r24
     c60:	08 95       	ret

00000c62 <HAL_TimerDelay>:
*****************************************************************************/
void HAL_TimerDelay(uint16_t us)
{
  PRAGMA(diag_suppress=Pa082);

  OCR4B = TCNT4 + us;
     c62:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
     c66:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     c6a:	82 0f       	add	r24, r18
     c6c:	93 1f       	adc	r25, r19
     c6e:	ea ea       	ldi	r30, 0xAA	; 170
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	91 83       	std	Z+1, r25	; 0x01
     c74:	80 83       	st	Z, r24
  if (OCR4B > OCR4A)
     c76:	20 81       	ld	r18, Z
     c78:	31 81       	ldd	r19, Z+1	; 0x01
     c7a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     c7e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	50 f4       	brcc	.+20     	; 0xc9c <HAL_TimerDelay+0x3a>
    OCR4B -= OCR4A;
     c88:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     c8c:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	82 1b       	sub	r24, r18
     c96:	93 0b       	sbc	r25, r19
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24

  TIFR4 = (1 << OCF4B);
     c9c:	84 e0       	ldi	r24, 0x04	; 4
     c9e:	89 bb       	out	0x19, r24	; 25
  while (0 == (TIFR4 & (1 << OCF4B)));
     ca0:	ca 9b       	sbis	0x19, 2	; 25
     ca2:	fe cf       	rjmp	.-4      	; 0xca0 <HAL_TimerDelay+0x3e>

  PRAGMA(diag_default=Pa082);
}
     ca4:	08 95       	ret

00000ca6 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	8f 93       	push	r24
  halTimerIrqCount++;
     cb2:	80 91 7b 1b 	lds	r24, 0x1B7B	; 0x801b7b <halTimerIrqCount>
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	80 93 7b 1b 	sts	0x1B7B, r24	; 0x801b7b <halTimerIrqCount>
}
     cbc:	8f 91       	pop	r24
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	0f 90       	pop	r0
     cc4:	1f 90       	pop	r1
     cc6:	18 95       	reti

00000cc8 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     cc8:	1f 92       	push	r1
     cca:	0f 92       	push	r0
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	0f 92       	push	r0
     cd0:	11 24       	eor	r1, r1
     cd2:	8f 93       	push	r24
  halSleepTimerEvent = true;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <halSleepTimerEvent>
}
     cda:	8f 91       	pop	r24
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	0f 90       	pop	r0
     ce2:	1f 90       	pop	r1
     ce4:	18 95       	reti

00000ce6 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	aa 1f       	adc	r26, r26
     cf0:	bb 1f       	adc	r27, r27
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	aa 1f       	adc	r26, r26
     cf8:	bb 1f       	adc	r27, r27
     cfa:	9c 01       	movw	r18, r24
     cfc:	ad 01       	movw	r20, r26
     cfe:	22 0f       	add	r18, r18
     d00:	33 1f       	adc	r19, r19
     d02:	44 1f       	adc	r20, r20
     d04:	55 1f       	adc	r21, r21
     d06:	22 0f       	add	r18, r18
     d08:	33 1f       	adc	r19, r19
     d0a:	44 1f       	adc	r20, r20
     d0c:	55 1f       	adc	r21, r21
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	74 e2       	ldi	r23, 0x24	; 36
     d12:	84 ef       	ldi	r24, 0xF4	; 244
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodsi4>
     d1a:	ba 01       	movw	r22, r20
     d1c:	a9 01       	movw	r20, r18
     d1e:	41 50       	subi	r20, 0x01	; 1
     d20:	51 09       	sbc	r21, r1
     d22:	61 09       	sbc	r22, r1
     d24:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
     d26:	bb 27       	eor	r27, r27
     d28:	a7 2f       	mov	r26, r23
     d2a:	96 2f       	mov	r25, r22
     d2c:	85 2f       	mov	r24, r21
     d2e:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
  UBRRxL = (brr & 0xff);
     d32:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
  UCSRxA = (1 << U2X1);
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     d3c:	88 e9       	ldi	r24, 0x98	; 152
     d3e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
  UCSRxC = (3 << UCSZ10);
     d42:	86 e0       	ldi	r24, 0x06	; 6
     d44:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

  txFifo.data = txData;
     d48:	e0 ea       	ldi	r30, 0xA0	; 160
     d4a:	f7 e0       	ldi	r31, 0x07	; 7
     d4c:	8f e0       	ldi	r24, 0x0F	; 15
     d4e:	96 e0       	ldi	r25, 0x06	; 6
     d50:	91 87       	std	Z+9, r25	; 0x09
     d52:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     d54:	80 e9       	ldi	r24, 0x90	; 144
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	95 83       	std	Z+5, r25	; 0x05
     d5a:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
     d5c:	17 82       	std	Z+7, r1	; 0x07
     d5e:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
     d60:	11 82       	std	Z+1, r1	; 0x01
     d62:	10 82       	st	Z, r1
  txFifo.tail = 0;
     d64:	13 82       	std	Z+3, r1	; 0x03
     d66:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     d68:	e5 e0       	ldi	r30, 0x05	; 5
     d6a:	f6 e0       	ldi	r31, 0x06	; 6
     d6c:	24 e7       	ldi	r18, 0x74	; 116
     d6e:	34 e0       	ldi	r19, 0x04	; 4
     d70:	31 87       	std	Z+9, r19	; 0x09
     d72:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     d74:	95 83       	std	Z+5, r25	; 0x05
     d76:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
     d78:	17 82       	std	Z+7, r1	; 0x07
     d7a:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
     d7c:	11 82       	std	Z+1, r1	; 0x01
     d7e:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     d80:	13 82       	std	Z+3, r1	; 0x03
     d82:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <udrEmpty>
  newData = false;
     d8a:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <newData>
     d8e:	08 95       	ret

00000d90 <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
     d94:	e0 ea       	ldi	r30, 0xA0	; 160
     d96:	f7 e0       	ldi	r31, 0x07	; 7
     d98:	26 81       	ldd	r18, Z+6	; 0x06
     d9a:	37 81       	ldd	r19, Z+7	; 0x07
     d9c:	64 81       	ldd	r22, Z+4	; 0x04
     d9e:	75 81       	ldd	r23, Z+5	; 0x05
     da0:	26 17       	cp	r18, r22
     da2:	37 07       	cpc	r19, r23
     da4:	c9 f0       	breq	.+50     	; 0xdd8 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
     da6:	c0 85       	ldd	r28, Z+8	; 0x08
     da8:	d1 85       	ldd	r29, Z+9	; 0x09
     daa:	42 81       	ldd	r20, Z+2	; 0x02
     dac:	53 81       	ldd	r21, Z+3	; 0x03
     dae:	da 01       	movw	r26, r20
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	b3 83       	std	Z+3, r27	; 0x03
     db4:	a2 83       	std	Z+2, r26	; 0x02
     db6:	fe 01       	movw	r30, r28
     db8:	e4 0f       	add	r30, r20
     dba:	f5 1f       	adc	r31, r21
     dbc:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
     dbe:	6a 17       	cp	r22, r26
     dc0:	7b 07       	cpc	r23, r27
     dc2:	21 f4       	brne	.+8      	; 0xdcc <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
     dc4:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <txFifo+0x3>
     dc8:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <txFifo+0x2>
  txFifo.bytes++;
     dcc:	2f 5f       	subi	r18, 0xFF	; 255
     dce:	3f 4f       	sbci	r19, 0xFF	; 255
     dd0:	30 93 a7 07 	sts	0x07A7, r19	; 0x8007a7 <txFifo+0x7>
     dd4:	20 93 a6 07 	sts	0x07A6, r18	; 0x8007a6 <txFifo+0x6>
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <HAL_UartWriteString>:
/*************************************************************************//**
*****************************************************************************/

void HAL_UartWriteString(char *text)
{
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	ec 01       	movw	r28, r24
	while (*text != 0x00)
     de4:	88 81       	ld	r24, Y
     de6:	88 23       	and	r24, r24
     de8:	29 f0       	breq	.+10     	; 0xdf4 <HAL_UartWriteString+0x16>
     dea:	21 96       	adiw	r28, 0x01	; 1
	{
		HAL_UartWriteByte(*text);
     dec:	d1 df       	rcall	.-94     	; 0xd90 <HAL_UartWriteByte>
/*************************************************************************//**
*****************************************************************************/

void HAL_UartWriteString(char *text)
{
	while (*text != 0x00)
     dee:	89 91       	ld	r24, Y+
     df0:	81 11       	cpse	r24, r1
     df2:	fc cf       	rjmp	.-8      	; 0xdec <HAL_UartWriteString+0xe>
	{
		HAL_UartWriteByte(*text);
		text++;
	}
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     dfa:	4f b7       	in	r20, 0x3f	; 63
     dfc:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     dfe:	e5 e0       	ldi	r30, 0x05	; 5
     e00:	f6 e0       	ldi	r31, 0x06	; 6
     e02:	20 85       	ldd	r18, Z+8	; 0x08
     e04:	31 85       	ldd	r19, Z+9	; 0x09
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01
     e0a:	bc 01       	movw	r22, r24
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	71 83       	std	Z+1, r23	; 0x01
     e12:	60 83       	st	Z, r22
     e14:	d9 01       	movw	r26, r18
     e16:	a8 0f       	add	r26, r24
     e18:	b9 1f       	adc	r27, r25
     e1a:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
     e1c:	60 81       	ld	r22, Z
     e1e:	71 81       	ldd	r23, Z+1	; 0x01
     e20:	24 81       	ldd	r18, Z+4	; 0x04
     e22:	35 81       	ldd	r19, Z+5	; 0x05
     e24:	62 17       	cp	r22, r18
     e26:	73 07       	cpc	r23, r19
     e28:	21 f4       	brne	.+8      	; 0xe32 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
     e2a:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <rxFifo+0x1>
     e2e:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <rxFifo>
    rxFifo.bytes--;
     e32:	e5 e0       	ldi	r30, 0x05	; 5
     e34:	f6 e0       	ldi	r31, 0x06	; 6
     e36:	26 81       	ldd	r18, Z+6	; 0x06
     e38:	37 81       	ldd	r19, Z+7	; 0x07
     e3a:	21 50       	subi	r18, 0x01	; 1
     e3c:	31 09       	sbc	r19, r1
     e3e:	37 83       	std	Z+7, r19	; 0x07
     e40:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
     e42:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     e44:	08 95       	ret

00000e46 <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     e46:	1f 92       	push	r1
     e48:	0f 92       	push	r0
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	0f 92       	push	r0
     e4e:	11 24       	eor	r1, r1
     e50:	0b b6       	in	r0, 0x3b	; 59
     e52:	0f 92       	push	r0
     e54:	8f 93       	push	r24
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
  udrEmpty = true;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     e60:	e9 ec       	ldi	r30, 0xC9	; 201
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	8f 7d       	andi	r24, 0xDF	; 223
     e68:	80 83       	st	Z, r24
}
     e6a:	ff 91       	pop	r31
     e6c:	ef 91       	pop	r30
     e6e:	8f 91       	pop	r24
     e70:	0f 90       	pop	r0
     e72:	0b be       	out	0x3b, r0	; 59
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	0b b6       	in	r0, 0x3b	; 59
     e8a:	0f 92       	push	r0
     e8c:	2f 93       	push	r18
     e8e:	3f 93       	push	r19
     e90:	4f 93       	push	r20
     e92:	5f 93       	push	r21
     e94:	6f 93       	push	r22
     e96:	7f 93       	push	r23
     e98:	8f 93       	push	r24
     e9a:	9f 93       	push	r25
     e9c:	af 93       	push	r26
     e9e:	bf 93       	push	r27
     ea0:	ef 93       	push	r30
     ea2:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     ea4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
  uint8_t byte = UDRx;
     ea8:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     eac:	8c 71       	andi	r24, 0x1C	; 28
     eae:	59 f5       	brne	.+86     	; 0xf06 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     eb0:	e5 e0       	ldi	r30, 0x05	; 5
     eb2:	f6 e0       	ldi	r31, 0x06	; 6
     eb4:	46 81       	ldd	r20, Z+6	; 0x06
     eb6:	57 81       	ldd	r21, Z+7	; 0x07
     eb8:	84 81       	ldd	r24, Z+4	; 0x04
     eba:	95 81       	ldd	r25, Z+5	; 0x05
     ebc:	48 17       	cp	r20, r24
     ebe:	59 07       	cpc	r21, r25
     ec0:	11 f1       	breq	.+68     	; 0xf06 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     ec2:	40 85       	ldd	r20, Z+8	; 0x08
     ec4:	51 85       	ldd	r21, Z+9	; 0x09
     ec6:	82 81       	ldd	r24, Z+2	; 0x02
     ec8:	93 81       	ldd	r25, Z+3	; 0x03
     eca:	bc 01       	movw	r22, r24
     ecc:	6f 5f       	subi	r22, 0xFF	; 255
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	73 83       	std	Z+3, r23	; 0x03
     ed2:	62 83       	std	Z+2, r22	; 0x02
     ed4:	da 01       	movw	r26, r20
     ed6:	a8 0f       	add	r26, r24
     ed8:	b9 1f       	adc	r27, r25
     eda:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     edc:	22 81       	ldd	r18, Z+2	; 0x02
     ede:	33 81       	ldd	r19, Z+3	; 0x03
     ee0:	84 81       	ldd	r24, Z+4	; 0x04
     ee2:	95 81       	ldd	r25, Z+5	; 0x05
     ee4:	28 17       	cp	r18, r24
     ee6:	39 07       	cpc	r19, r25
     ee8:	21 f4       	brne	.+8      	; 0xef2 <__vector_36+0x74>
      rxFifo.tail = 0;
     eea:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <rxFifo+0x3>
     eee:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <rxFifo+0x2>
    rxFifo.bytes++;
     ef2:	e5 e0       	ldi	r30, 0x05	; 5
     ef4:	f6 e0       	ldi	r31, 0x06	; 6
     ef6:	86 81       	ldd	r24, Z+6	; 0x06
     ef8:	97 81       	ldd	r25, Z+7	; 0x07
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	97 83       	std	Z+7, r25	; 0x07
     efe:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0b be       	out	0x3b, r0	; 59
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     f2c:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <txFifo+0x6>
     f30:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <txFifo+0x7>
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	69 f1       	breq	.+90     	; 0xf92 <HAL_UartTaskHandler+0x66>
     f38:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <udrEmpty>
     f3c:	22 23       	and	r18, r18
     f3e:	49 f1       	breq	.+82     	; 0xf92 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     f40:	e0 ea       	ldi	r30, 0xA0	; 160
     f42:	f7 e0       	ldi	r31, 0x07	; 7
     f44:	60 85       	ldd	r22, Z+8	; 0x08
     f46:	71 85       	ldd	r23, Z+9	; 0x09
     f48:	20 81       	ld	r18, Z
     f4a:	31 81       	ldd	r19, Z+1	; 0x01
     f4c:	a9 01       	movw	r20, r18
     f4e:	4f 5f       	subi	r20, 0xFF	; 255
     f50:	5f 4f       	sbci	r21, 0xFF	; 255
     f52:	51 83       	std	Z+1, r21	; 0x01
     f54:	40 83       	st	Z, r20
     f56:	db 01       	movw	r26, r22
     f58:	a2 0f       	add	r26, r18
     f5a:	b3 1f       	adc	r27, r19
     f5c:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     f5e:	64 81       	ldd	r22, Z+4	; 0x04
     f60:	75 81       	ldd	r23, Z+5	; 0x05
     f62:	46 17       	cp	r20, r22
     f64:	57 07       	cpc	r21, r23
     f66:	21 f4       	brne	.+8      	; 0xf70 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     f68:	10 92 a1 07 	sts	0x07A1, r1	; 0x8007a1 <txFifo+0x1>
     f6c:	10 92 a0 07 	sts	0x07A0, r1	; 0x8007a0 <txFifo>
    txFifo.bytes--;
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	90 93 a7 07 	sts	0x07A7, r25	; 0x8007a7 <txFifo+0x7>
     f76:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     f7a:	9f b7       	in	r25, 0x3f	; 63
     f7c:	f8 94       	cli
      UDRx = byte;
     f7e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
      UCSRxB |= (1 << UDRIE1);
     f82:	e9 ec       	ldi	r30, 0xC9	; 201
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	80 62       	ori	r24, 0x20	; 32
     f8a:	80 83       	st	Z, r24
      udrEmpty = false;
     f8c:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     f90:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     f92:	2f b7       	in	r18, 0x3f	; 63
     f94:	f8 94       	cli
      new = newData;
     f96:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <newData>
      newData = false;
     f9a:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <newData>
      bytes = rxFifo.bytes;
     f9e:	40 91 0b 06 	lds	r20, 0x060B	; 0x80060b <rxFifo+0x6>
     fa2:	50 91 0c 06 	lds	r21, 0x060C	; 0x80060c <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     fa6:	2f bf       	out	0x3f, r18	; 63

    if (new)
     fa8:	99 23       	and	r25, r25
     faa:	11 f0       	breq	.+4      	; 0xfb0 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     fac:	ca 01       	movw	r24, r20
     fae:	d9 cc       	rjmp	.-1614   	; 0x962 <HAL_UartBytesReceived>
     fb0:	08 95       	ret

00000fb2 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     fb2:	ec e7       	ldi	r30, 0x7C	; 124
     fb4:	fb e1       	ldi	r31, 0x1B	; 27
     fb6:	14 82       	std	Z+4, r1	; 0x04
     fb8:	15 82       	std	Z+5, r1	; 0x05
     fba:	11 82       	std	Z+1, r1	; 0x01
     fbc:	10 82       	st	Z, r1
     fbe:	17 a2       	std	Z+39, r1	; 0x27
     fc0:	16 a2       	std	Z+38, r1	; 0x26
     fc2:	e2 e8       	ldi	r30, 0x82	; 130
     fc4:	fb e1       	ldi	r31, 0x1B	; 27
     fc6:	82 ea       	ldi	r24, 0xA2	; 162
     fc8:	9b e1       	ldi	r25, 0x1B	; 27
     fca:	11 92       	st	Z+, r1
     fcc:	11 92       	st	Z+, r1
     fce:	e8 17       	cp	r30, r24
     fd0:	f9 07       	cpc	r31, r25
     fd2:	d9 f7       	brne	.-10     	; 0xfca <NWK_Init+0x18>
     fd4:	4f d6       	rcall	.+3230   	; 0x1c74 <nwkTxInit>
     fd6:	65 d3       	rcall	.+1738   	; 0x16a2 <nwkRxInit>
     fd8:	0d d1       	rcall	.+538    	; 0x11f4 <nwkFrameInit>
     fda:	40 d0       	rcall	.+128    	; 0x105c <nwkDataReqInit>
     fdc:	8f c1       	rjmp	.+798    	; 0x12fc <nwkRouteInit>
     fde:	08 95       	ret

00000fe0 <NWK_SetAddr>:
     fe0:	90 93 7d 1b 	sts	0x1B7D, r25	; 0x801b7d <nwkIb+0x1>
     fe4:	80 93 7c 1b 	sts	0x1B7C, r24	; 0x801b7c <nwkIb>
     fe8:	0c 94 40 10 	jmp	0x2080	; 0x2080 <PHY_SetShortAddr>
     fec:	08 95       	ret

00000fee <NWK_SetPanId>:
     fee:	90 93 7f 1b 	sts	0x1B7F, r25	; 0x801b7f <nwkIb+0x3>
     ff2:	80 93 7e 1b 	sts	0x1B7E, r24	; 0x801b7e <nwkIb+0x2>
     ff6:	0c 94 2e 10 	jmp	0x205c	; 0x205c <PHY_SetPanId>
     ffa:	08 95       	ret

00000ffc <NWK_OpenEndpoint>:
     ffc:	e8 2f       	mov	r30, r24
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	ee 57       	subi	r30, 0x7E	; 126
    1006:	f4 4e       	sbci	r31, 0xE4	; 228
    1008:	71 83       	std	Z+1, r23	; 0x01
    100a:	60 83       	st	Z, r22
    100c:	08 95       	ret

0000100e <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
    100e:	91 d3       	rcall	.+1826   	; 0x1732 <nwkRxTaskHandler>
  nwkTxTaskHandler();
    1010:	2f d7       	rcall	.+3678   	; 0x1e70 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
    1012:	4d c0       	rjmp	.+154    	; 0x10ae <nwkDataReqTaskHandler>
    1014:	08 95       	ret

00001016 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1016:	e0 91 aa 07 	lds	r30, 0x07AA	; 0x8007aa <nwkDataReqQueue>
    101a:	f0 91 ab 07 	lds	r31, 0x07AB	; 0x8007ab <nwkDataReqQueue+0x1>
    101e:	30 97       	sbiw	r30, 0x00	; 0
    1020:	d9 f0       	breq	.+54     	; 0x1058 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
    1022:	22 81       	ldd	r18, Z+2	; 0x02
    1024:	33 81       	ldd	r19, Z+3	; 0x03
    1026:	28 17       	cp	r18, r24
    1028:	39 07       	cpc	r19, r25
    102a:	89 f4       	brne	.+34     	; 0x104e <nwkDataReqTxConf+0x38>
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <nwkDataReqTxConf+0x22>
    102e:	22 81       	ldd	r18, Z+2	; 0x02
    1030:	33 81       	ldd	r19, Z+3	; 0x03
    1032:	28 17       	cp	r18, r24
    1034:	39 07       	cpc	r19, r25
    1036:	59 f4       	brne	.+22     	; 0x104e <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
    1038:	dc 01       	movw	r26, r24
    103a:	ad 57       	subi	r26, 0x7D	; 125
    103c:	bf 4f       	sbci	r27, 0xFF	; 255
    103e:	2c 91       	ld	r18, X
    1040:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
    1042:	13 96       	adiw	r26, 0x03	; 3
    1044:	2c 91       	ld	r18, X
    1046:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1048:	22 e0       	ldi	r18, 0x02	; 2
    104a:	24 83       	std	Z+4, r18	; 0x04
      break;
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    104e:	01 90       	ld	r0, Z+
    1050:	f0 81       	ld	r31, Z
    1052:	e0 2d       	mov	r30, r0
    1054:	30 97       	sbiw	r30, 0x00	; 0
    1056:	59 f7       	brne	.-42     	; 0x102e <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
    1058:	11 c1       	rjmp	.+546    	; 0x127c <nwkFrameFree>
    105a:	08 95       	ret

0000105c <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    105c:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <nwkDataReqQueue+0x1>
    1060:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <nwkDataReqQueue>
    1064:	08 95       	ret

00001066 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
    1066:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
    1068:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
    106a:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
    106c:	13 82       	std	Z+3, r1	; 0x03
    106e:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
    1070:	ac e7       	ldi	r26, 0x7C	; 124
    1072:	bb e1       	ldi	r27, 0x1B	; 27
    1074:	96 96       	adiw	r26, 0x26	; 38
    1076:	8d 91       	ld	r24, X+
    1078:	9c 91       	ld	r25, X
    107a:	97 97       	sbiw	r26, 0x27	; 39
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	97 96       	adiw	r26, 0x27	; 39
    1080:	9c 93       	st	X, r25
    1082:	8e 93       	st	-X, r24
    1084:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
    1086:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <nwkDataReqQueue>
    108a:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <nwkDataReqQueue+0x1>
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	39 f4       	brne	.+14     	; 0x10a0 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
    1092:	11 82       	std	Z+1, r1	; 0x01
    1094:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
    1096:	f0 93 ab 07 	sts	0x07AB, r31	; 0x8007ab <nwkDataReqQueue+0x1>
    109a:	e0 93 aa 07 	sts	0x07AA, r30	; 0x8007aa <nwkDataReqQueue>
    109e:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    10a4:	f0 93 ab 07 	sts	0x07AB, r31	; 0x8007ab <nwkDataReqQueue+0x1>
    10a8:	e0 93 aa 07 	sts	0x07AA, r30	; 0x8007aa <nwkDataReqQueue>
    10ac:	08 95       	ret

000010ae <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    10b6:	e0 91 aa 07 	lds	r30, 0x07AA	; 0x8007aa <nwkDataReqQueue>
    10ba:	f0 91 ab 07 	lds	r31, 0x07AB	; 0x8007ab <nwkDataReqQueue+0x1>
    10be:	30 97       	sbiw	r30, 0x00	; 0
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <nwkDataReqTaskHandler+0x16>
    10c2:	93 c0       	rjmp	.+294    	; 0x11ea <nwkDataReqTaskHandler+0x13c>
    10c4:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	88 23       	and	r24, r24
    10ca:	21 f0       	breq	.+8      	; 0x10d4 <nwkDataReqTaskHandler+0x26>
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <nwkDataReqTaskHandler+0x24>
    10d0:	66 c0       	rjmp	.+204    	; 0x119e <nwkDataReqTaskHandler+0xf0>
    10d2:	85 c0       	rjmp	.+266    	; 0x11de <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    10d4:	9a d0       	rcall	.+308    	; 0x120a <nwkFrameAlloc>
    10d6:	8c 01       	movw	r16, r24
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	21 f4       	brne	.+8      	; 0x10e4 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    10e0:	8f 87       	std	Y+15, r24	; 0x0f
    10e2:	83 c0       	rjmp	.+262    	; 0x11ea <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
    10e4:	9b 83       	std	Y+3, r25	; 0x03
    10e6:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    10ec:	f8 01       	movw	r30, r16
    10ee:	e9 57       	subi	r30, 0x79	; 121
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	8b e0       	ldi	r24, 0x0B	; 11
    10f4:	98 e0       	ldi	r25, 0x08	; 8
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    10fa:	31 97       	sbiw	r30, 0x01	; 1
    10fc:	89 85       	ldd	r24, Y+9	; 0x09
    10fe:	82 fb       	bst	r24, 2
    1100:	88 27       	eor	r24, r24
    1102:	80 f9       	bld	r24, 0
    1104:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    1106:	99 85       	ldd	r25, Y+9	; 0x09
    1108:	d8 01       	movw	r26, r16
    110a:	1b 96       	adiw	r26, 0x0b	; 11
    110c:	8c 91       	ld	r24, X
    110e:	1b 97       	sbiw	r26, 0x0b	; 11
    1110:	90 fb       	bst	r25, 0
    1112:	80 f9       	bld	r24, 0
    1114:	1b 96       	adiw	r26, 0x0b	; 11
    1116:	8c 93       	st	X, r24
    1118:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    111a:	99 85       	ldd	r25, Y+9	; 0x09
    111c:	93 fb       	bst	r25, 3
    111e:	99 27       	eor	r25, r25
    1120:	90 f9       	bld	r25, 0
    1122:	90 fb       	bst	r25, 0
    1124:	82 f9       	bld	r24, 2
    1126:	1b 96       	adiw	r26, 0x0b	; 11
    1128:	8c 93       	st	X, r24
    112a:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    112c:	ec e7       	ldi	r30, 0x7C	; 124
    112e:	fb e1       	ldi	r31, 0x1B	; 27
    1130:	84 81       	ldd	r24, Z+4	; 0x04
    1132:	8f 5f       	subi	r24, 0xFF	; 255
    1134:	84 83       	std	Z+4, r24	; 0x04
    1136:	1c 96       	adiw	r26, 0x0c	; 12
    1138:	8c 93       	st	X, r24
    113a:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
    113c:	80 81       	ld	r24, Z
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	1e 96       	adiw	r26, 0x0e	; 14
    1142:	9c 93       	st	X, r25
    1144:	8e 93       	st	-X, r24
    1146:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	9e 81       	ldd	r25, Y+6	; 0x06
    114c:	50 96       	adiw	r26, 0x10	; 16
    114e:	9c 93       	st	X, r25
    1150:	8e 93       	st	-X, r24
    1152:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    1154:	88 85       	ldd	r24, Y+8	; 0x08
    1156:	98 2f       	mov	r25, r24
    1158:	9f 70       	andi	r25, 0x0F	; 15
    115a:	51 96       	adiw	r26, 0x11	; 17
    115c:	8c 91       	ld	r24, X
    115e:	51 97       	sbiw	r26, 0x11	; 17
    1160:	80 7f       	andi	r24, 0xF0	; 240
    1162:	89 2b       	or	r24, r25
    1164:	51 96       	adiw	r26, 0x11	; 17
    1166:	8c 93       	st	X, r24
    1168:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    116a:	9f 81       	ldd	r25, Y+7	; 0x07
    116c:	92 95       	swap	r25
    116e:	90 7f       	andi	r25, 0xF0	; 240
    1170:	8f 70       	andi	r24, 0x0F	; 15
    1172:	89 2b       	or	r24, r25
    1174:	51 96       	adiw	r26, 0x11	; 17
    1176:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
    1178:	f8 01       	movw	r30, r16
    117a:	ef 57       	subi	r30, 0x7F	; 127
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	6a 85       	ldd	r22, Y+10	; 0x0a
    1184:	7b 85       	ldd	r23, Y+11	; 0x0b
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
    118a:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <memcpy>
  frame->size += req->size;
    118e:	f8 01       	movw	r30, r16
    1190:	91 81       	ldd	r25, Z+1	; 0x01
    1192:	8c 85       	ldd	r24, Y+12	; 0x0c
    1194:	89 0f       	add	r24, r25
    1196:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    1198:	c8 01       	movw	r24, r16
    119a:	8f d5       	rcall	.+2846   	; 0x1cba <nwkTxFrame>
    119c:	26 c0       	rjmp	.+76     	; 0x11ea <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    119e:	ce 17       	cp	r28, r30
    11a0:	df 07       	cpc	r29, r31
    11a2:	41 f4       	brne	.+16     	; 0x11b4 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    11a4:	88 81       	ld	r24, Y
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	90 93 ab 07 	sts	0x07AB, r25	; 0x8007ab <nwkDataReqQueue+0x1>
    11ac:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <nwkDataReqQueue>
    11b0:	0a c0       	rjmp	.+20     	; 0x11c6 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    11b2:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	c8 17       	cp	r28, r24
    11ba:	d9 07       	cpc	r29, r25
    11bc:	d1 f7       	brne	.-12     	; 0x11b2 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    11be:	88 81       	ld	r24, Y
    11c0:	99 81       	ldd	r25, Y+1	; 0x01
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    11c6:	ec e7       	ldi	r30, 0x7C	; 124
    11c8:	fb e1       	ldi	r31, 0x1B	; 27
    11ca:	86 a1       	ldd	r24, Z+38	; 0x26
    11cc:	97 a1       	ldd	r25, Z+39	; 0x27
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	97 a3       	std	Z+39, r25	; 0x27
    11d2:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
    11d4:	ed 85       	ldd	r30, Y+13	; 0x0d
    11d6:	fe 85       	ldd	r31, Y+14	; 0x0e
    11d8:	ce 01       	movw	r24, r28
    11da:	19 95       	eicall
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    11de:	09 90       	ld	r0, Y+
    11e0:	d8 81       	ld	r29, Y
    11e2:	c0 2d       	mov	r28, r0
    11e4:	20 97       	sbiw	r28, 0x00	; 0
    11e6:	09 f0       	breq	.+2      	; 0x11ea <nwkDataReqTaskHandler+0x13c>
    11e8:	6e cf       	rjmp	.-292    	; 0x10c6 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	08 95       	ret

000011f4 <nwkFrameInit>:

/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
    11f4:	ec ea       	ldi	r30, 0xAC	; 172
    11f6:	f7 e0       	ldi	r31, 0x07	; 7
    11f8:	8a eb       	ldi	r24, 0xBA	; 186
    11fa:	97 e1       	ldi	r25, 0x17	; 23
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    11fc:	10 82       	st	Z, r1
    11fe:	e7 57       	subi	r30, 0x77	; 119
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
/*************************************************************************//**
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1202:	e8 17       	cp	r30, r24
    1204:	f9 07       	cpc	r31, r25
    1206:	d1 f7       	brne	.-12     	; 0x11fc <nwkFrameInit+0x8>
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
}
    1208:	08 95       	ret

0000120a <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    120a:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <nwkFrameFrames>
    120e:	88 23       	and	r24, r24
    1210:	59 f0       	breq	.+22     	; 0x1228 <nwkFrameAlloc+0x1e>
    1212:	e5 e3       	ldi	r30, 0x35	; 53
    1214:	f8 e0       	ldi	r31, 0x08	; 8
    1216:	6a eb       	ldi	r22, 0xBA	; 186
    1218:	77 e1       	ldi	r23, 0x17	; 23
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	ac 01       	movw	r20, r24
    1220:	20 81       	ld	r18, Z
    1222:	21 11       	cpse	r18, r1
    1224:	22 c0       	rjmp	.+68     	; 0x126a <nwkFrameAlloc+0x60>
    1226:	02 c0       	rjmp	.+4      	; 0x122c <nwkFrameAlloc+0x22>
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    122c:	69 e8       	ldi	r22, 0x89	; 137
    122e:	64 9f       	mul	r22, r20
    1230:	90 01       	movw	r18, r0
    1232:	65 9f       	mul	r22, r21
    1234:	30 0d       	add	r19, r0
    1236:	11 24       	eor	r1, r1
    1238:	c9 01       	movw	r24, r18
    123a:	84 55       	subi	r24, 0x54	; 84
    123c:	98 4f       	sbci	r25, 0xF8	; 248
    123e:	fc 01       	movw	r30, r24
    1240:	11 92       	st	Z+, r1
    1242:	6a 95       	dec	r22
    1244:	e9 f7       	brne	.-6      	; 0x1240 <nwkFrameAlloc+0x36>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    1246:	40 e1       	ldi	r20, 0x10	; 16
    1248:	fc 01       	movw	r30, r24
    124a:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    124c:	ef 57       	subi	r30, 0x7F	; 127
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	22 54       	subi	r18, 0x42	; 66
    1252:	38 4f       	sbci	r19, 0xF8	; 248
    1254:	31 83       	std	Z+1, r19	; 0x01
    1256:	20 83       	st	Z, r18
      nwkIb.lock++;
    1258:	ec e7       	ldi	r30, 0x7C	; 124
    125a:	fb e1       	ldi	r31, 0x1B	; 27
    125c:	26 a1       	ldd	r18, Z+38	; 0x26
    125e:	37 a1       	ldd	r19, Z+39	; 0x27
    1260:	2f 5f       	subi	r18, 0xFF	; 255
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	37 a3       	std	Z+39, r19	; 0x27
    1266:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    1268:	08 95       	ret
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	e7 57       	subi	r30, 0x77	; 119
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    1270:	e6 17       	cp	r30, r22
    1272:	f7 07       	cpc	r31, r23
    1274:	a1 f6       	brne	.-88     	; 0x121e <nwkFrameAlloc+0x14>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
}
    127a:	08 95       	ret

0000127c <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    127c:	fc 01       	movw	r30, r24
    127e:	10 82       	st	Z, r1
  nwkIb.lock--;
    1280:	ec e7       	ldi	r30, 0x7C	; 124
    1282:	fb e1       	ldi	r31, 0x1B	; 27
    1284:	86 a1       	ldd	r24, Z+38	; 0x26
    1286:	97 a1       	ldd	r25, Z+39	; 0x27
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	97 a3       	std	Z+39, r25	; 0x27
    128c:	86 a3       	std	Z+38, r24	; 0x26
    128e:	08 95       	ret

00001290 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	41 f0       	breq	.+16     	; 0x12a4 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    1294:	fc 01       	movw	r30, r24
    1296:	e7 57       	subi	r30, 0x77	; 119
    1298:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    129a:	87 e1       	ldi	r24, 0x17	; 23
    129c:	ea 3b       	cpi	r30, 0xBA	; 186
    129e:	f8 07       	cpc	r31, r24
    12a0:	18 f0       	brcs	.+6      	; 0x12a8 <nwkFrameNext+0x18>
    12a2:	15 c0       	rjmp	.+42     	; 0x12ce <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    12a4:	ec ea       	ldi	r30, 0xAC	; 172
    12a6:	f7 e0       	ldi	r31, 0x07	; 7
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    12a8:	80 81       	ld	r24, Z
    12aa:	88 23       	and	r24, r24
    12ac:	39 f0       	breq	.+14     	; 0x12bc <nwkFrameNext+0x2c>
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <nwkFrameNext+0x26>
    12b0:	80 81       	ld	r24, Z
    12b2:	88 23       	and	r24, r24
    12b4:	19 f0       	breq	.+6      	; 0x12bc <nwkFrameNext+0x2c>
      return frame;
    12b6:	8e 2f       	mov	r24, r30
    12b8:	9f 2f       	mov	r25, r31
    12ba:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    12bc:	e7 57       	subi	r30, 0x77	; 119
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	87 e1       	ldi	r24, 0x17	; 23
    12c2:	ea 3b       	cpi	r30, 0xBA	; 186
    12c4:	f8 07       	cpc	r31, r24
    12c6:	a0 f3       	brcs	.-24     	; 0x12b0 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	08 95       	ret
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
}
    12d2:	08 95       	ret

000012d4 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    12d4:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    12d6:	dc 01       	movw	r26, r24
    12d8:	ad 57       	subi	r26, 0x7D	; 125
    12da:	bf 4f       	sbci	r27, 0xFF	; 255
    12dc:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    12de:	ac e7       	ldi	r26, 0x7C	; 124
    12e0:	bb e1       	ldi	r27, 0x1B	; 27
    12e2:	14 96       	adiw	r26, 0x04	; 4
    12e4:	9c 91       	ld	r25, X
    12e6:	14 97       	sbiw	r26, 0x04	; 4
    12e8:	9f 5f       	subi	r25, 0xFF	; 255
    12ea:	14 96       	adiw	r26, 0x04	; 4
    12ec:	9c 93       	st	X, r25
    12ee:	14 97       	sbiw	r26, 0x04	; 4
    12f0:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    12f2:	8d 91       	ld	r24, X+
    12f4:	9c 91       	ld	r25, X
    12f6:	96 87       	std	Z+14, r25	; 0x0e
    12f8:	85 87       	std	Z+13, r24	; 0x0d
    12fa:	08 95       	ret

000012fc <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
    12fc:	af eb       	ldi	r26, 0xBF	; 191
    12fe:	b7 e1       	ldi	r27, 0x17	; 23
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	4f ef       	ldi	r20, 0xFF	; 255
    1306:	5f ef       	ldi	r21, 0xFF	; 255
    1308:	fd 01       	movw	r30, r26
    130a:	34 97       	sbiw	r30, 0x04	; 4
    130c:	51 83       	std	Z+1, r21	; 0x01
    130e:	40 83       	st	Z, r20
    1310:	fc 01       	movw	r30, r24
    1312:	ee 0f       	add	r30, r30
    1314:	ff 1f       	adc	r31, r31
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	e8 1b       	sub	r30, r24
    1320:	f9 0b       	sbc	r31, r25
    1322:	e6 54       	subi	r30, 0x46	; 70
    1324:	f8 4e       	sbci	r31, 0xE8	; 232
    1326:	20 81       	ld	r18, Z
    1328:	2e 7f       	andi	r18, 0xFE	; 254
    132a:	20 83       	st	Z, r18
    132c:	1c 92       	st	X, r1
    132e:	01 96       	adiw	r24, 0x01	; 1
    1330:	17 96       	adiw	r26, 0x07	; 7
    1332:	84 36       	cpi	r24, 0x64	; 100
    1334:	91 05       	cpc	r25, r1
    1336:	41 f7       	brne	.-48     	; 0x1308 <nwkRouteInit+0xc>
    1338:	08 95       	ret

0000133a <NWK_RouteFindEntry>:
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	eb eb       	ldi	r30, 0xBB	; 187
    1344:	f7 e1       	ldi	r31, 0x17	; 23
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	06 2f       	mov	r16, r22
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	40 81       	ld	r20, Z
    1350:	51 81       	ldd	r21, Z+1	; 0x01
    1352:	48 17       	cp	r20, r24
    1354:	59 07       	cpc	r21, r25
    1356:	b1 f4       	brne	.+44     	; 0x1384 <NWK_RouteFindEntry+0x4a>
    1358:	d9 01       	movw	r26, r18
    135a:	aa 0f       	add	r26, r26
    135c:	bb 1f       	adc	r27, r27
    135e:	aa 0f       	add	r26, r26
    1360:	bb 1f       	adc	r27, r27
    1362:	aa 0f       	add	r26, r26
    1364:	bb 1f       	adc	r27, r27
    1366:	a2 1b       	sub	r26, r18
    1368:	b3 0b       	sbc	r27, r19
    136a:	a6 54       	subi	r26, 0x46	; 70
    136c:	b8 4e       	sbci	r27, 0xE8	; 232
    136e:	4c 91       	ld	r20, X
    1370:	46 95       	lsr	r20
    1372:	41 70       	andi	r20, 0x01	; 1
    1374:	c4 2f       	mov	r28, r20
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	d4 2f       	mov	r29, r20
    137a:	c0 17       	cp	r28, r16
    137c:	d1 07       	cpc	r29, r17
    137e:	11 f4       	brne	.+4      	; 0x1384 <NWK_RouteFindEntry+0x4a>
    1380:	cd 01       	movw	r24, r26
    1382:	08 c0       	rjmp	.+16     	; 0x1394 <NWK_RouteFindEntry+0x5a>
    1384:	2f 5f       	subi	r18, 0xFF	; 255
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	37 96       	adiw	r30, 0x07	; 7
    138a:	24 36       	cpi	r18, 0x64	; 100
    138c:	31 05       	cpc	r19, r1
    138e:	f9 f6       	brne	.-66     	; 0x134e <NWK_RouteFindEntry+0x14>
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	08 95       	ret

0000139e <NWK_RouteNewEntry>:
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	ef eb       	ldi	r30, 0xBF	; 191
    13a4:	f7 e1       	ldi	r31, 0x17	; 23
    13a6:	2b e7       	ldi	r18, 0x7B	; 123
    13a8:	3a e1       	ldi	r19, 0x1A	; 26
    13aa:	c0 e0       	ldi	r28, 0x00	; 0
    13ac:	d0 e0       	ldi	r29, 0x00	; 0
    13ae:	df 01       	movw	r26, r30
    13b0:	15 97       	sbiw	r26, 0x05	; 5
    13b2:	8c 91       	ld	r24, X
    13b4:	80 fd       	sbrc	r24, 0
    13b6:	0b c0       	rjmp	.+22     	; 0x13ce <NWK_RouteNewEntry+0x30>
    13b8:	80 81       	ld	r24, Z
    13ba:	88 23       	and	r24, r24
    13bc:	69 f0       	breq	.+26     	; 0x13d8 <NWK_RouteNewEntry+0x3a>
    13be:	20 97       	sbiw	r28, 0x00	; 0
    13c0:	29 f0       	breq	.+10     	; 0x13cc <NWK_RouteNewEntry+0x2e>
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	89 17       	cp	r24, r25
    13c6:	18 f4       	brcc	.+6      	; 0x13ce <NWK_RouteNewEntry+0x30>
    13c8:	ed 01       	movw	r28, r26
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <NWK_RouteNewEntry+0x30>
    13cc:	ed 01       	movw	r28, r26
    13ce:	37 96       	adiw	r30, 0x07	; 7
    13d0:	e2 17       	cp	r30, r18
    13d2:	f3 07       	cpc	r31, r19
    13d4:	61 f7       	brne	.-40     	; 0x13ae <NWK_RouteNewEntry+0x10>
    13d6:	de 01       	movw	r26, r28
    13d8:	8c 91       	ld	r24, X
    13da:	8d 70       	andi	r24, 0x0D	; 13
    13dc:	80 63       	ori	r24, 0x30	; 48
    13de:	8c 93       	st	X, r24
    13e0:	80 e8       	ldi	r24, 0x80	; 128
    13e2:	15 96       	adiw	r26, 0x05	; 5
    13e4:	8c 93       	st	X, r24
    13e6:	15 97       	sbiw	r26, 0x05	; 5
    13e8:	cd 01       	movw	r24, r26
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	08 95       	ret

000013f0 <NWK_RouteFreeEntry>:
    13f0:	fc 01       	movw	r30, r24
    13f2:	80 81       	ld	r24, Z
    13f4:	80 fd       	sbrc	r24, 0
    13f6:	05 c0       	rjmp	.+10     	; 0x1402 <NWK_RouteFreeEntry+0x12>
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	9f ef       	ldi	r25, 0xFF	; 255
    13fc:	92 83       	std	Z+2, r25	; 0x02
    13fe:	81 83       	std	Z+1, r24	; 0x01
    1400:	15 82       	std	Z+5, r1	; 0x05
    1402:	08 95       	ret

00001404 <NWK_RouteNextHop>:
    1404:	9a df       	rcall	.-204    	; 0x133a <NWK_RouteFindEntry>
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	21 f0       	breq	.+8      	; 0x1412 <NWK_RouteNextHop+0xe>
    140a:	fc 01       	movw	r30, r24
    140c:	83 81       	ldd	r24, Z+3	; 0x03
    140e:	94 81       	ldd	r25, Z+4	; 0x04
    1410:	08 95       	ret
    1412:	8f ef       	ldi	r24, 0xFF	; 255
    1414:	9f ef       	ldi	r25, 0xFF	; 255
    1416:	08 95       	ret

00001418 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
    1418:	90 df       	rcall	.-224    	; 0x133a <NWK_RouteFindEntry>
  if (entry)
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	09 f0       	breq	.+2      	; 0x1420 <nwkRouteRemove+0x8>
    NWK_RouteFreeEntry(entry);
    141e:	e8 cf       	rjmp	.-48     	; 0x13f0 <NWK_RouteFreeEntry>
    1420:	08 95       	ret

00001422 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
    142c:	01 85       	ldd	r16, Z+9	; 0x09
    142e:	12 85       	ldd	r17, Z+10	; 0x0a
    1430:	11 23       	and	r17, r17
    1432:	2c f4       	brge	.+10     	; 0x143e <nwkRouteFrameReceived+0x1c>
    1434:	85 85       	ldd	r24, Z+13	; 0x0d
    1436:	96 85       	ldd	r25, Z+14	; 0x0e
    1438:	08 17       	cp	r16, r24
    143a:	19 07       	cpc	r17, r25
    143c:	e1 f5       	brne	.+120    	; 0x14b6 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    143e:	85 81       	ldd	r24, Z+5	; 0x05
    1440:	96 81       	ldd	r25, Z+6	; 0x06
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	c1 f1       	breq	.+112    	; 0x14b6 <nwkRouteFrameReceived+0x94>
    1446:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	85 85       	ldd	r24, Z+13	; 0x0d
    144c:	96 85       	ldd	r25, Z+14	; 0x0e
    144e:	75 df       	rcall	.-278    	; 0x133a <NWK_RouteFindEntry>
    1450:	fc 01       	movw	r30, r24

  if (entry)
    1452:	89 2b       	or	r24, r25
    1454:	a1 f0       	breq	.+40     	; 0x147e <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
    1456:	8f 81       	ldd	r24, Y+7	; 0x07
    1458:	98 85       	ldd	r25, Y+8	; 0x08
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	f9 f4       	brne	.+62     	; 0x149c <nwkRouteFrameReceived+0x7a>
    145e:	20 91 7c 1b 	lds	r18, 0x1B7C	; 0x801b7c <nwkIb>
    1462:	30 91 7d 1b 	lds	r19, 0x1B7D	; 0x801b7d <nwkIb+0x1>
    1466:	8f 85       	ldd	r24, Y+15	; 0x0f
    1468:	98 89       	ldd	r25, Y+16	; 0x10
    146a:	28 17       	cp	r18, r24
    146c:	39 07       	cpc	r19, r25
    146e:	b1 f4       	brne	.+44     	; 0x149c <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
    1470:	14 83       	std	Z+4, r17	; 0x04
    1472:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
    1474:	80 81       	ld	r24, Z
    1476:	8f 70       	andi	r24, 0x0F	; 15
    1478:	80 63       	ori	r24, 0x30	; 48
    147a:	80 83       	st	Z, r24
    147c:	0a c0       	rjmp	.+20     	; 0x1492 <nwkRouteFrameReceived+0x70>
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
    147e:	8f df       	rcall	.-226    	; 0x139e <NWK_RouteNewEntry>
    1480:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
    1482:	8d 85       	ldd	r24, Y+13	; 0x0d
    1484:	9e 85       	ldd	r25, Y+14	; 0x0e
    1486:	92 83       	std	Z+2, r25	; 0x02
    1488:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
    148a:	89 85       	ldd	r24, Y+9	; 0x09
    148c:	9a 85       	ldd	r25, Y+10	; 0x0a
    148e:	94 83       	std	Z+4, r25	; 0x04
    1490:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
    1492:	cd 57       	subi	r28, 0x7D	; 125
    1494:	df 4f       	sbci	r29, 0xFF	; 255
    1496:	88 81       	ld	r24, Y
    1498:	86 83       	std	Z+6, r24	; 0x06
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    149c:	83 81       	ldd	r24, Z+3	; 0x03
    149e:	94 81       	ldd	r25, Z+4	; 0x04
    14a0:	08 17       	cp	r16, r24
    14a2:	19 07       	cpc	r17, r25
    14a4:	b1 f3       	breq	.-20     	; 0x1492 <nwkRouteFrameReceived+0x70>
    14a6:	de 01       	movw	r26, r28
    14a8:	ad 57       	subi	r26, 0x7D	; 125
    14aa:	bf 4f       	sbci	r27, 0xFF	; 255
    14ac:	9c 91       	ld	r25, X
    14ae:	86 81       	ldd	r24, Z+6	; 0x06
    14b0:	89 17       	cp	r24, r25
    14b2:	f0 f2       	brcs	.-68     	; 0x1470 <nwkRouteFrameReceived+0x4e>
    14b4:	ee cf       	rjmp	.-36     	; 0x1492 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	08 95       	ret

000014c0 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
    14c6:	87 85       	ldd	r24, Z+15	; 0x0f
    14c8:	90 89       	ldd	r25, Z+16	; 0x10
    14ca:	8f 3f       	cpi	r24, 0xFF	; 255
    14cc:	2f ef       	ldi	r18, 0xFF	; 255
    14ce:	92 07       	cpc	r25, r18
    14d0:	d9 f1       	breq	.+118    	; 0x1548 <nwkRouteFrameSent+0x88>
    14d2:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
    14d4:	63 85       	ldd	r22, Z+11	; 0x0b
    14d6:	63 fb       	bst	r22, 3
    14d8:	66 27       	eor	r22, r22
    14da:	60 f9       	bld	r22, 0
    14dc:	2e df       	rcall	.-420    	; 0x133a <NWK_RouteFindEntry>
    14de:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
    14e0:	89 2b       	or	r24, r25
    14e2:	91 f1       	breq	.+100    	; 0x1548 <nwkRouteFrameSent+0x88>
    14e4:	8c 91       	ld	r24, X
    14e6:	80 fd       	sbrc	r24, 0
    14e8:	2f c0       	rjmp	.+94     	; 0x1548 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
    14ea:	fe 01       	movw	r30, r28
    14ec:	ed 57       	subi	r30, 0x7D	; 125
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	80 81       	ld	r24, Z
    14f2:	81 11       	cpse	r24, r1
    14f4:	19 c0       	rjmp	.+50     	; 0x1528 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
    14f6:	8c 91       	ld	r24, X
    14f8:	8f 70       	andi	r24, 0x0F	; 15
    14fa:	80 63       	ori	r24, 0x30	; 48
    14fc:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
    14fe:	15 96       	adiw	r26, 0x05	; 5
    1500:	8c 91       	ld	r24, X
    1502:	15 97       	sbiw	r26, 0x05	; 5
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	15 96       	adiw	r26, 0x05	; 5
    1508:	8c 93       	st	X, r24
    150a:	8f 3f       	cpi	r24, 0xFF	; 255
    150c:	e9 f4       	brne	.+58     	; 0x1548 <nwkRouteFrameSent+0x88>
    150e:	ef eb       	ldi	r30, 0xBF	; 191
    1510:	f7 e1       	ldi	r31, 0x17	; 23
    1512:	2b e7       	ldi	r18, 0x7B	; 123
    1514:	3a e1       	ldi	r19, 0x1A	; 26
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
    1516:	80 81       	ld	r24, Z
    1518:	86 95       	lsr	r24
    151a:	8f 5f       	subi	r24, 0xFF	; 255
    151c:	80 83       	st	Z, r24
    151e:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    1520:	e2 17       	cp	r30, r18
    1522:	f3 07       	cpc	r31, r19
    1524:	c1 f7       	brne	.-16     	; 0x1516 <nwkRouteFrameSent+0x56>
    1526:	10 c0       	rjmp	.+32     	; 0x1548 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
    1528:	9c 91       	ld	r25, X
    152a:	89 2f       	mov	r24, r25
    152c:	82 95       	swap	r24
    152e:	8f 70       	andi	r24, 0x0F	; 15
    1530:	81 5f       	subi	r24, 0xF1	; 241
    1532:	8f 70       	andi	r24, 0x0F	; 15
    1534:	28 2f       	mov	r18, r24
    1536:	22 95       	swap	r18
    1538:	20 7f       	andi	r18, 0xF0	; 240
    153a:	9f 70       	andi	r25, 0x0F	; 15
    153c:	92 2b       	or	r25, r18
    153e:	9c 93       	st	X, r25
    1540:	81 11       	cpse	r24, r1
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
    1544:	cd 01       	movw	r24, r26
    1546:	54 df       	rcall	.-344    	; 0x13f0 <NWK_RouteFreeEntry>
  }
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	08 95       	ret

0000154e <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1554:	87 85       	ldd	r24, Z+15	; 0x0f
    1556:	90 89       	ldd	r25, Z+16	; 0x10
    1558:	8f 3f       	cpi	r24, 0xFF	; 255
    155a:	2f ef       	ldi	r18, 0xFF	; 255
    155c:	92 07       	cpc	r25, r18
    155e:	29 f4       	brne	.+10     	; 0x156a <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	9f ef       	ldi	r25, 0xFF	; 255
    1564:	90 87       	std	Z+8, r25	; 0x08
    1566:	87 83       	std	Z+7, r24	; 0x07
    1568:	0e c0       	rjmp	.+28     	; 0x1586 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
    156a:	23 85       	ldd	r18, Z+11	; 0x0b
    156c:	22 ff       	sbrs	r18, 2
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
    1570:	90 87       	std	Z+8, r25	; 0x08
    1572:	87 83       	std	Z+7, r24	; 0x07
    1574:	08 c0       	rjmp	.+16     	; 0x1586 <nwkRoutePrepareTx+0x38>
    1576:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
    1578:	63 85       	ldd	r22, Z+11	; 0x0b
    157a:	63 fb       	bst	r22, 3
    157c:	66 27       	eor	r22, r22
    157e:	60 f9       	bld	r22, 0
    1580:	41 df       	rcall	.-382    	; 0x1404 <NWK_RouteNextHop>
    1582:	98 87       	std	Y+8, r25	; 0x08
    1584:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
    158c:	af 92       	push	r10
    158e:	bf 92       	push	r11
    1590:	cf 92       	push	r12
    1592:	df 92       	push	r13
    1594:	ef 92       	push	r14
    1596:	ff 92       	push	r15
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
    15a0:	1b 85       	ldd	r17, Y+11	; 0x0b
    15a2:	13 fb       	bst	r17, 3
    15a4:	11 27       	eor	r17, r17
    15a6:	10 f9       	bld	r17, 0
    15a8:	cf 84       	ldd	r12, Y+15	; 0x0f
    15aa:	d8 88       	ldd	r13, Y+16	; 0x10
    15ac:	61 2f       	mov	r22, r17
    15ae:	c6 01       	movw	r24, r12
    15b0:	29 df       	rcall	.-430    	; 0x1404 <NWK_RouteNextHop>
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	59 f0       	breq	.+22     	; 0x15cc <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
    15b6:	fe 01       	movw	r30, r28
    15b8:	e9 57       	subi	r30, 0x79	; 121
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	11 82       	std	Z+1, r1	; 0x01
    15be:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
    15c0:	31 97       	sbiw	r30, 0x01	; 1
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	80 83       	st	Z, r24
    nwkTxFrame(frame);
    15c6:	ce 01       	movw	r24, r28
    15c8:	78 d3       	rcall	.+1776   	; 0x1cba <nwkTxFrame>
    15ca:	22 c0       	rjmp	.+68     	; 0x1610 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    15cc:	ad 84       	ldd	r10, Y+13	; 0x0d
    15ce:	be 84       	ldd	r11, Y+14	; 0x0e
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
    15d0:	1c de       	rcall	.-968    	; 0x120a <nwkFrameAlloc>
    15d2:	7c 01       	movw	r14, r24
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	d1 f0       	breq	.+52     	; 0x160c <nwkRouteFrame+0x80>
    return;

  nwkFrameCommandInit(frame);
    15d8:	7d de       	rcall	.-774    	; 0x12d4 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
    15da:	f7 01       	movw	r30, r14
    15dc:	81 81       	ldd	r24, Z+1	; 0x01
    15de:	8a 5f       	subi	r24, 0xFA	; 250
    15e0:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
    15e2:	e9 57       	subi	r30, 0x79	; 121
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	11 82       	std	Z+1, r1	; 0x01
    15e8:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
    15ea:	f7 01       	movw	r30, r14
    15ec:	b0 8a       	std	Z+16, r11	; 0x10
    15ee:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
    15f0:	ef 57       	subi	r30, 0x7F	; 127
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	01 90       	ld	r0, Z+
    15f6:	f0 81       	ld	r31, Z
    15f8:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	80 83       	st	Z, r24
  command->srcAddr = src;
    15fe:	b2 82       	std	Z+2, r11	; 0x02
    1600:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
    1602:	d4 82       	std	Z+4, r13	; 0x04
    1604:	c3 82       	std	Z+3, r12	; 0x03
  command->multicast = multicast;
    1606:	15 83       	std	Z+5, r17	; 0x05

  nwkTxFrame(frame);
    1608:	c7 01       	movw	r24, r14
    160a:	57 d3       	rcall	.+1710   	; 0x1cba <nwkTxFrame>
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
    160c:	ce 01       	movw	r24, r28
    160e:	36 de       	rcall	.-916    	; 0x127c <nwkFrameFree>
  }
}
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	cf 90       	pop	r12
    161e:	bf 90       	pop	r11
    1620:	af 90       	pop	r10
    1622:	08 95       	ret

00001624 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
    1624:	dc 01       	movw	r26, r24
    1626:	17 96       	adiw	r26, 0x07	; 7
    1628:	ed 91       	ld	r30, X+
    162a:	fc 91       	ld	r31, X
    162c:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    162e:	19 96       	adiw	r26, 0x09	; 9
    1630:	8c 91       	ld	r24, X
    1632:	86 30       	cpi	r24, 0x06	; 6
    1634:	31 f4       	brne	.+12     	; 0x1642 <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
    1636:	65 81       	ldd	r22, Z+5	; 0x05
    1638:	83 81       	ldd	r24, Z+3	; 0x03
    163a:	94 81       	ldd	r25, Z+4	; 0x04
    163c:	ed de       	rcall	.-550    	; 0x1418 <nwkRouteRemove>

  return true;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
    1642:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
    1644:	08 95       	ret

00001646 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    1646:	dc 01       	movw	r26, r24
    1648:	19 96       	adiw	r26, 0x09	; 9
    164a:	2c 91       	ld	r18, X
    164c:	19 97       	sbiw	r26, 0x09	; 9
    164e:	22 23       	and	r18, r18
    1650:	71 f0       	breq	.+28     	; 0x166e <nwkRxServiceDataInd+0x28>
    1652:	17 96       	adiw	r26, 0x07	; 7
    1654:	ed 91       	ld	r30, X+
    1656:	fc 91       	ld	r31, X
    1658:	18 97       	sbiw	r26, 0x08	; 8
    165a:	20 81       	ld	r18, Z
    165c:	22 23       	and	r18, r18
    165e:	19 f0       	breq	.+6      	; 0x1666 <nwkRxServiceDataInd+0x20>
    1660:	21 30       	cpi	r18, 0x01	; 1
    1662:	19 f0       	breq	.+6      	; 0x166a <nwkRxServiceDataInd+0x24>
    1664:	06 c0       	rjmp	.+12     	; 0x1672 <nwkRxServiceDataInd+0x2c>
    1666:	bd c3       	rjmp	.+1914   	; 0x1de2 <nwkTxAckReceived>
    1668:	08 95       	ret
    166a:	dc cf       	rjmp	.-72     	; 0x1624 <nwkRouteErrorReceived>
    166c:	08 95       	ret
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	08 95       	ret
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	08 95       	ret

00001676 <nwkRxDuplicateRejectionTimerHandler>:
    1676:	bc 01       	movw	r22, r24
    1678:	e8 e8       	ldi	r30, 0x88	; 136
    167a:	fa e1       	ldi	r31, 0x1A	; 26
    167c:	2a eb       	ldi	r18, 0xBA	; 186
    167e:	3a e1       	ldi	r19, 0x1A	; 26
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	51 e0       	ldi	r21, 0x01	; 1
    1684:	90 81       	ld	r25, Z
    1686:	99 23       	and	r25, r25
    1688:	19 f0       	breq	.+6      	; 0x1690 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    168a:	91 50       	subi	r25, 0x01	; 1
    168c:	90 83       	st	Z, r25
    168e:	45 2f       	mov	r20, r21
    1690:	35 96       	adiw	r30, 0x05	; 5
    1692:	e2 17       	cp	r30, r18
    1694:	f3 07       	cpc	r31, r19
    1696:	b1 f7       	brne	.-20     	; 0x1684 <nwkRxDuplicateRejectionTimerHandler+0xe>
    1698:	44 23       	and	r20, r20
    169a:	11 f0       	breq	.+4      	; 0x16a0 <nwkRxDuplicateRejectionTimerHandler+0x2a>
    169c:	cb 01       	movw	r24, r22
    169e:	78 c6       	rjmp	.+3312   	; 0x2390 <SYS_TimerStart>
    16a0:	08 95       	ret

000016a2 <nwkRxInit>:
    16a2:	e8 e8       	ldi	r30, 0x88	; 136
    16a4:	fa e1       	ldi	r31, 0x1A	; 26
    16a6:	8a eb       	ldi	r24, 0xBA	; 186
    16a8:	9a e1       	ldi	r25, 0x1A	; 26
    16aa:	10 82       	st	Z, r1
    16ac:	35 96       	adiw	r30, 0x05	; 5
    16ae:	e8 17       	cp	r30, r24
    16b0:	f9 07       	cpc	r31, r25
    16b2:	d9 f7       	brne	.-10     	; 0x16aa <nwkRxInit+0x8>
    16b4:	e6 e7       	ldi	r30, 0x76	; 118
    16b6:	fa e1       	ldi	r31, 0x1A	; 26
    16b8:	84 e6       	ldi	r24, 0x64	; 100
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	a0 e0       	ldi	r26, 0x00	; 0
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	86 83       	std	Z+6, r24	; 0x06
    16c2:	97 83       	std	Z+7, r25	; 0x07
    16c4:	a0 87       	std	Z+8, r26	; 0x08
    16c6:	b1 87       	std	Z+9, r27	; 0x09
    16c8:	12 86       	std	Z+10, r1	; 0x0a
    16ca:	8b e3       	ldi	r24, 0x3B	; 59
    16cc:	9b e0       	ldi	r25, 0x0B	; 11
    16ce:	94 87       	std	Z+12, r25	; 0x0c
    16d0:	83 87       	std	Z+11, r24	; 0x0b
    16d2:	63 e2       	ldi	r22, 0x23	; 35
    16d4:	7b e0       	ldi	r23, 0x0B	; 11
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	91 cc       	rjmp	.-1758   	; 0xffc <NWK_OpenEndpoint>
    16da:	08 95       	ret

000016dc <PHY_DataInd>:
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	dc 01       	movw	r26, r24
    16e2:	ed 91       	ld	r30, X+
    16e4:	fc 91       	ld	r31, X
    16e6:	11 97       	sbiw	r26, 0x01	; 1
    16e8:	21 81       	ldd	r18, Z+1	; 0x01
    16ea:	28 38       	cpi	r18, 0x88	; 136
    16ec:	f9 f4       	brne	.+62     	; 0x172c <PHY_DataInd+0x50>
    16ee:	20 81       	ld	r18, Z
    16f0:	2f 7d       	andi	r18, 0xDF	; 223
    16f2:	21 34       	cpi	r18, 0x41	; 65
    16f4:	d9 f4       	brne	.+54     	; 0x172c <PHY_DataInd+0x50>
    16f6:	12 96       	adiw	r26, 0x02	; 2
    16f8:	2c 91       	ld	r18, X
    16fa:	20 31       	cpi	r18, 0x10	; 16
    16fc:	b8 f0       	brcs	.+46     	; 0x172c <PHY_DataInd+0x50>
    16fe:	ec 01       	movw	r28, r24
    1700:	84 dd       	rcall	.-1272   	; 0x120a <nwkFrameAlloc>
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	99 f0       	breq	.+38     	; 0x172c <PHY_DataInd+0x50>
    1706:	20 e2       	ldi	r18, 0x20	; 32
    1708:	fc 01       	movw	r30, r24
    170a:	20 83       	st	Z, r18
    170c:	2a 81       	ldd	r18, Y+2	; 0x02
    170e:	21 83       	std	Z+1, r18	; 0x01
    1710:	2b 81       	ldd	r18, Y+3	; 0x03
    1712:	ed 57       	subi	r30, 0x7D	; 125
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	20 83       	st	Z, r18
    1718:	2c 81       	ldd	r18, Y+4	; 0x04
    171a:	31 96       	adiw	r30, 0x01	; 1
    171c:	20 83       	st	Z, r18
    171e:	4a 81       	ldd	r20, Y+2	; 0x02
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	68 81       	ld	r22, Y
    1724:	79 81       	ldd	r23, Y+1	; 0x01
    1726:	02 96       	adiw	r24, 0x02	; 2
    1728:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <memcpy>
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	08 95       	ret

00001732 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1732:	2f 92       	push	r2
    1734:	3f 92       	push	r3
    1736:	4f 92       	push	r4
    1738:	5f 92       	push	r5
    173a:	6f 92       	push	r6
    173c:	7f 92       	push	r7
    173e:	8f 92       	push	r8
    1740:	9f 92       	push	r9
    1742:	af 92       	push	r10
    1744:	bf 92       	push	r11
    1746:	cf 92       	push	r12
    1748:	df 92       	push	r13
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	2e 97       	sbiw	r28, 0x0e	; 14
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    1766:	00 e0       	ldi	r16, 0x00	; 0
    1768:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    176a:	0f 2e       	mov	r0, r31
    176c:	f4 e2       	ldi	r31, 0x24	; 36
    176e:	df 2e       	mov	r13, r31
    1770:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1772:	0f 2e       	mov	r0, r31
    1774:	fc e7       	ldi	r31, 0x7C	; 124
    1776:	8f 2e       	mov	r8, r31
    1778:	fb e1       	ldi	r31, 0x1B	; 27
    177a:	9f 2e       	mov	r9, r31
    177c:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    177e:	68 94       	set
    1780:	cc 24       	eor	r12, r12
    1782:	c4 f8       	bld	r12, 4
    1784:	0f 2e       	mov	r0, r31
    1786:	f8 e8       	ldi	r31, 0x88	; 136
    1788:	4f 2e       	mov	r4, r31
    178a:	fa e1       	ldi	r31, 0x1A	; 26
    178c:	5f 2e       	mov	r5, r31
    178e:	f0 2d       	mov	r31, r0
    1790:	0f 2e       	mov	r0, r31
    1792:	f4 e8       	ldi	r31, 0x84	; 132
    1794:	6f 2e       	mov	r6, r31
    1796:	fa e1       	ldi	r31, 0x1A	; 26
    1798:	7f 2e       	mov	r7, r31
    179a:	f0 2d       	mov	r31, r0
    179c:	0f 2e       	mov	r0, r31
    179e:	f6 eb       	ldi	r31, 0xB6	; 182
    17a0:	ef 2e       	mov	r14, r31
    17a2:	fa e1       	ldi	r31, 0x1A	; 26
    17a4:	ff 2e       	mov	r15, r31
    17a6:	f0 2d       	mov	r31, r0

  if (nwkIb.addr == header->nwkSrcAddr)
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    17a8:	31 2c       	mov	r3, r1
    17aa:	21 2c       	mov	r2, r1
    17ac:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    17ae:	dd c1       	rjmp	.+954    	; 0x1b6a <nwkRxTaskHandler+0x438>
  {
    switch (frame->state)
    17b0:	d5 01       	movw	r26, r10
    17b2:	8c 91       	ld	r24, X
    17b4:	82 32       	cpi	r24, 0x22	; 34
    17b6:	09 f4       	brne	.+2      	; 0x17ba <nwkRxTaskHandler+0x88>
    17b8:	07 c1       	rjmp	.+526    	; 0x19c8 <nwkRxTaskHandler+0x296>
    17ba:	18 f4       	brcc	.+6      	; 0x17c2 <nwkRxTaskHandler+0x90>
    17bc:	80 32       	cpi	r24, 0x20	; 32
    17be:	41 f0       	breq	.+16     	; 0x17d0 <nwkRxTaskHandler+0x9e>
    17c0:	d4 c1       	rjmp	.+936    	; 0x1b6a <nwkRxTaskHandler+0x438>
    17c2:	83 32       	cpi	r24, 0x23	; 35
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <nwkRxTaskHandler+0x96>
    17c6:	cc c1       	rjmp	.+920    	; 0x1b60 <nwkRxTaskHandler+0x42e>
    17c8:	84 32       	cpi	r24, 0x24	; 36
    17ca:	09 f4       	brne	.+2      	; 0x17ce <nwkRxTaskHandler+0x9c>
    17cc:	cc c1       	rjmp	.+920    	; 0x1b66 <nwkRxTaskHandler+0x434>
    17ce:	cd c1       	rjmp	.+922    	; 0x1b6a <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    17d0:	f5 01       	movw	r30, r10
    17d2:	d0 82       	st	Z, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    17d4:	83 85       	ldd	r24, Z+11	; 0x0b
    17d6:	98 2f       	mov	r25, r24
    17d8:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    17da:	09 f0       	breq	.+2      	; 0x17de <nwkRxTaskHandler+0xac>
    17dc:	c6 c1       	rjmp	.+908    	; 0x1b6a <nwkRxTaskHandler+0x438>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    17de:	25 81       	ldd	r18, Z+5	; 0x05
    17e0:	36 81       	ldd	r19, Z+6	; 0x06
    17e2:	2f 3f       	cpi	r18, 0xFF	; 255
    17e4:	3f 4f       	sbci	r19, 0xFF	; 255
    17e6:	91 f4       	brne	.+36     	; 0x180c <nwkRxTaskHandler+0xda>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    17e8:	d5 01       	movw	r26, r10
    17ea:	1f 96       	adiw	r26, 0x0f	; 15
    17ec:	8d 91       	ld	r24, X+
    17ee:	9c 91       	ld	r25, X
    17f0:	50 97       	sbiw	r26, 0x10	; 16
    17f2:	f4 01       	movw	r30, r8
    17f4:	20 81       	ld	r18, Z
    17f6:	31 81       	ldd	r19, Z+1	; 0x01
    17f8:	28 17       	cp	r18, r24
    17fa:	39 07       	cpc	r19, r25
    17fc:	19 f0       	breq	.+6      	; 0x1804 <nwkRxTaskHandler+0xd2>
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	09 f0       	breq	.+2      	; 0x1804 <nwkRxTaskHandler+0xd2>
    1802:	b3 c1       	rjmp	.+870    	; 0x1b6a <nwkRxTaskHandler+0x438>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1804:	e2 e2       	ldi	r30, 0x22	; 34
    1806:	d5 01       	movw	r26, r10
    1808:	ec 93       	st	X, r30
    180a:	af c1       	rjmp	.+862    	; 0x1b6a <nwkRxTaskHandler+0x438>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    180c:	d5 01       	movw	r26, r10
    180e:	1f 96       	adiw	r26, 0x0f	; 15
    1810:	2d 91       	ld	r18, X+
    1812:	3c 91       	ld	r19, X
    1814:	50 97       	sbiw	r26, 0x10	; 16
    1816:	2f 3f       	cpi	r18, 0xFF	; 255
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	11 f4       	brne	.+4      	; 0x1820 <nwkRxTaskHandler+0xee>
    181c:	80 fd       	sbrc	r24, 0
    181e:	a5 c1       	rjmp	.+842    	; 0x1b6a <nwkRxTaskHandler+0x438>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    1820:	f4 01       	movw	r30, r8
    1822:	20 81       	ld	r18, Z
    1824:	31 81       	ldd	r19, Z+1	; 0x01
    1826:	d5 01       	movw	r26, r10
    1828:	1d 96       	adiw	r26, 0x0d	; 13
    182a:	8d 91       	ld	r24, X+
    182c:	9c 91       	ld	r25, X
    182e:	1e 97       	sbiw	r26, 0x0e	; 14
    1830:	28 17       	cp	r18, r24
    1832:	39 07       	cpc	r19, r25
    1834:	09 f4       	brne	.+2      	; 0x1838 <nwkRxTaskHandler+0x106>
    1836:	99 c1       	rjmp	.+818    	; 0x1b6a <nwkRxTaskHandler+0x438>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
    1838:	c5 01       	movw	r24, r10
    183a:	f3 dd       	rcall	.-1050   	; 0x1422 <nwkRouteFrameReceived>
    183c:	f3 01       	movw	r30, r6
    183e:	43 2d       	mov	r20, r3
    1840:	52 2d       	mov	r21, r2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
    1842:	63 2d       	mov	r22, r3
    1844:	72 2d       	mov	r23, r2
    1846:	5e 86       	std	Y+14, r5	; 0x0e
    1848:	4d 86       	std	Y+13, r4	; 0x0d

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    184a:	ad 85       	ldd	r26, Y+13	; 0x0d
    184c:	be 85       	ldd	r27, Y+14	; 0x0e
    184e:	8c 91       	ld	r24, X
    1850:	88 23       	and	r24, r24
    1852:	09 f4       	brne	.+2      	; 0x1856 <nwkRxTaskHandler+0x124>
    1854:	6c c0       	rjmp	.+216    	; 0x192e <nwkRxTaskHandler+0x1fc>
    1856:	d5 01       	movw	r26, r10
    1858:	1d 96       	adiw	r26, 0x0d	; 13
    185a:	2d 91       	ld	r18, X+
    185c:	3c 91       	ld	r19, X
    185e:	1e 97       	sbiw	r26, 0x0e	; 14
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	28 17       	cp	r18, r24
    1866:	39 07       	cpc	r19, r25
    1868:	09 f0       	breq	.+2      	; 0x186c <nwkRxTaskHandler+0x13a>
    186a:	62 c0       	rjmp	.+196    	; 0x1930 <nwkRxTaskHandler+0x1fe>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    186c:	f5 01       	movw	r30, r10
    186e:	94 85       	ldd	r25, Z+12	; 0x0c
    1870:	fa 01       	movw	r30, r20
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	ee 0f       	add	r30, r30
    1878:	ff 1f       	adc	r31, r31
    187a:	e4 0f       	add	r30, r20
    187c:	f5 1f       	adc	r31, r21
    187e:	ec 57       	subi	r30, 0x7C	; 124
    1880:	f5 4e       	sbci	r31, 0xE5	; 229
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	89 1b       	sub	r24, r25

      if (diff < 8)
    1886:	88 30       	cpi	r24, 0x08	; 8
    1888:	c8 f5       	brcc	.+114    	; 0x18fc <nwkRxTaskHandler+0x1ca>
      {
        if (entry->mask & (1 << diff))
    188a:	fa 01       	movw	r30, r20
    188c:	ee 0f       	add	r30, r30
    188e:	ff 1f       	adc	r31, r31
    1890:	ee 0f       	add	r30, r30
    1892:	ff 1f       	adc	r31, r31
    1894:	e4 0f       	add	r30, r20
    1896:	f5 1f       	adc	r31, r21
    1898:	ec 57       	subi	r30, 0x7C	; 124
    189a:	f5 4e       	sbci	r31, 0xE5	; 229
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	29 2f       	mov	r18, r25
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	08 2e       	mov	r0, r24
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <nwkRxTaskHandler+0x178>
    18a6:	35 95       	asr	r19
    18a8:	27 95       	ror	r18
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <nwkRxTaskHandler+0x174>
    18ae:	20 ff       	sbrs	r18, 0
    18b0:	12 c0       	rjmp	.+36     	; 0x18d6 <nwkRxTaskHandler+0x1a4>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
    18b2:	d4 01       	movw	r26, r8
    18b4:	2d 91       	ld	r18, X+
    18b6:	3c 91       	ld	r19, X
    18b8:	f5 01       	movw	r30, r10
    18ba:	87 81       	ldd	r24, Z+7	; 0x07
    18bc:	90 85       	ldd	r25, Z+8	; 0x08
    18be:	28 17       	cp	r18, r24
    18c0:	39 07       	cpc	r19, r25
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <nwkRxTaskHandler+0x194>
    18c4:	52 c1       	rjmp	.+676    	; 0x1b6a <nwkRxTaskHandler+0x438>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
    18c6:	63 85       	ldd	r22, Z+11	; 0x0b
    18c8:	63 fb       	bst	r22, 3
    18ca:	66 27       	eor	r22, r22
    18cc:	60 f9       	bld	r22, 0
    18ce:	87 85       	ldd	r24, Z+15	; 0x0f
    18d0:	90 89       	ldd	r25, Z+16	; 0x10
    18d2:	a2 dd       	rcall	.-1212   	; 0x1418 <nwkRouteRemove>
    18d4:	4a c1       	rjmp	.+660    	; 0x1b6a <nwkRxTaskHandler+0x438>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    18d6:	fa 01       	movw	r30, r20
    18d8:	ee 0f       	add	r30, r30
    18da:	ff 1f       	adc	r31, r31
    18dc:	ee 0f       	add	r30, r30
    18de:	ff 1f       	adc	r31, r31
    18e0:	e4 0f       	add	r30, r20
    18e2:	f5 1f       	adc	r31, r21
    18e4:	ec 57       	subi	r30, 0x7C	; 124
    18e6:	f5 4e       	sbci	r31, 0xE5	; 229
    18e8:	21 e0       	ldi	r18, 0x01	; 1
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <nwkRxTaskHandler+0x1c0>
    18ee:	22 0f       	add	r18, r18
    18f0:	33 1f       	adc	r19, r19
    18f2:	8a 95       	dec	r24
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <nwkRxTaskHandler+0x1bc>
    18f6:	92 2b       	or	r25, r18
    18f8:	93 83       	std	Z+3, r25	; 0x03
    18fa:	3e c1       	rjmp	.+636    	; 0x1b78 <nwkRxTaskHandler+0x446>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    18fc:	fa 01       	movw	r30, r20
    18fe:	ee 0f       	add	r30, r30
    1900:	ff 1f       	adc	r31, r31
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	e4 0f       	add	r30, r20
    1908:	f5 1f       	adc	r31, r21
    190a:	ec 57       	subi	r30, 0x7C	; 124
    190c:	f5 4e       	sbci	r31, 0xE5	; 229
    190e:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    1910:	23 81       	ldd	r18, Z+3	; 0x03
    1912:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
    1914:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
    1916:	a9 01       	movw	r20, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <nwkRxTaskHandler+0x1ec>
    191a:	44 0f       	add	r20, r20
    191c:	55 1f       	adc	r21, r21
    191e:	8a 95       	dec	r24
    1920:	e2 f7       	brpl	.-8      	; 0x191a <nwkRxTaskHandler+0x1e8>
    1922:	ca 01       	movw	r24, r20
    1924:	81 60       	ori	r24, 0x01	; 1
    1926:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    1928:	8f e1       	ldi	r24, 0x1F	; 31
    192a:	84 83       	std	Z+4, r24	; 0x04
    192c:	25 c1       	rjmp	.+586    	; 0x1b78 <nwkRxTaskHandler+0x446>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    192e:	bf 01       	movw	r22, r30
    1930:	4f 5f       	subi	r20, 0xFF	; 255
    1932:	5f 4f       	sbci	r21, 0xFF	; 255
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	9e 85       	ldd	r25, Y+14	; 0x0e
    1938:	05 96       	adiw	r24, 0x05	; 5
    193a:	9e 87       	std	Y+14, r25	; 0x0e
    193c:	8d 87       	std	Y+13, r24	; 0x0d
    193e:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1940:	ee 15       	cp	r30, r14
    1942:	ff 05       	cpc	r31, r15
    1944:	09 f0       	breq	.+2      	; 0x1948 <nwkRxTaskHandler+0x216>
    1946:	81 cf       	rjmp	.-254    	; 0x184a <nwkRxTaskHandler+0x118>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1948:	61 15       	cp	r22, r1
    194a:	71 05       	cpc	r23, r1
    194c:	09 f4       	brne	.+2      	; 0x1950 <nwkRxTaskHandler+0x21e>
    194e:	0d c1       	rjmp	.+538    	; 0x1b6a <nwkRxTaskHandler+0x438>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1950:	d5 01       	movw	r26, r10
    1952:	1d 96       	adiw	r26, 0x0d	; 13
    1954:	8d 91       	ld	r24, X+
    1956:	9c 91       	ld	r25, X
    1958:	1e 97       	sbiw	r26, 0x0e	; 14
    195a:	fb 01       	movw	r30, r22
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
    1960:	1c 96       	adiw	r26, 0x0c	; 12
    1962:	8c 91       	ld	r24, X
    1964:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
    1966:	21 e0       	ldi	r18, 0x01	; 1
    1968:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    196a:	8f e1       	ldi	r24, 0x1F	; 31
    196c:	84 83       	std	Z+4, r24	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    196e:	86 e7       	ldi	r24, 0x76	; 118
    1970:	9a e1       	ldi	r25, 0x1A	; 26
    1972:	0e d5       	rcall	.+2588   	; 0x2390 <SYS_TimerStart>
    1974:	01 c1       	rjmp	.+514    	; 0x1b78 <nwkRxTaskHandler+0x446>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1976:	d4 01       	movw	r26, r8
    1978:	2d 91       	ld	r18, X+
    197a:	3c 91       	ld	r19, X
    197c:	f5 01       	movw	r30, r10
    197e:	87 85       	ldd	r24, Z+15	; 0x0f
    1980:	90 89       	ldd	r25, Z+16	; 0x10
    1982:	28 17       	cp	r18, r24
    1984:	39 07       	cpc	r19, r25
    1986:	81 f0       	breq	.+32     	; 0x19a8 <nwkRxTaskHandler+0x276>
        0 == header->nwkFcf.linkLocal)
    1988:	43 85       	ldd	r20, Z+11	; 0x0b
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    198a:	42 fd       	sbrc	r20, 2
    198c:	0b c0       	rjmp	.+22     	; 0x19a4 <nwkRxTaskHandler+0x272>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    198e:	c5 01       	movw	r24, r10
    1990:	e3 d1       	rcall	.+966    	; 0x1d58 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1992:	d4 01       	movw	r26, r8
    1994:	2d 91       	ld	r18, X+
    1996:	3c 91       	ld	r19, X
    1998:	f5 01       	movw	r30, r10
    199a:	87 85       	ldd	r24, Z+15	; 0x0f
    199c:	90 89       	ldd	r25, Z+16	; 0x10
    199e:	28 17       	cp	r18, r24
    19a0:	39 07       	cpc	r19, r25
    19a2:	11 f0       	breq	.+4      	; 0x19a8 <nwkRxTaskHandler+0x276>
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	21 f4       	brne	.+8      	; 0x19b0 <nwkRxTaskHandler+0x27e>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    19a8:	e2 e2       	ldi	r30, 0x22	; 34
    19aa:	d5 01       	movw	r26, r10
    19ac:	ec 93       	st	X, r30
    19ae:	dd c0       	rjmp	.+442    	; 0x1b6a <nwkRxTaskHandler+0x438>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    19b0:	d5 01       	movw	r26, r10
    19b2:	17 96       	adiw	r26, 0x07	; 7
    19b4:	8d 91       	ld	r24, X+
    19b6:	9c 91       	ld	r25, X
    19b8:	18 97       	sbiw	r26, 0x08	; 8
    19ba:	28 17       	cp	r18, r24
    19bc:	39 07       	cpc	r19, r25
    19be:	09 f0       	breq	.+2      	; 0x19c2 <nwkRxTaskHandler+0x290>
    19c0:	d4 c0       	rjmp	.+424    	; 0x1b6a <nwkRxTaskHandler+0x438>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    19c2:	83 e2       	ldi	r24, 0x23	; 35
    19c4:	8c 93       	st	X, r24
    19c6:	d1 c0       	rjmp	.+418    	; 0x1b6a <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    19c8:	10 92 83 1a 	sts	0x1A83, r1	; 0x801a83 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    19cc:	f5 01       	movw	r30, r10
    19ce:	21 89       	ldd	r18, Z+17	; 0x11
    19d0:	22 95       	swap	r18
    19d2:	2f 70       	andi	r18, 0x0F	; 15
    19d4:	e2 2f       	mov	r30, r18
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	ee 0f       	add	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	ee 57       	subi	r30, 0x7E	; 126
    19de:	f4 4e       	sbci	r31, 0xE4	; 228
    19e0:	01 90       	ld	r0, Z+
    19e2:	f0 81       	ld	r31, Z
    19e4:	e0 2d       	mov	r30, r0
    19e6:	30 97       	sbiw	r30, 0x00	; 0
    19e8:	09 f4       	brne	.+2      	; 0x19ec <nwkRxTaskHandler+0x2ba>
    19ea:	63 c0       	rjmp	.+198    	; 0x1ab2 <nwkRxTaskHandler+0x380>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    19ec:	d5 01       	movw	r26, r10
    19ee:	1d 96       	adiw	r26, 0x0d	; 13
    19f0:	8d 91       	ld	r24, X+
    19f2:	9c 91       	ld	r25, X
    19f4:	1e 97       	sbiw	r26, 0x0e	; 14
    19f6:	9a 83       	std	Y+2, r25	; 0x02
    19f8:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    19fa:	1f 96       	adiw	r26, 0x0f	; 15
    19fc:	4d 91       	ld	r20, X+
    19fe:	5c 91       	ld	r21, X
    1a00:	50 97       	sbiw	r26, 0x10	; 16
    1a02:	5c 83       	std	Y+4, r21	; 0x04
    1a04:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1a06:	51 96       	adiw	r26, 0x11	; 17
    1a08:	3c 91       	ld	r19, X
    1a0a:	51 97       	sbiw	r26, 0x11	; 17
    1a0c:	3f 70       	andi	r19, 0x0F	; 15
    1a0e:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    1a10:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
    1a12:	af 57       	subi	r26, 0x7F	; 127
    1a14:	bf 4f       	sbci	r27, 0xFF	; 255
    1a16:	6d 91       	ld	r22, X+
    1a18:	7c 91       	ld	r23, X
    1a1a:	79 87       	std	Y+9, r23	; 0x09
    1a1c:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    1a1e:	95 01       	movw	r18, r10
    1a20:	2e 5f       	subi	r18, 0xFE	; 254
    1a22:	3f 4f       	sbci	r19, 0xFF	; 255
    1a24:	26 1b       	sub	r18, r22
    1a26:	37 0b       	sbc	r19, r23
    1a28:	d5 01       	movw	r26, r10
    1a2a:	11 96       	adiw	r26, 0x01	; 1
    1a2c:	3c 91       	ld	r19, X
    1a2e:	11 97       	sbiw	r26, 0x01	; 1
    1a30:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
    1a32:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
    1a34:	ad 57       	subi	r26, 0x7D	; 125
    1a36:	bf 4f       	sbci	r27, 0xFF	; 255
    1a38:	2c 91       	ld	r18, X
    1a3a:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
    1a3c:	11 96       	adiw	r26, 0x01	; 1
    1a3e:	2c 91       	ld	r18, X
    1a40:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    1a42:	d5 01       	movw	r26, r10
    1a44:	1b 96       	adiw	r26, 0x0b	; 11
    1a46:	2c 91       	ld	r18, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    1a48:	62 2f       	mov	r22, r18
    1a4a:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1a4c:	22 fd       	sbrc	r18, 2
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <nwkRxTaskHandler+0x322>
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <nwkRxTaskHandler+0x324>
    1a54:	30 e2       	ldi	r19, 0x20	; 32
    1a56:	63 2b       	or	r22, r19
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    1a58:	23 fd       	sbrc	r18, 3
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <nwkRxTaskHandler+0x32e>
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <nwkRxTaskHandler+0x330>
    1a60:	30 e4       	ldi	r19, 0x40	; 64
    1a62:	26 2f       	mov	r18, r22
    1a64:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1a66:	4f 3f       	cpi	r20, 0xFF	; 255
    1a68:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6a:	11 f0       	breq	.+4      	; 0x1a70 <nwkRxTaskHandler+0x33e>
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <nwkRxTaskHandler+0x340>
    1a70:	34 e0       	ldi	r19, 0x04	; 4
    1a72:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1a74:	d5 01       	movw	r26, r10
    1a76:	19 96       	adiw	r26, 0x09	; 9
    1a78:	4d 91       	ld	r20, X+
    1a7a:	5c 91       	ld	r21, X
    1a7c:	1a 97       	sbiw	r26, 0x0a	; 10
    1a7e:	84 17       	cp	r24, r20
    1a80:	95 07       	cpc	r25, r21
    1a82:	11 f0       	breq	.+4      	; 0x1a88 <nwkRxTaskHandler+0x356>
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <nwkRxTaskHandler+0x358>
    1a88:	98 e0       	ldi	r25, 0x08	; 8
    1a8a:	82 2f       	mov	r24, r18
    1a8c:	89 2b       	or	r24, r25
    1a8e:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1a90:	d5 01       	movw	r26, r10
    1a92:	15 96       	adiw	r26, 0x05	; 5
    1a94:	2d 91       	ld	r18, X+
    1a96:	3c 91       	ld	r19, X
    1a98:	16 97       	sbiw	r26, 0x06	; 6
    1a9a:	2f 3f       	cpi	r18, 0xFF	; 255
    1a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9e:	11 f0       	breq	.+4      	; 0x1aa4 <nwkRxTaskHandler+0x372>
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <nwkRxTaskHandler+0x374>
    1aa4:	9c 2d       	mov	r25, r12
    1aa6:	89 2b       	or	r24, r25
    1aa8:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    1aaa:	ce 01       	movw	r24, r28
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	19 95       	eicall
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <nwkRxTaskHandler+0x382>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1ab4:	f5 01       	movw	r30, r10
    1ab6:	93 85       	ldd	r25, Z+11	; 0x0b
    1ab8:	90 ff       	sbrs	r25, 0
    ack = false;
    1aba:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    1abc:	d5 01       	movw	r26, r10
    1abe:	17 96       	adiw	r26, 0x07	; 7
    1ac0:	2d 91       	ld	r18, X+
    1ac2:	3c 91       	ld	r19, X
    1ac4:	18 97       	sbiw	r26, 0x08	; 8
    1ac6:	2f 3f       	cpi	r18, 0xFF	; 255
    1ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aca:	69 f4       	brne	.+26     	; 0x1ae6 <nwkRxTaskHandler+0x3b4>
    1acc:	f4 01       	movw	r30, r8
    1ace:	40 81       	ld	r20, Z
    1ad0:	51 81       	ldd	r21, Z+1	; 0x01
    1ad2:	d5 01       	movw	r26, r10
    1ad4:	1f 96       	adiw	r26, 0x0f	; 15
    1ad6:	2d 91       	ld	r18, X+
    1ad8:	3c 91       	ld	r19, X
    1ada:	50 97       	sbiw	r26, 0x10	; 16
    1adc:	42 17       	cp	r20, r18
    1ade:	53 07       	cpc	r21, r19
    1ae0:	11 f4       	brne	.+4      	; 0x1ae6 <nwkRxTaskHandler+0x3b4>
      nwkIb.addr == frame->header.nwkDstAddr &&
    1ae2:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    1ae6:	f5 01       	movw	r30, r10
    1ae8:	25 81       	ldd	r18, Z+5	; 0x05
    1aea:	36 81       	ldd	r19, Z+6	; 0x06
    1aec:	2f 3f       	cpi	r18, 0xFF	; 255
    1aee:	3f 4f       	sbci	r19, 0xFF	; 255
    1af0:	a1 f1       	breq	.+104    	; 0x1b5a <nwkRxTaskHandler+0x428>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1af2:	d4 01       	movw	r26, r8
    1af4:	2d 91       	ld	r18, X+
    1af6:	3c 91       	ld	r19, X
    1af8:	2f 3f       	cpi	r18, 0xFF	; 255
    1afa:	3f 4f       	sbci	r19, 0xFF	; 255
    1afc:	71 f1       	breq	.+92     	; 0x1b5a <nwkRxTaskHandler+0x428>
    ack = false;

  if (ack)
    1afe:	88 23       	and	r24, r24
    1b00:	61 f1       	breq	.+88     	; 0x1b5a <nwkRxTaskHandler+0x428>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    1b02:	83 db       	rcall	.-2298   	; 0x120a <nwkFrameAlloc>
    1b04:	8c 01       	movw	r16, r24
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	41 f1       	breq	.+80     	; 0x1b5a <nwkRxTaskHandler+0x428>
    return;

  nwkFrameCommandInit(ack);
    1b0a:	e4 db       	rcall	.-2104   	; 0x12d4 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	81 81       	ldd	r24, Z+1	; 0x01
    1b10:	8d 5f       	subi	r24, 0xFD	; 253
    1b12:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    1b14:	e9 57       	subi	r30, 0x79	; 121
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	11 82       	std	Z+1, r1	; 0x01
    1b1a:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    1b1c:	d5 01       	movw	r26, r10
    1b1e:	1b 96       	adiw	r26, 0x0b	; 11
    1b20:	8c 91       	ld	r24, X
    1b22:	1b 97       	sbiw	r26, 0x0b	; 11
    1b24:	86 95       	lsr	r24
    1b26:	81 70       	andi	r24, 0x01	; 1
    1b28:	f8 01       	movw	r30, r16
    1b2a:	93 85       	ldd	r25, Z+11	; 0x0b
    1b2c:	80 fb       	bst	r24, 0
    1b2e:	91 f9       	bld	r25, 1
    1b30:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1b32:	1d 96       	adiw	r26, 0x0d	; 13
    1b34:	8d 91       	ld	r24, X+
    1b36:	9c 91       	ld	r25, X
    1b38:	1e 97       	sbiw	r26, 0x0e	; 14
    1b3a:	90 8b       	std	Z+16, r25	; 0x10
    1b3c:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    1b3e:	ef 57       	subi	r30, 0x7F	; 127
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	01 90       	ld	r0, Z+
    1b44:	f0 81       	ld	r31, Z
    1b46:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    1b48:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1b4a:	80 91 83 1a 	lds	r24, 0x1A83	; 0x801a83 <nwkRxAckControl>
    1b4e:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
    1b50:	1c 96       	adiw	r26, 0x0c	; 12
    1b52:	8c 91       	ld	r24, X
    1b54:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
    1b56:	c8 01       	movw	r24, r16
    1b58:	b0 d0       	rcall	.+352    	; 0x1cba <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1b5a:	d5 01       	movw	r26, r10
    1b5c:	dc 92       	st	X, r13
    1b5e:	05 c0       	rjmp	.+10     	; 0x1b6a <nwkRxTaskHandler+0x438>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    1b60:	c5 01       	movw	r24, r10
    1b62:	14 dd       	rcall	.-1496   	; 0x158c <nwkRouteFrame>
      } break;
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <nwkRxTaskHandler+0x438>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1b66:	c5 01       	movw	r24, r10
    1b68:	89 db       	rcall	.-2286   	; 0x127c <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1b6a:	c5 01       	movw	r24, r10
    1b6c:	91 db       	rcall	.-2270   	; 0x1290 <nwkFrameNext>
    1b6e:	5c 01       	movw	r10, r24
    1b70:	89 2b       	or	r24, r25
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <nwkRxTaskHandler+0x444>
    1b74:	1d ce       	rjmp	.-966    	; 0x17b0 <nwkRxTaskHandler+0x7e>
    1b76:	07 c0       	rjmp	.+14     	; 0x1b86 <nwkRxTaskHandler+0x454>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1b78:	f5 01       	movw	r30, r10
    1b7a:	87 81       	ldd	r24, Z+7	; 0x07
    1b7c:	90 85       	ldd	r25, Z+8	; 0x08
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <nwkRxTaskHandler+0x452>
    1b82:	07 cf       	rjmp	.-498    	; 0x1992 <nwkRxTaskHandler+0x260>
    1b84:	f8 ce       	rjmp	.-528    	; 0x1976 <nwkRxTaskHandler+0x244>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    1b86:	2e 96       	adiw	r28, 0x0e	; 14
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	1f 91       	pop	r17
    1b98:	0f 91       	pop	r16
    1b9a:	ff 90       	pop	r15
    1b9c:	ef 90       	pop	r14
    1b9e:	df 90       	pop	r13
    1ba0:	cf 90       	pop	r12
    1ba2:	bf 90       	pop	r11
    1ba4:	af 90       	pop	r10
    1ba6:	9f 90       	pop	r9
    1ba8:	8f 90       	pop	r8
    1baa:	7f 90       	pop	r7
    1bac:	6f 90       	pop	r6
    1bae:	5f 90       	pop	r5
    1bb0:	4f 90       	pop	r4
    1bb2:	3f 90       	pop	r3
    1bb4:	2f 90       	pop	r2
    1bb6:	08 95       	ret

00001bb8 <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    1bb8:	ef 92       	push	r14
    1bba:	ff 92       	push	r15
    1bbc:	0f 93       	push	r16
    1bbe:	1f 93       	push	r17
    1bc0:	cf 93       	push	r28
    1bc2:	7c 01       	movw	r14, r24
    1bc4:	10 e0       	ldi	r17, 0x00	; 0
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	01 e0       	ldi	r16, 0x01	; 1
    1bcc:	c3 e1       	ldi	r28, 0x13	; 19
    1bce:	13 c0       	rjmp	.+38     	; 0x1bf6 <nwkTxDelayTimerHandler+0x3e>
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	20 81       	ld	r18, Z
    1bd4:	21 31       	cpi	r18, 0x11	; 17
    1bd6:	79 f4       	brne	.+30     	; 0x1bf6 <nwkTxDelayTimerHandler+0x3e>
    1bd8:	ec 57       	subi	r30, 0x7C	; 124
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	20 81       	ld	r18, Z
    1bde:	31 81       	ldd	r19, Z+1	; 0x01
    1be0:	21 50       	subi	r18, 0x01	; 1
    1be2:	31 09       	sbc	r19, r1
    1be4:	31 83       	std	Z+1, r19	; 0x01
    1be6:	20 83       	st	Z, r18
    1be8:	23 2b       	or	r18, r19
    1bea:	21 f4       	brne	.+8      	; 0x1bf4 <nwkTxDelayTimerHandler+0x3c>
    1bec:	fc 01       	movw	r30, r24
    1bee:	c0 83       	st	Z, r28
    1bf0:	10 2f       	mov	r17, r16
    1bf2:	01 c0       	rjmp	.+2      	; 0x1bf6 <nwkTxDelayTimerHandler+0x3e>
    1bf4:	10 2f       	mov	r17, r16
    1bf6:	4c db       	rcall	.-2408   	; 0x1290 <nwkFrameNext>
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	51 f7       	brne	.-44     	; 0x1bd0 <nwkTxDelayTimerHandler+0x18>
    1bfc:	11 23       	and	r17, r17
    1bfe:	11 f0       	breq	.+4      	; 0x1c04 <nwkTxDelayTimerHandler+0x4c>
    1c00:	c7 01       	movw	r24, r14
    1c02:	c6 d3       	rcall	.+1932   	; 0x2390 <SYS_TimerStart>
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	08 95       	ret

00001c10 <nwkTxAckWaitTimerHandler>:
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	7c 01       	movw	r14, r24
    1c1e:	10 e0       	ldi	r17, 0x00	; 0
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	01 e0       	ldi	r16, 0x01	; 1
    1c26:	d7 e1       	ldi	r29, 0x17	; 23
    1c28:	c0 e1       	ldi	r28, 0x10	; 16
    1c2a:	16 c0       	rjmp	.+44     	; 0x1c58 <nwkTxAckWaitTimerHandler+0x48>
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	20 81       	ld	r18, Z
    1c30:	26 31       	cpi	r18, 0x16	; 22
    1c32:	91 f4       	brne	.+36     	; 0x1c58 <nwkTxAckWaitTimerHandler+0x48>
    1c34:	ec 57       	subi	r30, 0x7C	; 124
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	20 81       	ld	r18, Z
    1c3a:	31 81       	ldd	r19, Z+1	; 0x01
    1c3c:	21 50       	subi	r18, 0x01	; 1
    1c3e:	31 09       	sbc	r19, r1
    1c40:	31 83       	std	Z+1, r19	; 0x01
    1c42:	20 83       	st	Z, r18
    1c44:	23 2b       	or	r18, r19
    1c46:	39 f4       	brne	.+14     	; 0x1c56 <nwkTxAckWaitTimerHandler+0x46>
    1c48:	fc 01       	movw	r30, r24
    1c4a:	d0 83       	st	Z, r29
    1c4c:	ed 57       	subi	r30, 0x7D	; 125
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	c0 83       	st	Z, r28
    1c52:	10 2f       	mov	r17, r16
    1c54:	01 c0       	rjmp	.+2      	; 0x1c58 <nwkTxAckWaitTimerHandler+0x48>
    1c56:	10 2f       	mov	r17, r16
    1c58:	1b db       	rcall	.-2506   	; 0x1290 <nwkFrameNext>
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	39 f7       	brne	.-50     	; 0x1c2c <nwkTxAckWaitTimerHandler+0x1c>
    1c5e:	11 23       	and	r17, r17
    1c60:	11 f0       	breq	.+4      	; 0x1c66 <nwkTxAckWaitTimerHandler+0x56>
    1c62:	c7 01       	movw	r24, r14
    1c64:	95 d3       	rcall	.+1834   	; 0x2390 <SYS_TimerStart>
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	ff 90       	pop	r15
    1c70:	ef 90       	pop	r14
    1c72:	08 95       	ret

00001c74 <nwkTxInit>:
    1c74:	10 92 d1 1a 	sts	0x1AD1, r1	; 0x801ad1 <nwkTxPhyActiveFrame+0x1>
    1c78:	10 92 d0 1a 	sts	0x1AD0, r1	; 0x801ad0 <nwkTxPhyActiveFrame>
    1c7c:	e3 ec       	ldi	r30, 0xC3	; 195
    1c7e:	fa e1       	ldi	r31, 0x1A	; 26
    1c80:	82 e3       	ldi	r24, 0x32	; 50
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e0       	ldi	r26, 0x00	; 0
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	86 83       	std	Z+6, r24	; 0x06
    1c8a:	97 83       	std	Z+7, r25	; 0x07
    1c8c:	a0 87       	std	Z+8, r26	; 0x08
    1c8e:	b1 87       	std	Z+9, r27	; 0x09
    1c90:	12 86       	std	Z+10, r1	; 0x0a
    1c92:	88 e0       	ldi	r24, 0x08	; 8
    1c94:	9e e0       	ldi	r25, 0x0E	; 14
    1c96:	94 87       	std	Z+12, r25	; 0x0c
    1c98:	83 87       	std	Z+11, r24	; 0x0b
    1c9a:	e6 eb       	ldi	r30, 0xB6	; 182
    1c9c:	fa e1       	ldi	r31, 0x1A	; 26
    1c9e:	8a e0       	ldi	r24, 0x0A	; 10
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e0       	ldi	r26, 0x00	; 0
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	86 83       	std	Z+6, r24	; 0x06
    1ca8:	97 83       	std	Z+7, r25	; 0x07
    1caa:	a0 87       	std	Z+8, r26	; 0x08
    1cac:	b1 87       	std	Z+9, r27	; 0x09
    1cae:	12 86       	std	Z+10, r1	; 0x0a
    1cb0:	8c ed       	ldi	r24, 0xDC	; 220
    1cb2:	9d e0       	ldi	r25, 0x0D	; 13
    1cb4:	94 87       	std	Z+12, r25	; 0x0c
    1cb6:	83 87       	std	Z+11, r24	; 0x0b
    1cb8:	08 95       	ret

00001cba <nwkTxFrame>:
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	ec 01       	movw	r28, r24
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	ea 57       	subi	r30, 0x7A	; 122
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	81 ff       	sbrs	r24, 1
    1cca:	03 c0       	rjmp	.+6      	; 0x1cd2 <nwkTxFrame+0x18>
    1ccc:	92 e1       	ldi	r25, 0x12	; 18
    1cce:	98 83       	st	Y, r25
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <nwkTxFrame+0x1c>
    1cd2:	92 e1       	ldi	r25, 0x12	; 18
    1cd4:	98 83       	st	Y, r25
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ed 57       	subi	r30, 0x7D	; 125
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	10 82       	st	Z, r1
    1cde:	80 ff       	sbrs	r24, 0
    1ce0:	05 c0       	rjmp	.+10     	; 0x1cec <nwkTxFrame+0x32>
    1ce2:	2f ef       	ldi	r18, 0xFF	; 255
    1ce4:	3f ef       	ldi	r19, 0xFF	; 255
    1ce6:	3e 83       	std	Y+6, r19	; 0x06
    1ce8:	2d 83       	std	Y+5, r18	; 0x05
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <nwkTxFrame+0x3e>
    1cec:	20 91 7e 1b 	lds	r18, 0x1B7E	; 0x801b7e <nwkIb+0x2>
    1cf0:	30 91 7f 1b 	lds	r19, 0x1B7F	; 0x801b7f <nwkIb+0x3>
    1cf4:	3e 83       	std	Y+6, r19	; 0x06
    1cf6:	2d 83       	std	Y+5, r18	; 0x05
    1cf8:	85 70       	andi	r24, 0x05	; 5
    1cfa:	19 f4       	brne	.+6      	; 0x1d02 <nwkTxFrame+0x48>
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	27 dc       	rcall	.-1970   	; 0x154e <nwkRoutePrepareTx>
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <nwkTxFrame+0x50>
    1d02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d04:	98 89       	ldd	r25, Y+16	; 0x10
    1d06:	98 87       	std	Y+8, r25	; 0x08
    1d08:	8f 83       	std	Y+7, r24	; 0x07
    1d0a:	ec e7       	ldi	r30, 0x7C	; 124
    1d0c:	fb e1       	ldi	r31, 0x1B	; 27
    1d0e:	80 81       	ld	r24, Z
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	9a 87       	std	Y+10, r25	; 0x0a
    1d14:	89 87       	std	Y+9, r24	; 0x09
    1d16:	85 81       	ldd	r24, Z+5	; 0x05
    1d18:	8f 5f       	subi	r24, 0xFF	; 255
    1d1a:	85 83       	std	Z+5, r24	; 0x05
    1d1c:	8c 83       	std	Y+4, r24	; 0x04
    1d1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d20:	98 85       	ldd	r25, Y+8	; 0x08
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	71 f4       	brne	.+28     	; 0x1d42 <nwkTxFrame+0x88>
    1d26:	81 e4       	ldi	r24, 0x41	; 65
    1d28:	98 e8       	ldi	r25, 0x88	; 136
    1d2a:	9b 83       	std	Y+3, r25	; 0x03
    1d2c:	8a 83       	std	Y+2, r24	; 0x02
    1d2e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <rand>
    1d32:	cc 57       	subi	r28, 0x7C	; 124
    1d34:	df 4f       	sbci	r29, 0xFF	; 255
    1d36:	87 70       	andi	r24, 0x07	; 7
    1d38:	99 27       	eor	r25, r25
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	99 83       	std	Y+1, r25	; 0x01
    1d3e:	88 83       	st	Y, r24
    1d40:	08 c0       	rjmp	.+16     	; 0x1d52 <nwkTxFrame+0x98>
    1d42:	81 e6       	ldi	r24, 0x61	; 97
    1d44:	98 e8       	ldi	r25, 0x88	; 136
    1d46:	9b 83       	std	Y+3, r25	; 0x03
    1d48:	8a 83       	std	Y+2, r24	; 0x02
    1d4a:	cc 57       	subi	r28, 0x7C	; 124
    1d4c:	df 4f       	sbci	r29, 0xFF	; 255
    1d4e:	19 82       	std	Y+1, r1	; 0x01
    1d50:	18 82       	st	Y, r1
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <nwkTxBroadcastFrame>:
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	8c 01       	movw	r16, r24
    1d62:	53 da       	rcall	.-2906   	; 0x120a <nwkFrameAlloc>
    1d64:	ec 01       	movw	r28, r24
    1d66:	89 2b       	or	r24, r25
    1d68:	b9 f1       	breq	.+110    	; 0x1dd8 <nwkTxBroadcastFrame+0x80>
    1d6a:	82 e1       	ldi	r24, 0x12	; 18
    1d6c:	88 83       	st	Y, r24
    1d6e:	f8 01       	movw	r30, r16
    1d70:	81 81       	ldd	r24, Z+1	; 0x01
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	fe 01       	movw	r30, r28
    1d76:	ed 57       	subi	r30, 0x7D	; 125
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	10 82       	st	Z, r1
    1d7c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <rand>
    1d80:	fe 01       	movw	r30, r28
    1d82:	ec 57       	subi	r30, 0x7C	; 124
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	87 70       	andi	r24, 0x07	; 7
    1d88:	99 27       	eor	r25, r25
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	80 83       	st	Z, r24
    1d90:	33 96       	adiw	r30, 0x03	; 3
    1d92:	11 82       	std	Z+1, r1	; 0x01
    1d94:	10 82       	st	Z, r1
    1d96:	f8 01       	movw	r30, r16
    1d98:	41 81       	ldd	r20, Z+1	; 0x01
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	b8 01       	movw	r22, r16
    1d9e:	6e 5f       	subi	r22, 0xFE	; 254
    1da0:	7f 4f       	sbci	r23, 0xFF	; 255
    1da2:	ce 01       	movw	r24, r28
    1da4:	02 96       	adiw	r24, 0x02	; 2
    1da6:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <memcpy>
    1daa:	81 e4       	ldi	r24, 0x41	; 65
    1dac:	98 e8       	ldi	r25, 0x88	; 136
    1dae:	9b 83       	std	Y+3, r25	; 0x03
    1db0:	8a 83       	std	Y+2, r24	; 0x02
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	9f ef       	ldi	r25, 0xFF	; 255
    1db6:	98 87       	std	Y+8, r25	; 0x08
    1db8:	8f 83       	std	Y+7, r24	; 0x07
    1dba:	f8 01       	movw	r30, r16
    1dbc:	85 81       	ldd	r24, Z+5	; 0x05
    1dbe:	96 81       	ldd	r25, Z+6	; 0x06
    1dc0:	9e 83       	std	Y+6, r25	; 0x06
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
    1dc4:	ec e7       	ldi	r30, 0x7C	; 124
    1dc6:	fb e1       	ldi	r31, 0x1B	; 27
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	9a 87       	std	Y+10, r25	; 0x0a
    1dce:	89 87       	std	Y+9, r24	; 0x09
    1dd0:	85 81       	ldd	r24, Z+5	; 0x05
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	85 83       	std	Z+5, r24	; 0x05
    1dd6:	8c 83       	std	Y+4, r24	; 0x04
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
    1de0:	08 95       	ret

00001de2 <nwkTxAckReceived>:
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	fc 01       	movw	r30, r24
    1de8:	c7 81       	ldd	r28, Z+7	; 0x07
    1dea:	d0 85       	ldd	r29, Z+8	; 0x08
    1dec:	81 85       	ldd	r24, Z+9	; 0x09
    1dee:	83 30       	cpi	r24, 0x03	; 3
    1df0:	c1 f4       	brne	.+48     	; 0x1e22 <nwkTxAckReceived+0x40>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	10 c0       	rjmp	.+32     	; 0x1e18 <nwkTxAckReceived+0x36>
    1df8:	fc 01       	movw	r30, r24
    1dfa:	20 81       	ld	r18, Z
    1dfc:	26 31       	cpi	r18, 0x16	; 22
    1dfe:	61 f4       	brne	.+24     	; 0x1e18 <nwkTxAckReceived+0x36>
    1e00:	34 85       	ldd	r19, Z+12	; 0x0c
    1e02:	29 81       	ldd	r18, Y+1	; 0x01
    1e04:	32 13       	cpse	r19, r18
    1e06:	08 c0       	rjmp	.+16     	; 0x1e18 <nwkTxAckReceived+0x36>
    1e08:	27 e1       	ldi	r18, 0x17	; 23
    1e0a:	20 83       	st	Z, r18
    1e0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e0e:	ea 57       	subi	r30, 0x7A	; 122
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	20 83       	st	Z, r18
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	06 c0       	rjmp	.+12     	; 0x1e24 <nwkTxAckReceived+0x42>
    1e18:	3b da       	rcall	.-2954   	; 0x1290 <nwkFrameNext>
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <nwkTxAckReceived+0x16>
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <nwkTxAckReceived+0x42>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1e2a:	e0 91 d0 1a 	lds	r30, 0x1AD0	; 0x801ad0 <nwkTxPhyActiveFrame>
    1e2e:	f0 91 d1 1a 	lds	r31, 0x1AD1	; 0x801ad1 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	21 f0       	breq	.+8      	; 0x1e3e <PHY_DataConf+0x14>
    1e36:	48 f0       	brcs	.+18     	; 0x1e4a <PHY_DataConf+0x20>
    1e38:	82 30       	cpi	r24, 0x02	; 2
    1e3a:	19 f0       	breq	.+6      	; 0x1e42 <PHY_DataConf+0x18>
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1e3e:	80 e2       	ldi	r24, 0x20	; 32
    1e40:	05 c0       	rjmp	.+10     	; 0x1e4c <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    1e42:	81 e2       	ldi	r24, 0x21	; 33
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	01 c0       	rjmp	.+2      	; 0x1e4c <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1e4a:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1e4c:	df 01       	movw	r26, r30
    1e4e:	ad 57       	subi	r26, 0x7D	; 125
    1e50:	bf 4f       	sbci	r27, 0xFF	; 255
    1e52:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1e54:	85 e1       	ldi	r24, 0x15	; 21
    1e56:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1e58:	10 92 d1 1a 	sts	0x1AD1, r1	; 0x801ad1 <nwkTxPhyActiveFrame+0x1>
    1e5c:	10 92 d0 1a 	sts	0x1AD0, r1	; 0x801ad0 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    1e60:	ec e7       	ldi	r30, 0x7C	; 124
    1e62:	fb e1       	ldi	r31, 0x1B	; 27
    1e64:	86 a1       	ldd	r24, Z+38	; 0x26
    1e66:	97 a1       	ldd	r25, Z+39	; 0x27
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	97 a3       	std	Z+39, r25	; 0x27
    1e6c:	86 a3       	std	Z+38, r24	; 0x26
    1e6e:	08 95       	ret

00001e70 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1e70:	9f 92       	push	r9
    1e72:	af 92       	push	r10
    1e74:	bf 92       	push	r11
    1e76:	cf 92       	push	r12
    1e78:	df 92       	push	r13
    1e7a:	ef 92       	push	r14
    1e7c:	ff 92       	push	r15
    1e7e:	0f 93       	push	r16
    1e80:	1f 93       	push	r17
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    1e86:	c0 e0       	ldi	r28, 0x00	; 0
    1e88:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1e8a:	0f 2e       	mov	r0, r31
    1e8c:	f4 e1       	ldi	r31, 0x14	; 20
    1e8e:	af 2e       	mov	r10, r31
    1e90:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    1e92:	0c e7       	ldi	r16, 0x7C	; 124
    1e94:	1b e1       	ldi	r17, 0x1B	; 27
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1e96:	0f 2e       	mov	r0, r31
    1e98:	f7 e1       	ldi	r31, 0x17	; 23
    1e9a:	df 2e       	mov	r13, r31
    1e9c:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1e9e:	0f 2e       	mov	r0, r31
    1ea0:	f6 e1       	ldi	r31, 0x16	; 22
    1ea2:	9f 2e       	mov	r9, r31
    1ea4:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1ea6:	0f 2e       	mov	r0, r31
    1ea8:	f9 e2       	ldi	r31, 0x29	; 41
    1eaa:	ef 2e       	mov	r14, r31
    1eac:	f1 2c       	mov	r15, r1
    1eae:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1eb0:	0f 2e       	mov	r0, r31
    1eb2:	f3 e1       	ldi	r31, 0x13	; 19
    1eb4:	cf 2e       	mov	r12, r31
    1eb6:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1eb8:	0f 2e       	mov	r0, r31
    1eba:	f1 e1       	ldi	r31, 0x11	; 17
    1ebc:	bf 2e       	mov	r11, r31
    1ebe:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1ec0:	60 c0       	rjmp	.+192    	; 0x1f82 <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    1ec2:	88 81       	ld	r24, Y
    1ec4:	83 31       	cpi	r24, 0x13	; 19
    1ec6:	c1 f0       	breq	.+48     	; 0x1ef8 <nwkTxTaskHandler+0x88>
    1ec8:	18 f4       	brcc	.+6      	; 0x1ed0 <nwkTxTaskHandler+0x60>
    1eca:	82 31       	cpi	r24, 0x12	; 18
    1ecc:	39 f0       	breq	.+14     	; 0x1edc <nwkTxTaskHandler+0x6c>
    1ece:	59 c0       	rjmp	.+178    	; 0x1f82 <nwkTxTaskHandler+0x112>
    1ed0:	85 31       	cpi	r24, 0x15	; 21
    1ed2:	49 f1       	breq	.+82     	; 0x1f26 <nwkTxTaskHandler+0xb6>
    1ed4:	87 31       	cpi	r24, 0x17	; 23
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <nwkTxTaskHandler+0x6a>
    1ed8:	45 c0       	rjmp	.+138    	; 0x1f64 <nwkTxTaskHandler+0xf4>
    1eda:	53 c0       	rjmp	.+166    	; 0x1f82 <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    1edc:	fe 01       	movw	r30, r28
    1ede:	ec 57       	subi	r30, 0x7C	; 124
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	89 2b       	or	r24, r25
    1ee8:	29 f0       	breq	.+10     	; 0x1ef4 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1eea:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    1eec:	86 eb       	ldi	r24, 0xB6	; 182
    1eee:	9a e1       	ldi	r25, 0x1A	; 26
    1ef0:	4f d2       	rcall	.+1182   	; 0x2390 <SYS_TimerStart>
    1ef2:	47 c0       	rjmp	.+142    	; 0x1f82 <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1ef4:	c8 82       	st	Y, r12
    1ef6:	45 c0       	rjmp	.+138    	; 0x1f82 <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    1ef8:	80 91 d0 1a 	lds	r24, 0x1AD0	; 0x801ad0 <nwkTxPhyActiveFrame>
    1efc:	90 91 d1 1a 	lds	r25, 0x1AD1	; 0x801ad1 <nwkTxPhyActiveFrame+0x1>
    1f00:	89 2b       	or	r24, r25
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <nwkTxTaskHandler+0x96>
    1f04:	3e c0       	rjmp	.+124    	; 0x1f82 <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    1f06:	d0 93 d1 1a 	sts	0x1AD1, r29	; 0x801ad1 <nwkTxPhyActiveFrame+0x1>
    1f0a:	c0 93 d0 1a 	sts	0x1AD0, r28	; 0x801ad0 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1f0e:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    1f10:	69 81       	ldd	r22, Y+1	; 0x01
    1f12:	ce 01       	movw	r24, r28
    1f14:	02 96       	adiw	r24, 0x02	; 2
    1f16:	cb d0       	rcall	.+406    	; 0x20ae <PHY_DataReq>
          nwkIb.lock++;
    1f18:	f8 01       	movw	r30, r16
    1f1a:	86 a1       	ldd	r24, Z+38	; 0x26
    1f1c:	97 a1       	ldd	r25, Z+39	; 0x27
    1f1e:	01 96       	adiw	r24, 0x01	; 1
    1f20:	97 a3       	std	Z+39, r25	; 0x27
    1f22:	86 a3       	std	Z+38, r24	; 0x26
    1f24:	2e c0       	rjmp	.+92     	; 0x1f82 <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    1f26:	fe 01       	movw	r30, r28
    1f28:	ed 57       	subi	r30, 0x7D	; 125
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	81 11       	cpse	r24, r1
    1f30:	17 c0       	rjmp	.+46     	; 0x1f60 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    1f32:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f34:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f36:	f8 01       	movw	r30, r16
    1f38:	80 81       	ld	r24, Z
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
    1f3c:	28 17       	cp	r18, r24
    1f3e:	39 07       	cpc	r19, r25
    1f40:	69 f4       	brne	.+26     	; 0x1f5c <nwkTxTaskHandler+0xec>
    1f42:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f44:	80 ff       	sbrs	r24, 0
    1f46:	0a c0       	rjmp	.+20     	; 0x1f5c <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1f48:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ec 57       	subi	r30, 0x7C	; 124
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	f1 82       	std	Z+1, r15	; 0x01
    1f52:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1f54:	83 ec       	ldi	r24, 0xC3	; 195
    1f56:	9a e1       	ldi	r25, 0x1A	; 26
    1f58:	1b d2       	rcall	.+1078   	; 0x2390 <SYS_TimerStart>
    1f5a:	13 c0       	rjmp	.+38     	; 0x1f82 <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1f5c:	d8 82       	st	Y, r13
    1f5e:	11 c0       	rjmp	.+34     	; 0x1f82 <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1f60:	d8 82       	st	Y, r13
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <nwkTxTaskHandler+0x112>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    1f64:	ce 01       	movw	r24, r28
    1f66:	ac da       	rcall	.-2728   	; 0x14c0 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e9 57       	subi	r30, 0x79	; 121
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	01 90       	ld	r0, Z+
    1f70:	f0 81       	ld	r31, Z
    1f72:	e0 2d       	mov	r30, r0
    1f74:	30 97       	sbiw	r30, 0x00	; 0
    1f76:	19 f4       	brne	.+6      	; 0x1f7e <nwkTxTaskHandler+0x10e>
          nwkFrameFree(frame);
    1f78:	ce 01       	movw	r24, r28
    1f7a:	80 d9       	rcall	.-3328   	; 0x127c <nwkFrameFree>
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <nwkTxTaskHandler+0x112>
        else
          frame->tx.confirm(frame);
    1f7e:	ce 01       	movw	r24, r28
    1f80:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1f82:	ce 01       	movw	r24, r28
    1f84:	85 d9       	rcall	.-3318   	; 0x1290 <nwkFrameNext>
    1f86:	ec 01       	movw	r28, r24
    1f88:	89 2b       	or	r24, r25
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <nwkTxTaskHandler+0x11e>
    1f8c:	9a cf       	rjmp	.-204    	; 0x1ec2 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	ff 90       	pop	r15
    1f98:	ef 90       	pop	r14
    1f9a:	df 90       	pop	r13
    1f9c:	cf 90       	pop	r12
    1f9e:	bf 90       	pop	r11
    1fa0:	af 90       	pop	r10
    1fa2:	9f 90       	pop	r9
    1fa4:	08 95       	ret

00001fa6 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    1fa6:	80 91 d2 1a 	lds	r24, 0x1AD2	; 0x801ad2 <phyBand>
    1faa:	98 2f       	mov	r25, r24
    1fac:	9f 70       	andi	r25, 0x0F	; 15
    1fae:	e4 e5       	ldi	r30, 0x54	; 84
    1fb0:	f1 e0       	ldi	r31, 0x01	; 1
    1fb2:	80 81       	ld	r24, Z
    1fb4:	80 7f       	andi	r24, 0xF0	; 240
    1fb6:	89 2b       	or	r24, r25
    1fb8:	80 83       	st	Z, r24
    1fba:	80 91 d2 1a 	lds	r24, 0x1AD2	; 0x801ad2 <phyBand>
    1fbe:	88 23       	and	r24, r24
    1fc0:	29 f0       	breq	.+10     	; 0x1fcc <phySetChannel+0x26>
    1fc2:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <phyChannel>
    1fc6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    1fca:	08 95       	ret
    1fcc:	80 91 d3 1a 	lds	r24, 0x1AD3	; 0x801ad3 <phyChannel>
    1fd0:	98 2f       	mov	r25, r24
    1fd2:	9f 71       	andi	r25, 0x1F	; 31
    1fd4:	e8 e4       	ldi	r30, 0x48	; 72
    1fd6:	f1 e0       	ldi	r31, 0x01	; 1
    1fd8:	80 81       	ld	r24, Z
    1fda:	80 7e       	andi	r24, 0xE0	; 224
    1fdc:	89 2b       	or	r24, r25
    1fde:	80 83       	st	Z, r24
    1fe0:	08 95       	ret

00001fe2 <phyTrxSetState>:
    1fe2:	93 e0       	ldi	r25, 0x03	; 3
    1fe4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1fe8:	e1 e4       	ldi	r30, 0x41	; 65
    1fea:	f1 e0       	ldi	r31, 0x01	; 1
    1fec:	90 81       	ld	r25, Z
    1fee:	9f 71       	andi	r25, 0x1F	; 31
    1ff0:	98 30       	cpi	r25, 0x08	; 8
    1ff2:	e1 f7       	brne	.-8      	; 0x1fec <phyTrxSetState+0xa>
    1ff4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1ff8:	e1 e4       	ldi	r30, 0x41	; 65
    1ffa:	f1 e0       	ldi	r31, 0x01	; 1
    1ffc:	90 81       	ld	r25, Z
    1ffe:	9f 71       	andi	r25, 0x1F	; 31
    2000:	98 13       	cpse	r25, r24
    2002:	fc cf       	rjmp	.-8      	; 0x1ffc <phyTrxSetState+0x1a>
    2004:	08 95       	ret

00002006 <phySetRxState>:
    2006:	88 e0       	ldi	r24, 0x08	; 8
    2008:	ec df       	rcall	.-40     	; 0x1fe2 <phyTrxSetState>
    200a:	8f ef       	ldi	r24, 0xFF	; 255
    200c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    2010:	80 91 d4 1a 	lds	r24, 0x1AD4	; 0x801ad4 <phyRxState>
    2014:	88 23       	and	r24, r24
    2016:	11 f0       	breq	.+4      	; 0x201c <phySetRxState+0x16>
    2018:	86 e1       	ldi	r24, 0x16	; 22
    201a:	e3 cf       	rjmp	.-58     	; 0x1fe2 <phyTrxSetState>
    201c:	08 95       	ret

0000201e <PHY_Init>:
    201e:	e9 e3       	ldi	r30, 0x39	; 57
    2020:	f1 e0       	ldi	r31, 0x01	; 1
    2022:	80 81       	ld	r24, Z
    2024:	81 60       	ori	r24, 0x01	; 1
    2026:	80 83       	st	Z, r24
    2028:	10 92 d4 1a 	sts	0x1AD4, r1	; 0x801ad4 <phyRxState>
    202c:	10 92 d2 1a 	sts	0x1AD2, r1	; 0x801ad2 <phyBand>
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	80 93 55 1b 	sts	0x1B55, r24	; 0x801b55 <phyState>
    2036:	88 e0       	ldi	r24, 0x08	; 8
    2038:	d4 df       	rcall	.-88     	; 0x1fe2 <phyTrxSetState>
    203a:	8b ee       	ldi	r24, 0xEB	; 235
    203c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>
    2040:	ec e4       	ldi	r30, 0x4C	; 76
    2042:	f1 e0       	ldi	r31, 0x01	; 1
    2044:	80 81       	ld	r24, Z
    2046:	80 68       	ori	r24, 0x80	; 128
    2048:	80 83       	st	Z, r24
    204a:	08 95       	ret

0000204c <PHY_SetRxState>:
    204c:	80 93 d4 1a 	sts	0x1AD4, r24	; 0x801ad4 <phyRxState>
    2050:	da cf       	rjmp	.-76     	; 0x2006 <phySetRxState>
    2052:	08 95       	ret

00002054 <PHY_SetChannel>:
    2054:	80 93 d3 1a 	sts	0x1AD3, r24	; 0x801ad3 <phyChannel>
    2058:	a6 cf       	rjmp	.-180    	; 0x1fa6 <phySetChannel>
    205a:	08 95       	ret

0000205c <PHY_SetPanId>:
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	1f 92       	push	r1
    2062:	1f 92       	push	r1
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9a 83       	std	Y+2, r25	; 0x02
    206a:	89 83       	std	Y+1, r24	; 0x01
    206c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x700162>
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x700163>
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	08 95       	ret

00002080 <PHY_SetShortAddr>:
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	1f 92       	push	r1
    2086:	1f 92       	push	r1
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x700160>
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x700161>
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	89 0f       	add	r24, r25
    20a0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x70016d>
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	08 95       	ret

000020ae <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	cf 93       	push	r28
    20b4:	8c 01       	movw	r16, r24
    20b6:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    20b8:	89 e1       	ldi	r24, 0x19	; 25
    20ba:	93 df       	rcall	.-218    	; 0x1fe2 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	8c 0f       	add	r24, r28
    20c6:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
  for (uint8_t i = 0; i < size; i++)
    20ca:	cc 23       	and	r28, r28
    20cc:	81 f0       	breq	.+32     	; 0x20ee <PHY_DataReq+0x40>
    20ce:	f8 01       	movw	r30, r16
    20d0:	c1 50       	subi	r28, 0x01	; 1
    20d2:	2c 2f       	mov	r18, r28
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	2f 5f       	subi	r18, 0xFF	; 255
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	c8 01       	movw	r24, r16
    20dc:	82 0f       	add	r24, r18
    20de:	93 1f       	adc	r25, r19
    20e0:	a1 e8       	ldi	r26, 0x81	; 129
    20e2:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    20e4:	21 91       	ld	r18, Z+
    20e6:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    20e8:	e8 17       	cp	r30, r24
    20ea:	f9 07       	cpc	r31, r25
    20ec:	d9 f7       	brne	.-10     	; 0x20e4 <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    20ee:	83 e0       	ldi	r24, 0x03	; 3
    20f0:	80 93 55 1b 	sts	0x1B55, r24	; 0x801b55 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
}
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	08 95       	ret

00002102 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    2102:	1f 93       	push	r17
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	00 d0       	rcall	.+0      	; 0x210a <PHY_TaskHandler+0x8>
    210a:	1f 92       	push	r1
    210c:	1f 92       	push	r1
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    2112:	80 91 55 1b 	lds	r24, 0x1B55	; 0x801b55 <phyState>
    2116:	82 30       	cpi	r24, 0x02	; 2
    2118:	09 f4       	brne	.+2      	; 0x211c <PHY_TaskHandler+0x1a>
    211a:	65 c0       	rjmp	.+202    	; 0x21e6 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    211c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    2120:	83 ff       	sbrs	r24, 3
    2122:	3e c0       	rjmp	.+124    	; 0x21a0 <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    2124:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2128:	6a 2f       	mov	r22, r26
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	ab 01       	movw	r20, r22
    212e:	4f 5f       	subi	r20, 0xFF	; 255
    2130:	5f 4f       	sbci	r21, 0xFF	; 255
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    2138:	fc 01       	movw	r30, r24
    213a:	e0 58       	subi	r30, 0x80	; 128
    213c:	fe 4f       	sbci	r31, 0xFE	; 254
    213e:	30 81       	ld	r19, Z
    2140:	fc 01       	movw	r30, r24
    2142:	eb 52       	subi	r30, 0x2B	; 43
    2144:	f5 4e       	sbci	r31, 0xE5	; 229
    2146:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    2148:	2f 5f       	subi	r18, 0xFF	; 255
    214a:	82 2f       	mov	r24, r18
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	84 17       	cp	r24, r20
    2150:	95 07       	cpc	r25, r21
    2152:	94 f3       	brlt	.-28     	; 0x2138 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    2154:	85 ed       	ldi	r24, 0xD5	; 213
    2156:	9a e1       	ldi	r25, 0x1A	; 26
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    215c:	a2 50       	subi	r26, 0x02	; 2
    215e:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    2160:	fb 01       	movw	r30, r22
    2162:	eb 52       	subi	r30, 0x2B	; 43
    2164:	f5 4e       	sbci	r31, 0xE5	; 229
    2166:	80 81       	ld	r24, Z
    2168:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    216a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    216e:	8a 55       	subi	r24, 0x5A	; 90
    2170:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    2172:	ce 01       	movw	r24, r28
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	b2 da       	rcall	.-2716   	; 0x16dc <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    2178:	e1 e4       	ldi	r30, 0x41	; 65
    217a:	f1 e0       	ldi	r31, 0x01	; 1
    217c:	80 81       	ld	r24, Z
    217e:	8f 71       	andi	r24, 0x1F	; 31
    2180:	86 31       	cpi	r24, 0x16	; 22
    2182:	e1 f7       	brne	.-8      	; 0x217c <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    2184:	ef e4       	ldi	r30, 0x4F	; 79
    2186:	f1 e0       	ldi	r31, 0x01	; 1
    2188:	80 81       	ld	r24, Z
    218a:	88 60       	ori	r24, 0x08	; 8
    218c:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    218e:	ec e4       	ldi	r30, 0x4C	; 76
    2190:	f1 e0       	ldi	r31, 0x01	; 1
    2192:	80 81       	ld	r24, Z
    2194:	8f 77       	andi	r24, 0x7F	; 127
    2196:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    2198:	80 81       	ld	r24, Z
    219a:	80 68       	ori	r24, 0x80	; 128
    219c:	80 83       	st	Z, r24
    219e:	23 c0       	rjmp	.+70     	; 0x21e6 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    21a0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    21a4:	86 ff       	sbrs	r24, 6
    21a6:	1f c0       	rjmp	.+62     	; 0x21e6 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    21a8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    21ac:	8f 71       	andi	r24, 0x1F	; 31
    21ae:	89 31       	cpi	r24, 0x19	; 25
    21b0:	a9 f4       	brne	.+42     	; 0x21dc <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    21b2:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    21b6:	12 95       	swap	r17
    21b8:	16 95       	lsr	r17
    21ba:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    21bc:	49 f0       	breq	.+18     	; 0x21d0 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    21be:	13 30       	cpi	r17, 0x03	; 3
    21c0:	21 f0       	breq	.+8      	; 0x21ca <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    21c2:	15 30       	cpi	r17, 0x05	; 5
    21c4:	21 f0       	breq	.+8      	; 0x21ce <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    21c6:	13 e0       	ldi	r17, 0x03	; 3
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    21ca:	11 e0       	ldi	r17, 0x01	; 1
    21cc:	01 c0       	rjmp	.+2      	; 0x21d0 <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    21ce:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    21d0:	1a df       	rcall	.-460    	; 0x2006 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	80 93 55 1b 	sts	0x1B55, r24	; 0x801b55 <phyState>

      PHY_DataConf(status);
    21d8:	81 2f       	mov	r24, r17
    21da:	27 de       	rcall	.-946    	; 0x1e2a <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    21dc:	ef e4       	ldi	r30, 0x4F	; 79
    21de:	f1 e0       	ldi	r31, 0x01	; 1
    21e0:	80 81       	ld	r24, Z
    21e2:	80 64       	ori	r24, 0x40	; 64
    21e4:	80 83       	st	Z, r24
  }
}
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	08 95       	ret

000021f8 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    21f8:	0e 94 08 06 	call	0xc10	; 0xc10 <HAL_Init>
  SYS_TimerInit();
    21fc:	6d d0       	rcall	.+218    	; 0x22d8 <SYS_TimerInit>
  PHY_Init();
    21fe:	0f df       	rcall	.-482    	; 0x201e <PHY_Init>
  NWK_Init();
    2200:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <NWK_Init>
    2204:	08 95       	ret

00002206 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    2206:	7d df       	rcall	.-262    	; 0x2102 <PHY_TaskHandler>
  NWK_TaskHandler();
    2208:	0e 94 07 08 	call	0x100e	; 0x100e <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    220c:	cc c0       	rjmp	.+408    	; 0x23a6 <SYS_TimerTaskHandler>
    220e:	08 95       	ret

00002210 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	ec 01       	movw	r28, r24
  if (timers)
    221a:	80 91 56 1b 	lds	r24, 0x1B56	; 0x801b56 <timers>
    221e:	90 91 57 1b 	lds	r25, 0x1B57	; 0x801b57 <timers+0x1>
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	09 f4       	brne	.+2      	; 0x2228 <placeTimer+0x18>
    2226:	45 c0       	rjmp	.+138    	; 0x22b2 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    2228:	4e 81       	ldd	r20, Y+6	; 0x06
    222a:	5f 81       	ldd	r21, Y+7	; 0x07
    222c:	68 85       	ldd	r22, Y+8	; 0x08
    222e:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    2230:	fc 01       	movw	r30, r24
    2232:	02 81       	ldd	r16, Z+2	; 0x02
    2234:	13 81       	ldd	r17, Z+3	; 0x03
    2236:	24 81       	ldd	r18, Z+4	; 0x04
    2238:	35 81       	ldd	r19, Z+5	; 0x05
    223a:	40 17       	cp	r20, r16
    223c:	51 07       	cpc	r21, r17
    223e:	62 07       	cpc	r22, r18
    2240:	73 07       	cpc	r23, r19
    2242:	60 f0       	brcs	.+24     	; 0x225c <placeTimer+0x4c>
    2244:	dc 01       	movw	r26, r24
    2246:	17 c0       	rjmp	.+46     	; 0x2276 <placeTimer+0x66>
    2248:	02 81       	ldd	r16, Z+2	; 0x02
    224a:	13 81       	ldd	r17, Z+3	; 0x03
    224c:	24 81       	ldd	r18, Z+4	; 0x04
    224e:	35 81       	ldd	r19, Z+5	; 0x05
    2250:	40 17       	cp	r20, r16
    2252:	51 07       	cpc	r21, r17
    2254:	62 07       	cpc	r22, r18
    2256:	73 07       	cpc	r23, r19
    2258:	68 f4       	brcc	.+26     	; 0x2274 <placeTimer+0x64>
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    225c:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    225e:	a0 e0       	ldi	r26, 0x00	; 0
    2260:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    2262:	04 1b       	sub	r16, r20
    2264:	15 0b       	sbc	r17, r21
    2266:	26 0b       	sbc	r18, r22
    2268:	37 0b       	sbc	r19, r23
    226a:	02 83       	std	Z+2, r16	; 0x02
    226c:	13 83       	std	Z+3, r17	; 0x03
    226e:	24 83       	std	Z+4, r18	; 0x04
    2270:	35 83       	std	Z+5, r19	; 0x05
         break;
    2272:	0a c0       	rjmp	.+20     	; 0x2288 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    2274:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    2276:	40 1b       	sub	r20, r16
    2278:	51 0b       	sbc	r21, r17
    227a:	62 0b       	sbc	r22, r18
    227c:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    227e:	ed 91       	ld	r30, X+
    2280:	fc 91       	ld	r31, X
    2282:	11 97       	sbiw	r26, 0x01	; 1
    2284:	30 97       	sbiw	r30, 0x00	; 0
    2286:	01 f7       	brne	.-64     	; 0x2248 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    2288:	4a 83       	std	Y+2, r20	; 0x02
    228a:	5b 83       	std	Y+3, r21	; 0x03
    228c:	6c 83       	std	Y+4, r22	; 0x04
    228e:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    2290:	10 97       	sbiw	r26, 0x00	; 0
    2292:	41 f0       	breq	.+16     	; 0x22a4 <placeTimer+0x94>
    {
      timer->next = prev->next;
    2294:	8d 91       	ld	r24, X+
    2296:	9c 91       	ld	r25, X
    2298:	11 97       	sbiw	r26, 0x01	; 1
    229a:	99 83       	std	Y+1, r25	; 0x01
    229c:	88 83       	st	Y, r24
      prev->next = timer;
    229e:	cd 93       	st	X+, r28
    22a0:	dc 93       	st	X, r29
    22a2:	15 c0       	rjmp	.+42     	; 0x22ce <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    22a4:	99 83       	std	Y+1, r25	; 0x01
    22a6:	88 83       	st	Y, r24
      timers = timer;
    22a8:	d0 93 57 1b 	sts	0x1B57, r29	; 0x801b57 <timers+0x1>
    22ac:	c0 93 56 1b 	sts	0x1B56, r28	; 0x801b56 <timers>
    22b0:	0e c0       	rjmp	.+28     	; 0x22ce <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    22b2:	19 82       	std	Y+1, r1	; 0x01
    22b4:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    22b6:	8e 81       	ldd	r24, Y+6	; 0x06
    22b8:	9f 81       	ldd	r25, Y+7	; 0x07
    22ba:	a8 85       	ldd	r26, Y+8	; 0x08
    22bc:	b9 85       	ldd	r27, Y+9	; 0x09
    22be:	8a 83       	std	Y+2, r24	; 0x02
    22c0:	9b 83       	std	Y+3, r25	; 0x03
    22c2:	ac 83       	std	Y+4, r26	; 0x04
    22c4:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    22c6:	d0 93 57 1b 	sts	0x1B57, r29	; 0x801b57 <timers+0x1>
    22ca:	c0 93 56 1b 	sts	0x1B56, r28	; 0x801b56 <timers>
  }
}
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	08 95       	ret

000022d8 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    22d8:	10 92 57 1b 	sts	0x1B57, r1	; 0x801b57 <timers+0x1>
    22dc:	10 92 56 1b 	sts	0x1B56, r1	; 0x801b56 <timers>
    22e0:	08 95       	ret

000022e2 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    22e6:	a0 91 56 1b 	lds	r26, 0x1B56	; 0x801b56 <timers>
    22ea:	b0 91 57 1b 	lds	r27, 0x1B57	; 0x801b57 <timers+0x1>
    22ee:	10 97       	sbiw	r26, 0x00	; 0
    22f0:	91 f1       	breq	.+100    	; 0x2356 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    22f2:	a8 17       	cp	r26, r24
    22f4:	b9 07       	cpc	r27, r25
    22f6:	51 f5       	brne	.+84     	; 0x234c <SYS_TimerStop+0x6a>
    22f8:	0a c0       	rjmp	.+20     	; 0x230e <SYS_TimerStop+0x2c>
    22fa:	8e 17       	cp	r24, r30
    22fc:	9f 07       	cpc	r25, r31
    22fe:	29 f5       	brne	.+74     	; 0x234a <SYS_TimerStop+0x68>
    {
      if (prev)
    2300:	10 97       	sbiw	r26, 0x00	; 0
    2302:	31 f0       	breq	.+12     	; 0x2310 <SYS_TimerStop+0x2e>
        prev->next = t->next;
    2304:	20 81       	ld	r18, Z
    2306:	31 81       	ldd	r19, Z+1	; 0x01
    2308:	2d 93       	st	X+, r18
    230a:	3c 93       	st	X, r19
    230c:	07 c0       	rjmp	.+14     	; 0x231c <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    230e:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    2310:	20 81       	ld	r18, Z
    2312:	31 81       	ldd	r19, Z+1	; 0x01
    2314:	30 93 57 1b 	sts	0x1B57, r19	; 0x801b57 <timers+0x1>
    2318:	20 93 56 1b 	sts	0x1B56, r18	; 0x801b56 <timers>

      if (t->next)
    231c:	01 90       	ld	r0, Z+
    231e:	f0 81       	ld	r31, Z
    2320:	e0 2d       	mov	r30, r0
    2322:	30 97       	sbiw	r30, 0x00	; 0
    2324:	c1 f0       	breq	.+48     	; 0x2356 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    2326:	42 81       	ldd	r20, Z+2	; 0x02
    2328:	53 81       	ldd	r21, Z+3	; 0x03
    232a:	64 81       	ldd	r22, Z+4	; 0x04
    232c:	75 81       	ldd	r23, Z+5	; 0x05
    232e:	ec 01       	movw	r28, r24
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	ac 81       	ldd	r26, Y+4	; 0x04
    2336:	bd 81       	ldd	r27, Y+5	; 0x05
    2338:	84 0f       	add	r24, r20
    233a:	95 1f       	adc	r25, r21
    233c:	a6 1f       	adc	r26, r22
    233e:	b7 1f       	adc	r27, r23
    2340:	82 83       	std	Z+2, r24	; 0x02
    2342:	93 83       	std	Z+3, r25	; 0x03
    2344:	a4 83       	std	Z+4, r26	; 0x04
    2346:	b5 83       	std	Z+5, r27	; 0x05
    2348:	06 c0       	rjmp	.+12     	; 0x2356 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    234a:	df 01       	movw	r26, r30
    234c:	ed 91       	ld	r30, X+
    234e:	fc 91       	ld	r31, X
    2350:	11 97       	sbiw	r26, 0x01	; 1
    2352:	30 97       	sbiw	r30, 0x00	; 0
    2354:	91 f6       	brne	.-92     	; 0x22fa <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	08 95       	ret

0000235c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    235c:	e0 91 56 1b 	lds	r30, 0x1B56	; 0x801b56 <timers>
    2360:	f0 91 57 1b 	lds	r31, 0x1B57	; 0x801b57 <timers+0x1>
    2364:	30 97       	sbiw	r30, 0x00	; 0
    2366:	71 f0       	breq	.+28     	; 0x2384 <SYS_TimerStarted+0x28>
    if (t == timer)
    2368:	e8 17       	cp	r30, r24
    236a:	f9 07       	cpc	r31, r25
    236c:	21 f4       	brne	.+8      	; 0x2376 <SYS_TimerStarted+0x1a>
    236e:	0c c0       	rjmp	.+24     	; 0x2388 <SYS_TimerStarted+0x2c>
    2370:	8e 17       	cp	r24, r30
    2372:	9f 07       	cpc	r25, r31
    2374:	59 f0       	breq	.+22     	; 0x238c <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    2376:	01 90       	ld	r0, Z+
    2378:	f0 81       	ld	r31, Z
    237a:	e0 2d       	mov	r30, r0
    237c:	30 97       	sbiw	r30, 0x00	; 0
    237e:	c1 f7       	brne	.-16     	; 0x2370 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	08 95       	ret
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	08 95       	ret
    238c:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    238e:	08 95       	ret

00002390 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    2396:	e2 df       	rcall	.-60     	; 0x235c <SYS_TimerStarted>
    2398:	81 11       	cpse	r24, r1
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <SYS_TimerStart+0x10>
    placeTimer(timer);
    239c:	ce 01       	movw	r24, r28
    239e:	38 df       	rcall	.-400    	; 0x2210 <placeTimer>
}
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	08 95       	ret

000023a6 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    23a6:	cf 92       	push	r12
    23a8:	df 92       	push	r13
    23aa:	ef 92       	push	r14
    23ac:	ff 92       	push	r15
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    23b2:	80 91 7b 1b 	lds	r24, 0x1B7B	; 0x801b7b <halTimerIrqCount>
    23b6:	88 23       	and	r24, r24
    23b8:	09 f4       	brne	.+2      	; 0x23bc <SYS_TimerTaskHandler+0x16>
    23ba:	59 c0       	rjmp	.+178    	; 0x246e <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    23bc:	8f b7       	in	r24, 0x3f	; 63
    23be:	f8 94       	cli
    cnt = halTimerIrqCount;
    23c0:	c0 90 7b 1b 	lds	r12, 0x1B7B	; 0x801b7b <halTimerIrqCount>
    halTimerIrqCount = 0;
    23c4:	10 92 7b 1b 	sts	0x1B7B, r1	; 0x801b7b <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    23c8:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    23ca:	d1 2c       	mov	r13, r1
    23cc:	e1 2c       	mov	r14, r1
    23ce:	f1 2c       	mov	r15, r1
    23d0:	cc 0c       	add	r12, r12
    23d2:	dd 1c       	adc	r13, r13
    23d4:	ee 1c       	adc	r14, r14
    23d6:	ff 1c       	adc	r15, r15
    23d8:	d7 01       	movw	r26, r14
    23da:	c6 01       	movw	r24, r12
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	aa 1f       	adc	r26, r26
    23e2:	bb 1f       	adc	r27, r27
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	aa 1f       	adc	r26, r26
    23ea:	bb 1f       	adc	r27, r27
    23ec:	c8 0e       	add	r12, r24
    23ee:	d9 1e       	adc	r13, r25
    23f0:	ea 1e       	adc	r14, r26
    23f2:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    23f4:	c0 91 56 1b 	lds	r28, 0x1B56	; 0x801b56 <timers>
    23f8:	d0 91 57 1b 	lds	r29, 0x1B57	; 0x801b57 <timers+0x1>
    23fc:	20 97       	sbiw	r28, 0x00	; 0
    23fe:	b9 f1       	breq	.+110    	; 0x246e <SYS_TimerTaskHandler+0xc8>
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	ac 81       	ldd	r26, Y+4	; 0x04
    2406:	bd 81       	ldd	r27, Y+5	; 0x05
    2408:	c8 16       	cp	r12, r24
    240a:	d9 06       	cpc	r13, r25
    240c:	ea 06       	cpc	r14, r26
    240e:	fb 06       	cpc	r15, r27
    2410:	10 f1       	brcs	.+68     	; 0x2456 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    2412:	c8 1a       	sub	r12, r24
    2414:	d9 0a       	sbc	r13, r25
    2416:	ea 0a       	sbc	r14, r26
    2418:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    241a:	88 81       	ld	r24, Y
    241c:	99 81       	ldd	r25, Y+1	; 0x01
    241e:	90 93 57 1b 	sts	0x1B57, r25	; 0x801b57 <timers+0x1>
    2422:	80 93 56 1b 	sts	0x1B56, r24	; 0x801b56 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    2426:	8a 85       	ldd	r24, Y+10	; 0x0a
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	11 f4       	brne	.+4      	; 0x2430 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    242c:	ce 01       	movw	r24, r28
    242e:	f0 de       	rcall	.-544    	; 0x2210 <placeTimer>
    timer->handler(timer);
    2430:	eb 85       	ldd	r30, Y+11	; 0x0b
    2432:	fc 85       	ldd	r31, Y+12	; 0x0c
    2434:	ce 01       	movw	r24, r28
    2436:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    2438:	c0 91 56 1b 	lds	r28, 0x1B56	; 0x801b56 <timers>
    243c:	d0 91 57 1b 	lds	r29, 0x1B57	; 0x801b57 <timers+0x1>
    2440:	20 97       	sbiw	r28, 0x00	; 0
    2442:	a9 f0       	breq	.+42     	; 0x246e <SYS_TimerTaskHandler+0xc8>
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	9b 81       	ldd	r25, Y+3	; 0x03
    2448:	ac 81       	ldd	r26, Y+4	; 0x04
    244a:	bd 81       	ldd	r27, Y+5	; 0x05
    244c:	c8 16       	cp	r12, r24
    244e:	d9 06       	cpc	r13, r25
    2450:	ea 06       	cpc	r14, r26
    2452:	fb 06       	cpc	r15, r27
    2454:	f0 f6       	brcc	.-68     	; 0x2412 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	9b 81       	ldd	r25, Y+3	; 0x03
    245a:	ac 81       	ldd	r26, Y+4	; 0x04
    245c:	bd 81       	ldd	r27, Y+5	; 0x05
    245e:	8c 19       	sub	r24, r12
    2460:	9d 09       	sbc	r25, r13
    2462:	ae 09       	sbc	r26, r14
    2464:	bf 09       	sbc	r27, r15
    2466:	8a 83       	std	Y+2, r24	; 0x02
    2468:	9b 83       	std	Y+3, r25	; 0x03
    246a:	ac 83       	std	Y+4, r26	; 0x04
    246c:	bd 83       	std	Y+5, r27	; 0x05
}
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	ff 90       	pop	r15
    2474:	ef 90       	pop	r14
    2476:	df 90       	pop	r13
    2478:	cf 90       	pop	r12
    247a:	08 95       	ret

0000247c <ADC_Measure_Avg>:
	sbi(DDRE,3);	//output close
	OPENOFF;
	CLOSEOFF;
	calibration();
}
uint16_t ADC_Measure_Avg(){
    247c:	cf 92       	push	r12
    247e:	df 92       	push	r13
    2480:	ef 92       	push	r14
    2482:	ff 92       	push	r15
    2484:	cf 93       	push	r28
    2486:	c8 ec       	ldi	r28, 0xC8	; 200
	float m = 0;
    2488:	c1 2c       	mov	r12, r1
    248a:	d1 2c       	mov	r13, r1
    248c:	76 01       	movw	r14, r12
	for(uint8_t i=0; i < NumberOfMeasures; i++){
		m = m + ADC_getOffset(0b010000);
    248e:	80 e1       	ldi	r24, 0x10	; 16
    2490:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <ADC_getOffset>
    2494:	bc 01       	movw	r22, r24
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	20 d3       	rcall	.+1600   	; 0x2adc <__floatunsisf>
    249c:	9b 01       	movw	r18, r22
    249e:	ac 01       	movw	r20, r24
    24a0:	c7 01       	movw	r24, r14
    24a2:	b6 01       	movw	r22, r12
    24a4:	1e d2       	rcall	.+1084   	; 0x28e2 <__addsf3>
    24a6:	6b 01       	movw	r12, r22
    24a8:	7c 01       	movw	r14, r24
		HAL_TimerDelay(MeasureDelay);
    24aa:	80 e5       	ldi	r24, 0x50	; 80
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 31 06 	call	0xc62	; 0xc62 <HAL_TimerDelay>
    24b2:	c1 50       	subi	r28, 0x01	; 1
	CLOSEOFF;
	calibration();
}
uint16_t ADC_Measure_Avg(){
	float m = 0;
	for(uint8_t i=0; i < NumberOfMeasures; i++){
    24b4:	61 f7       	brne	.-40     	; 0x248e <ADC_Measure_Avg+0x12>
		m = m + ADC_getOffset(0b010000);
		HAL_TimerDelay(MeasureDelay);
	}
	return (uint16_t)(m/NumberOfMeasures);
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	48 e4       	ldi	r20, 0x48	; 72
    24bc:	53 e4       	ldi	r21, 0x43	; 67
    24be:	c7 01       	movw	r24, r14
    24c0:	b6 01       	movw	r22, r12
    24c2:	73 d2       	rcall	.+1254   	; 0x29aa <__divsf3>
    24c4:	df d2       	rcall	.+1470   	; 0x2a84 <__fixunssfsi>
}
    24c6:	cb 01       	movw	r24, r22
    24c8:	cf 91       	pop	r28
    24ca:	ff 90       	pop	r15
    24cc:	ef 90       	pop	r14
    24ce:	df 90       	pop	r13
    24d0:	cf 90       	pop	r12
    24d2:	08 95       	ret

000024d4 <DelayMs>:

void DelayMs(uint16_t time){
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	ec 01       	movw	r28, r24
	for(time; time > 0; time--){
    24da:	89 2b       	or	r24, r25
    24dc:	31 f0       	breq	.+12     	; 0x24ea <DelayMs+0x16>
		HAL_TimerDelay(1000);
    24de:	88 ee       	ldi	r24, 0xE8	; 232
    24e0:	93 e0       	ldi	r25, 0x03	; 3
    24e2:	0e 94 31 06 	call	0xc62	; 0xc62 <HAL_TimerDelay>
	}
	return (uint16_t)(m/NumberOfMeasures);
}

void DelayMs(uint16_t time){
	for(time; time > 0; time--){
    24e6:	21 97       	sbiw	r28, 0x01	; 1
    24e8:	d1 f7       	brne	.-12     	; 0x24de <DelayMs+0xa>
		HAL_TimerDelay(1000);
	}
}
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	08 95       	ret

000024f0 <setPosition>:
	CLOSEOFF;
	return;
}

void setPosition(uint8_t positionToSet)	//position - position in % 0=close
{
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
	if(positionToSet>100) return;
    24f4:	85 36       	cpi	r24, 0x65	; 101
    24f6:	08 f0       	brcs	.+2      	; 0x24fa <setPosition+0xa>
    24f8:	4f c0       	rjmp	.+158    	; 0x2598 <setPosition+0xa8>
    24fa:	d8 2f       	mov	r29, r24
	CalibrationCounter ++;
    24fc:	80 91 5c 1b 	lds	r24, 0x1B5C	; 0x801b5c <CalibrationCounter>
    2500:	8f 5f       	subi	r24, 0xFF	; 255
    2502:	80 93 5c 1b 	sts	0x1B5C, r24	; 0x801b5c <CalibrationCounter>
	if(CalibrationCounter>LimitToCalibration) calibration();
    2506:	80 91 5c 1b 	lds	r24, 0x1B5C	; 0x801b5c <CalibrationCounter>
    250a:	83 33       	cpi	r24, 0x33	; 51
    250c:	08 f0       	brcs	.+2      	; 0x2510 <setPosition+0x20>
    250e:	47 d0       	rcall	.+142    	; 0x259e <calibration>
	if (position<positionToSet)			//valve opening
    2510:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <position>
    2514:	8d 17       	cp	r24, r29
    2516:	00 f5       	brcc	.+64     	; 0x2558 <setPosition+0x68>
	{
		uint8_t steps = (uint8_t)((NumberOfPulsesOpen/100)*(positionToSet-position));
    2518:	20 91 58 1b 	lds	r18, 0x1B58	; 0x801b58 <NumberOfPulsesOpen>
    251c:	30 91 59 1b 	lds	r19, 0x1B59	; 0x801b59 <NumberOfPulsesOpen+0x1>
    2520:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <position>
    2524:	4d 2f       	mov	r20, r29
    2526:	48 1b       	sub	r20, r24
    2528:	36 95       	lsr	r19
    252a:	27 95       	ror	r18
    252c:	36 95       	lsr	r19
    252e:	27 95       	ror	r18
    2530:	ab e7       	ldi	r26, 0x7B	; 123
    2532:	b4 e1       	ldi	r27, 0x14	; 20
    2534:	ae d3       	rcall	.+1884   	; 0x2c92 <__umulhisi3>
    2536:	96 95       	lsr	r25
    2538:	87 95       	ror	r24
    253a:	48 9f       	mul	r20, r24
    253c:	c0 2d       	mov	r28, r0
    253e:	11 24       	eor	r1, r1
		OPENON;
    2540:	72 9a       	sbi	0x0e, 2	; 14
		CLOSEOFF;
    2542:	73 98       	cbi	0x0e, 3	; 14
		for (steps; steps>0; steps --)
    2544:	cc 23       	and	r28, r28
    2546:	29 f0       	breq	.+10     	; 0x2552 <setPosition+0x62>
		{
			DelayMs(OpenPulseDurationMS);
    2548:	8a ef       	ldi	r24, 0xFA	; 250
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	c3 df       	rcall	.-122    	; 0x24d4 <DelayMs>
	if (position<positionToSet)			//valve opening
	{
		uint8_t steps = (uint8_t)((NumberOfPulsesOpen/100)*(positionToSet-position));
		OPENON;
		CLOSEOFF;
		for (steps; steps>0; steps --)
    254e:	c1 50       	subi	r28, 0x01	; 1
    2550:	d9 f7       	brne	.-10     	; 0x2548 <setPosition+0x58>
		{
			DelayMs(OpenPulseDurationMS);
		}
		OPENOFF;
    2552:	72 98       	cbi	0x0e, 2	; 14
		CLOSEOFF;
    2554:	73 98       	cbi	0x0e, 3	; 14
    2556:	1e c0       	rjmp	.+60     	; 0x2594 <setPosition+0xa4>
	} 
	else		//valve closing
	{
		uint8_t steps = (uint8_t)((NumberOfPulsesClose/100)*(position-positionToSet));
    2558:	20 91 5a 1b 	lds	r18, 0x1B5A	; 0x801b5a <NumberOfPulsesClose>
    255c:	30 91 5b 1b 	lds	r19, 0x1B5B	; 0x801b5b <NumberOfPulsesClose+0x1>
    2560:	c0 91 0b 02 	lds	r28, 0x020B	; 0x80020b <position>
    2564:	cd 1b       	sub	r28, r29
    2566:	36 95       	lsr	r19
    2568:	27 95       	ror	r18
    256a:	36 95       	lsr	r19
    256c:	27 95       	ror	r18
    256e:	ab e7       	ldi	r26, 0x7B	; 123
    2570:	b4 e1       	ldi	r27, 0x14	; 20
    2572:	8f d3       	rcall	.+1822   	; 0x2c92 <__umulhisi3>
    2574:	96 95       	lsr	r25
    2576:	87 95       	ror	r24
    2578:	c8 9f       	mul	r28, r24
    257a:	c0 2d       	mov	r28, r0
    257c:	11 24       	eor	r1, r1
		OPENOFF;
    257e:	72 98       	cbi	0x0e, 2	; 14
		CLOSEON;
    2580:	73 9a       	sbi	0x0e, 3	; 14
		for (steps; steps>0; steps --)
    2582:	cc 23       	and	r28, r28
    2584:	29 f0       	breq	.+10     	; 0x2590 <setPosition+0xa0>
		{
			DelayMs(ClosePulseDurationMS);
    2586:	86 e9       	ldi	r24, 0x96	; 150
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	a4 df       	rcall	.-184    	; 0x24d4 <DelayMs>
	else		//valve closing
	{
		uint8_t steps = (uint8_t)((NumberOfPulsesClose/100)*(position-positionToSet));
		OPENOFF;
		CLOSEON;
		for (steps; steps>0; steps --)
    258c:	c1 50       	subi	r28, 0x01	; 1
    258e:	d9 f7       	brne	.-10     	; 0x2586 <setPosition+0x96>
		{
			DelayMs(ClosePulseDurationMS);
		}
		OPENOFF;
    2590:	72 98       	cbi	0x0e, 2	; 14
		CLOSEOFF;
    2592:	73 98       	cbi	0x0e, 3	; 14
	}
	position = positionToSet;
    2594:	d0 93 0b 02 	sts	0x020B, r29	; 0x80020b <position>
}
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	08 95       	ret

0000259e <calibration>:
	}
}


void calibration()
{
    259e:	cf 93       	push	r28
	//#ifdef DEBUG
	HAL_UartWriteString("\r\n");
    25a0:	8d e2       	ldi	r24, 0x2D	; 45
    25a2:	92 e0       	ldi	r25, 0x02	; 2
    25a4:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	HAL_UartWriteString("Calibration Start \r\n");
    25a8:	89 e8       	ldi	r24, 0x89	; 137
    25aa:	92 e0       	ldi	r25, 0x02	; 2
    25ac:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	//#endif
	uint8_t previousPosition = position;
    25b0:	c0 91 0b 02 	lds	r28, 0x020B	; 0x80020b <position>
	openClose(0);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	94 d0       	rcall	.+296    	; 0x26e0 <openClose>
	NumberOfPulsesOpen = 0;
    25b8:	10 92 59 1b 	sts	0x1B59, r1	; 0x801b59 <NumberOfPulsesOpen+0x1>
    25bc:	10 92 58 1b 	sts	0x1B58, r1	; 0x801b58 <NumberOfPulsesOpen>
	NumberOfPulsesClose = 0;
    25c0:	10 92 5b 1b 	sts	0x1B5B, r1	; 0x801b5b <NumberOfPulsesClose+0x1>
    25c4:	10 92 5a 1b 	sts	0x1B5A, r1	; 0x801b5a <NumberOfPulsesClose>
	CalibrationCounter = 0;
    25c8:	10 92 5c 1b 	sts	0x1B5C, r1	; 0x801b5c <CalibrationCounter>
	OPENON;
    25cc:	72 9a       	sbi	0x0e, 2	; 14
	CLOSEOFF;
    25ce:	73 98       	cbi	0x0e, 3	; 14
	DelayMs(DelayBeforeMeasure);
    25d0:	80 e2       	ldi	r24, 0x20	; 32
    25d2:	93 e0       	ldi	r25, 0x03	; 3
    25d4:	7f df       	rcall	.-258    	; 0x24d4 <DelayMs>
	uint16_t adcValue = ADC_Measure_Avg();
    25d6:	52 df       	rcall	.-348    	; 0x247c <ADC_Measure_Avg>
	while(OpenTreshold < adcValue)
    25d8:	85 31       	cpi	r24, 0x15	; 21
    25da:	95 40       	sbci	r25, 0x05	; 5
    25dc:	88 f0       	brcs	.+34     	; 0x2600 <calibration+0x62>
	{
		NumberOfPulsesOpen ++;		
    25de:	20 91 58 1b 	lds	r18, 0x1B58	; 0x801b58 <NumberOfPulsesOpen>
    25e2:	30 91 59 1b 	lds	r19, 0x1B59	; 0x801b59 <NumberOfPulsesOpen+0x1>
    25e6:	2f 5f       	subi	r18, 0xFF	; 255
    25e8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ea:	30 93 59 1b 	sts	0x1B59, r19	; 0x801b59 <NumberOfPulsesOpen+0x1>
    25ee:	20 93 58 1b 	sts	0x1B58, r18	; 0x801b58 <NumberOfPulsesOpen>
		DelayMs(OpenPulseDurationMS);
    25f2:	8a ef       	ldi	r24, 0xFA	; 250
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	6e df       	rcall	.-292    	; 0x24d4 <DelayMs>
		adcValue = ADC_Measure_Avg();
    25f8:	41 df       	rcall	.-382    	; 0x247c <ADC_Measure_Avg>
	CalibrationCounter = 0;
	OPENON;
	CLOSEOFF;
	DelayMs(DelayBeforeMeasure);
	uint16_t adcValue = ADC_Measure_Avg();
	while(OpenTreshold < adcValue)
    25fa:	85 31       	cpi	r24, 0x15	; 21
    25fc:	95 40       	sbci	r25, 0x05	; 5
    25fe:	78 f7       	brcc	.-34     	; 0x25de <calibration+0x40>
	{
		NumberOfPulsesOpen ++;		
		DelayMs(OpenPulseDurationMS);
		adcValue = ADC_Measure_Avg();
	}
	OPENOFF;
    2600:	72 98       	cbi	0x0e, 2	; 14
	CLOSEOFF;
    2602:	73 98       	cbi	0x0e, 3	; 14
	//#ifdef DEBUG
	HAL_UartWriteString("\r\n");
    2604:	8d e2       	ldi	r24, 0x2D	; 45
    2606:	92 e0       	ldi	r25, 0x02	; 2
    2608:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	HAL_UartWriteString("Full open pulses: \r\n");
    260c:	8e e9       	ldi	r24, 0x9E	; 158
    260e:	92 e0       	ldi	r25, 0x02	; 2
    2610:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	itoa(NumberOfPulsesOpen, vysledek_string, 10);
    2614:	80 91 58 1b 	lds	r24, 0x1B58	; 0x801b58 <NumberOfPulsesOpen>
    2618:	90 91 59 1b 	lds	r25, 0x1B59	; 0x801b59 <NumberOfPulsesOpen+0x1>
    261c:	4a e0       	ldi	r20, 0x0A	; 10
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	66 ea       	ldi	r22, 0xA6	; 166
    2622:	7b e1       	ldi	r23, 0x1B	; 27
    2624:	e0 d4       	rcall	.+2496   	; 0x2fe6 <itoa>
	HAL_UartWriteString(vysledek_string);
    2626:	86 ea       	ldi	r24, 0xA6	; 166
    2628:	9b e1       	ldi	r25, 0x1B	; 27
    262a:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	HAL_UartWriteString("\r\n");
    262e:	8d e2       	ldi	r24, 0x2D	; 45
    2630:	92 e0       	ldi	r25, 0x02	; 2
    2632:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	//#endif
	OPENOFF;
    2636:	72 98       	cbi	0x0e, 2	; 14
	CLOSEON;
    2638:	73 9a       	sbi	0x0e, 3	; 14
	DelayMs(DelayBeforeMeasure);
    263a:	80 e2       	ldi	r24, 0x20	; 32
    263c:	93 e0       	ldi	r25, 0x03	; 3
    263e:	4a df       	rcall	.-364    	; 0x24d4 <DelayMs>
	adcValue = ADC_Measure_Avg();
    2640:	1d df       	rcall	.-454    	; 0x247c <ADC_Measure_Avg>
	while(CloseTreshold > adcValue)
    2642:	88 30       	cpi	r24, 0x08	; 8
    2644:	97 40       	sbci	r25, 0x07	; 7
    2646:	88 f4       	brcc	.+34     	; 0x266a <calibration+0xcc>
	{
		NumberOfPulsesClose ++;
    2648:	20 91 5a 1b 	lds	r18, 0x1B5A	; 0x801b5a <NumberOfPulsesClose>
    264c:	30 91 5b 1b 	lds	r19, 0x1B5B	; 0x801b5b <NumberOfPulsesClose+0x1>
    2650:	2f 5f       	subi	r18, 0xFF	; 255
    2652:	3f 4f       	sbci	r19, 0xFF	; 255
    2654:	30 93 5b 1b 	sts	0x1B5B, r19	; 0x801b5b <NumberOfPulsesClose+0x1>
    2658:	20 93 5a 1b 	sts	0x1B5A, r18	; 0x801b5a <NumberOfPulsesClose>
		
		DelayMs(ClosePulseDurationMS);
    265c:	86 e9       	ldi	r24, 0x96	; 150
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	39 df       	rcall	.-398    	; 0x24d4 <DelayMs>
		adcValue = ADC_Measure_Avg();
    2662:	0c df       	rcall	.-488    	; 0x247c <ADC_Measure_Avg>
	//#endif
	OPENOFF;
	CLOSEON;
	DelayMs(DelayBeforeMeasure);
	adcValue = ADC_Measure_Avg();
	while(CloseTreshold > adcValue)
    2664:	88 30       	cpi	r24, 0x08	; 8
    2666:	97 40       	sbci	r25, 0x07	; 7
    2668:	78 f3       	brcs	.-34     	; 0x2648 <calibration+0xaa>
		NumberOfPulsesClose ++;
		
		DelayMs(ClosePulseDurationMS);
		adcValue = ADC_Measure_Avg();
	}
	OPENOFF;
    266a:	72 98       	cbi	0x0e, 2	; 14
	CLOSEOFF;
    266c:	73 98       	cbi	0x0e, 3	; 14
	position = 0;
    266e:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <position>
	setPosition(previousPosition);
    2672:	8c 2f       	mov	r24, r28
    2674:	3d df       	rcall	.-390    	; 0x24f0 <setPosition>
	
	//#ifdef DEBUG
	HAL_UartWriteString("\r\n");
    2676:	8d e2       	ldi	r24, 0x2D	; 45
    2678:	92 e0       	ldi	r25, 0x02	; 2
    267a:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	HAL_UartWriteString("Full close pulses: \r\n");
    267e:	83 eb       	ldi	r24, 0xB3	; 179
    2680:	92 e0       	ldi	r25, 0x02	; 2
    2682:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	itoa(NumberOfPulsesClose, vysledek_string, 10);
    2686:	80 91 5a 1b 	lds	r24, 0x1B5A	; 0x801b5a <NumberOfPulsesClose>
    268a:	90 91 5b 1b 	lds	r25, 0x1B5B	; 0x801b5b <NumberOfPulsesClose+0x1>
    268e:	4a e0       	ldi	r20, 0x0A	; 10
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	66 ea       	ldi	r22, 0xA6	; 166
    2694:	7b e1       	ldi	r23, 0x1B	; 27
    2696:	a7 d4       	rcall	.+2382   	; 0x2fe6 <itoa>
	HAL_UartWriteString(vysledek_string);
    2698:	86 ea       	ldi	r24, 0xA6	; 166
    269a:	9b e1       	ldi	r25, 0x1B	; 27
    269c:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	HAL_UartWriteString("\r\n");
    26a0:	8d e2       	ldi	r24, 0x2D	; 45
    26a2:	92 e0       	ldi	r25, 0x02	; 2
    26a4:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	HAL_UartWriteString("\r\n");
    26a8:	8d e2       	ldi	r24, 0x2D	; 45
    26aa:	92 e0       	ldi	r25, 0x02	; 2
    26ac:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	HAL_UartWriteString("Calibration complete \r\n");
    26b0:	89 ec       	ldi	r24, 0xC9	; 201
    26b2:	92 e0       	ldi	r25, 0x02	; 2
    26b4:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	//#endif
}
    26b8:	cf 91       	pop	r28
    26ba:	08 95       	ret

000026bc <initTermosticValve>:
char vysledek_string[10];
uint16_t tmp;

void initTermosticValve()
{
	HAL_UartWriteString("\r\n");
    26bc:	8d e2       	ldi	r24, 0x2D	; 45
    26be:	92 e0       	ldi	r25, 0x02	; 2
    26c0:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	HAL_UartWriteString("InitTermostaticValve \r\n");
    26c4:	81 ee       	ldi	r24, 0xE1	; 225
    26c6:	92 e0       	ldi	r25, 0x02	; 2
    26c8:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
	
	ADC_Init(4, 2);
    26cc:	62 e0       	ldi	r22, 0x02	; 2
    26ce:	84 e0       	ldi	r24, 0x04	; 4
    26d0:	0e 94 bb 00 	call	0x176	; 0x176 <ADC_Init>
	sbi(DDRE,2);	//output open
    26d4:	6a 9a       	sbi	0x0d, 2	; 13
	sbi(DDRE,3);	//output close
    26d6:	6b 9a       	sbi	0x0d, 3	; 13
	OPENOFF;
    26d8:	72 98       	cbi	0x0e, 2	; 14
	CLOSEOFF;
    26da:	73 98       	cbi	0x0e, 3	; 14
	calibration();
    26dc:	60 cf       	rjmp	.-320    	; 0x259e <calibration>
    26de:	08 95       	ret

000026e0 <openClose>:
	HAL_UartWriteString("Calibration complete \r\n");
	//#endif
}

void openClose(uint8_t direction)	//1 - open, 0 - close
{
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
	if (direction == 0 && position != 0)		//close valve
    26e4:	81 11       	cpse	r24, r1
    26e6:	37 c0       	rjmp	.+110    	; 0x2756 <openClose+0x76>
    26e8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <position>
    26ec:	88 23       	and	r24, r24
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <openClose+0x12>
    26f0:	6a c0       	rjmp	.+212    	; 0x27c6 <openClose+0xe6>
	{
		CalibrationCounter ++;
    26f2:	80 91 5c 1b 	lds	r24, 0x1B5C	; 0x801b5c <CalibrationCounter>
    26f6:	8f 5f       	subi	r24, 0xFF	; 255
    26f8:	80 93 5c 1b 	sts	0x1B5C, r24	; 0x801b5c <CalibrationCounter>
		if(CalibrationCounter>LimitToCalibration) calibration();
    26fc:	80 91 5c 1b 	lds	r24, 0x1B5C	; 0x801b5c <CalibrationCounter>
    2700:	83 33       	cpi	r24, 0x33	; 51
    2702:	08 f0       	brcs	.+2      	; 0x2706 <openClose+0x26>
    2704:	4c df       	rcall	.-360    	; 0x259e <calibration>
		OPENOFF;
    2706:	72 98       	cbi	0x0e, 2	; 14
		CLOSEON;
    2708:	73 9a       	sbi	0x0e, 3	; 14
		DelayMs(DelayBeforeMeasure);
    270a:	80 e2       	ldi	r24, 0x20	; 32
    270c:	93 e0       	ldi	r25, 0x03	; 3
    270e:	e2 de       	rcall	.-572    	; 0x24d4 <DelayMs>
		uint16_t adcValue = ADC_Measure_Avg();
    2710:	b5 de       	rcall	.-662    	; 0x247c <ADC_Measure_Avg>
    2712:	ec 01       	movw	r28, r24
		while(CloseTreshold > adcValue)
    2714:	c8 30       	cpi	r28, 0x08	; 8
    2716:	87 e0       	ldi	r24, 0x07	; 7
    2718:	d8 07       	cpc	r29, r24
    271a:	30 f4       	brcc	.+12     	; 0x2728 <openClose+0x48>
		{
			adcValue = ADC_Measure_Avg();
    271c:	af de       	rcall	.-674    	; 0x247c <ADC_Measure_Avg>
    271e:	ec 01       	movw	r28, r24
		if(CalibrationCounter>LimitToCalibration) calibration();
		OPENOFF;
		CLOSEON;
		DelayMs(DelayBeforeMeasure);
		uint16_t adcValue = ADC_Measure_Avg();
		while(CloseTreshold > adcValue)
    2720:	c8 30       	cpi	r28, 0x08	; 8
    2722:	87 e0       	ldi	r24, 0x07	; 7
    2724:	d8 07       	cpc	r29, r24
    2726:	d0 f3       	brcs	.-12     	; 0x271c <openClose+0x3c>
		{
			adcValue = ADC_Measure_Avg();
		}
		position = 0;
    2728:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <position>
		
		//#ifdef DEBUG
		vysledek_string[0] = 0;
    272c:	10 92 a6 1b 	sts	0x1BA6, r1	; 0x801ba6 <vysledek_string>
		HAL_UartWriteString("Valve is closed: \r\n");
    2730:	89 ef       	ldi	r24, 0xF9	; 249
    2732:	92 e0       	ldi	r25, 0x02	; 2
    2734:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
		itoa(adcValue, vysledek_string, 10);
    2738:	4a e0       	ldi	r20, 0x0A	; 10
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	66 ea       	ldi	r22, 0xA6	; 166
    273e:	7b e1       	ldi	r23, 0x1B	; 27
    2740:	ce 01       	movw	r24, r28
    2742:	51 d4       	rcall	.+2210   	; 0x2fe6 <itoa>
		HAL_UartWriteString(vysledek_string);
    2744:	86 ea       	ldi	r24, 0xA6	; 166
    2746:	9b e1       	ldi	r25, 0x1B	; 27
    2748:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
		HAL_UartWriteString("\r\n");
    274c:	8d e2       	ldi	r24, 0x2D	; 45
    274e:	92 e0       	ldi	r25, 0x02	; 2
    2750:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
    2754:	38 c0       	rjmp	.+112    	; 0x27c6 <openClose+0xe6>
		//#endif
		
	}
	if (direction == 1 && position != 100)		//open valve
    2756:	81 30       	cpi	r24, 0x01	; 1
    2758:	b1 f5       	brne	.+108    	; 0x27c6 <openClose+0xe6>
    275a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <position>
    275e:	84 36       	cpi	r24, 0x64	; 100
    2760:	91 f1       	breq	.+100    	; 0x27c6 <openClose+0xe6>
	{
		CalibrationCounter ++;
    2762:	80 91 5c 1b 	lds	r24, 0x1B5C	; 0x801b5c <CalibrationCounter>
    2766:	8f 5f       	subi	r24, 0xFF	; 255
    2768:	80 93 5c 1b 	sts	0x1B5C, r24	; 0x801b5c <CalibrationCounter>
		if(CalibrationCounter>LimitToCalibration) calibration();
    276c:	80 91 5c 1b 	lds	r24, 0x1B5C	; 0x801b5c <CalibrationCounter>
    2770:	83 33       	cpi	r24, 0x33	; 51
    2772:	08 f0       	brcs	.+2      	; 0x2776 <openClose+0x96>
    2774:	14 df       	rcall	.-472    	; 0x259e <calibration>
		
		OPENON;
    2776:	72 9a       	sbi	0x0e, 2	; 14
		CLOSEOFF;
    2778:	73 98       	cbi	0x0e, 3	; 14
		DelayMs(DelayBeforeMeasure);		
    277a:	80 e2       	ldi	r24, 0x20	; 32
    277c:	93 e0       	ldi	r25, 0x03	; 3
    277e:	aa de       	rcall	.-684    	; 0x24d4 <DelayMs>
		uint16_t adcValue = ADC_Measure_Avg();
    2780:	7d de       	rcall	.-774    	; 0x247c <ADC_Measure_Avg>
    2782:	ec 01       	movw	r28, r24
		while(OpenTreshold < adcValue)
    2784:	c5 31       	cpi	r28, 0x15	; 21
    2786:	85 e0       	ldi	r24, 0x05	; 5
    2788:	d8 07       	cpc	r29, r24
    278a:	30 f0       	brcs	.+12     	; 0x2798 <openClose+0xb8>
		{
			adcValue = ADC_Measure_Avg();
    278c:	77 de       	rcall	.-786    	; 0x247c <ADC_Measure_Avg>
    278e:	ec 01       	movw	r28, r24
		
		OPENON;
		CLOSEOFF;
		DelayMs(DelayBeforeMeasure);		
		uint16_t adcValue = ADC_Measure_Avg();
		while(OpenTreshold < adcValue)
    2790:	c5 31       	cpi	r28, 0x15	; 21
    2792:	85 e0       	ldi	r24, 0x05	; 5
    2794:	d8 07       	cpc	r29, r24
    2796:	d0 f7       	brcc	.-12     	; 0x278c <openClose+0xac>
		{
			adcValue = ADC_Measure_Avg();
		}
		position = 100;
    2798:	84 e6       	ldi	r24, 0x64	; 100
    279a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <position>
		
		//#ifdef DEBUG
		//tmp = ADC_Measure_Avg();
		vysledek_string[0] = 0;
    279e:	10 92 a6 1b 	sts	0x1BA6, r1	; 0x801ba6 <vysledek_string>
		HAL_UartWriteString("Valve is opened: \r\n");
    27a2:	8d e0       	ldi	r24, 0x0D	; 13
    27a4:	93 e0       	ldi	r25, 0x03	; 3
    27a6:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
		itoa(adcValue, vysledek_string, 10);
    27aa:	4a e0       	ldi	r20, 0x0A	; 10
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	66 ea       	ldi	r22, 0xA6	; 166
    27b0:	7b e1       	ldi	r23, 0x1B	; 27
    27b2:	ce 01       	movw	r24, r28
    27b4:	18 d4       	rcall	.+2096   	; 0x2fe6 <itoa>
		HAL_UartWriteString(vysledek_string);
    27b6:	86 ea       	ldi	r24, 0xA6	; 166
    27b8:	9b e1       	ldi	r25, 0x1B	; 27
    27ba:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
		HAL_UartWriteString("\r\n");
    27be:	8d e2       	ldi	r24, 0x2D	; 45
    27c0:	92 e0       	ldi	r25, 0x02	; 2
    27c2:	0e 94 ef 06 	call	0xdde	; 0xdde <HAL_UartWriteString>
		//#endif
	}
	OPENOFF;
    27c6:	72 98       	cbi	0x0e, 2	; 14
	CLOSEOFF;
    27c8:	73 98       	cbi	0x0e, 3	; 14
	return;
}
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	08 95       	ret

000027d0 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    27d0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    27d4:	88 e8       	ldi	r24, 0x88	; 136
    27d6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    27da:	08 95       	ret

000027dc <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    27dc:	94 ea       	ldi	r25, 0xA4	; 164
    27de:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    27e2:	ec eb       	ldi	r30, 0xBC	; 188
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	90 81       	ld	r25, Z
    27e8:	99 23       	and	r25, r25
    27ea:	ec f7       	brge	.-6      	; 0x27e6 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    27ec:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    27f0:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    27f2:	98 30       	cpi	r25, 0x08	; 8
    27f4:	11 f0       	breq	.+4      	; 0x27fa <i2c_start+0x1e>
    27f6:	90 31       	cpi	r25, 0x10	; 16
    27f8:	a1 f4       	brne	.+40     	; 0x2822 <i2c_start+0x46>

	// send device address
	TWDR = address;
    27fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    27fe:	84 e8       	ldi	r24, 0x84	; 132
    2800:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    2804:	ec eb       	ldi	r30, 0xBC	; 188
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	88 23       	and	r24, r24
    280c:	ec f7       	brge	.-6      	; 0x2808 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    280e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2812:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    2814:	98 31       	cpi	r25, 0x18	; 24
    2816:	39 f0       	breq	.+14     	; 0x2826 <i2c_start+0x4a>
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	90 34       	cpi	r25, 0x40	; 64
    281c:	29 f4       	brne	.+10     	; 0x2828 <i2c_start+0x4c>
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    2826:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    2828:	08 95       	ret

0000282a <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    282e:	ec eb       	ldi	r30, 0xBC	; 188
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2834:	a9 eb       	ldi	r26, 0xB9	; 185
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    2838:	cb eb       	ldi	r28, 0xBB	; 187
    283a:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
    283c:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    283e:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    2840:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2842:	90 81       	ld	r25, Z
    2844:	99 23       	and	r25, r25
    2846:	ec f7       	brge	.-6      	; 0x2842 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    2848:	9c 91       	ld	r25, X
    284a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    284c:	98 30       	cpi	r25, 0x08	; 8
    284e:	11 f0       	breq	.+4      	; 0x2854 <i2c_start_wait+0x2a>
    2850:	90 31       	cpi	r25, 0x10	; 16
    2852:	b1 f7       	brne	.-20     	; 0x2840 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
    2854:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    2856:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    2858:	90 81       	ld	r25, Z
    285a:	99 23       	and	r25, r25
    285c:	ec f7       	brge	.-6      	; 0x2858 <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    285e:	9c 91       	ld	r25, X
    2860:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    2862:	90 32       	cpi	r25, 0x20	; 32
    2864:	11 f0       	breq	.+4      	; 0x286a <i2c_start_wait+0x40>
    2866:	98 35       	cpi	r25, 0x58	; 88
    2868:	29 f4       	brne	.+10     	; 0x2874 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    286a:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    286c:	90 81       	ld	r25, Z
    286e:	94 fd       	sbrc	r25, 4
    2870:	fd cf       	rjmp	.-6      	; 0x286c <i2c_start_wait+0x42>
    2872:	e6 cf       	rjmp	.-52     	; 0x2840 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	08 95       	ret

0000287a <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    287a:	b0 cf       	rjmp	.-160    	; 0x27dc <i2c_start>

}/* i2c_rep_start */
    287c:	08 95       	ret

0000287e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    287e:	84 e9       	ldi	r24, 0x94	; 148
    2880:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    2884:	ec eb       	ldi	r30, 0xBC	; 188
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	84 fd       	sbrc	r24, 4
    288c:	fd cf       	rjmp	.-6      	; 0x2888 <i2c_stop+0xa>

}/* i2c_stop */
    288e:	08 95       	ret

00002890 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    2890:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    2894:	84 e8       	ldi	r24, 0x84	; 132
    2896:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    289a:	ec eb       	ldi	r30, 0xBC	; 188
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	88 23       	and	r24, r24
    28a2:	ec f7       	brge	.-6      	; 0x289e <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    28a4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    28a8:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	98 32       	cpi	r25, 0x28	; 40
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <i2c_write+0x22>
    28b0:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    28b2:	08 95       	ret

000028b4 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    28b4:	84 ec       	ldi	r24, 0xC4	; 196
    28b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));    
    28ba:	ec eb       	ldi	r30, 0xBC	; 188
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	88 23       	and	r24, r24
    28c2:	ec f7       	brge	.-6      	; 0x28be <i2c_readAck+0xa>

    return TWDR;
    28c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

}/* i2c_readAck */
    28c8:	08 95       	ret

000028ca <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    28ca:	84 e8       	ldi	r24, 0x84	; 132
    28cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while(!(TWCR & (1<<TWINT)));
    28d0:	ec eb       	ldi	r30, 0xBC	; 188
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	88 23       	and	r24, r24
    28d8:	ec f7       	brge	.-6      	; 0x28d4 <i2c_readNak+0xa>
	
    return TWDR;
    28da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>

}/* i2c_readNak */
    28de:	08 95       	ret

000028e0 <__subsf3>:
    28e0:	50 58       	subi	r21, 0x80	; 128

000028e2 <__addsf3>:
    28e2:	bb 27       	eor	r27, r27
    28e4:	aa 27       	eor	r26, r26
    28e6:	0e d0       	rcall	.+28     	; 0x2904 <__addsf3x>
    28e8:	4d c1       	rjmp	.+666    	; 0x2b84 <__fp_round>
    28ea:	3e d1       	rcall	.+636    	; 0x2b68 <__fp_pscA>
    28ec:	30 f0       	brcs	.+12     	; 0x28fa <__addsf3+0x18>
    28ee:	43 d1       	rcall	.+646    	; 0x2b76 <__fp_pscB>
    28f0:	20 f0       	brcs	.+8      	; 0x28fa <__addsf3+0x18>
    28f2:	31 f4       	brne	.+12     	; 0x2900 <__addsf3+0x1e>
    28f4:	9f 3f       	cpi	r25, 0xFF	; 255
    28f6:	11 f4       	brne	.+4      	; 0x28fc <__addsf3+0x1a>
    28f8:	1e f4       	brtc	.+6      	; 0x2900 <__addsf3+0x1e>
    28fa:	33 c1       	rjmp	.+614    	; 0x2b62 <__fp_nan>
    28fc:	0e f4       	brtc	.+2      	; 0x2900 <__addsf3+0x1e>
    28fe:	e0 95       	com	r30
    2900:	e7 fb       	bst	r30, 7
    2902:	29 c1       	rjmp	.+594    	; 0x2b56 <__fp_inf>

00002904 <__addsf3x>:
    2904:	e9 2f       	mov	r30, r25
    2906:	4f d1       	rcall	.+670    	; 0x2ba6 <__fp_split3>
    2908:	80 f3       	brcs	.-32     	; 0x28ea <__addsf3+0x8>
    290a:	ba 17       	cp	r27, r26
    290c:	62 07       	cpc	r22, r18
    290e:	73 07       	cpc	r23, r19
    2910:	84 07       	cpc	r24, r20
    2912:	95 07       	cpc	r25, r21
    2914:	18 f0       	brcs	.+6      	; 0x291c <__addsf3x+0x18>
    2916:	71 f4       	brne	.+28     	; 0x2934 <__addsf3x+0x30>
    2918:	9e f5       	brtc	.+102    	; 0x2980 <__addsf3x+0x7c>
    291a:	67 c1       	rjmp	.+718    	; 0x2bea <__fp_zero>
    291c:	0e f4       	brtc	.+2      	; 0x2920 <__addsf3x+0x1c>
    291e:	e0 95       	com	r30
    2920:	0b 2e       	mov	r0, r27
    2922:	ba 2f       	mov	r27, r26
    2924:	a0 2d       	mov	r26, r0
    2926:	0b 01       	movw	r0, r22
    2928:	b9 01       	movw	r22, r18
    292a:	90 01       	movw	r18, r0
    292c:	0c 01       	movw	r0, r24
    292e:	ca 01       	movw	r24, r20
    2930:	a0 01       	movw	r20, r0
    2932:	11 24       	eor	r1, r1
    2934:	ff 27       	eor	r31, r31
    2936:	59 1b       	sub	r21, r25
    2938:	99 f0       	breq	.+38     	; 0x2960 <__addsf3x+0x5c>
    293a:	59 3f       	cpi	r21, 0xF9	; 249
    293c:	50 f4       	brcc	.+20     	; 0x2952 <__addsf3x+0x4e>
    293e:	50 3e       	cpi	r21, 0xE0	; 224
    2940:	68 f1       	brcs	.+90     	; 0x299c <__addsf3x+0x98>
    2942:	1a 16       	cp	r1, r26
    2944:	f0 40       	sbci	r31, 0x00	; 0
    2946:	a2 2f       	mov	r26, r18
    2948:	23 2f       	mov	r18, r19
    294a:	34 2f       	mov	r19, r20
    294c:	44 27       	eor	r20, r20
    294e:	58 5f       	subi	r21, 0xF8	; 248
    2950:	f3 cf       	rjmp	.-26     	; 0x2938 <__addsf3x+0x34>
    2952:	46 95       	lsr	r20
    2954:	37 95       	ror	r19
    2956:	27 95       	ror	r18
    2958:	a7 95       	ror	r26
    295a:	f0 40       	sbci	r31, 0x00	; 0
    295c:	53 95       	inc	r21
    295e:	c9 f7       	brne	.-14     	; 0x2952 <__addsf3x+0x4e>
    2960:	7e f4       	brtc	.+30     	; 0x2980 <__addsf3x+0x7c>
    2962:	1f 16       	cp	r1, r31
    2964:	ba 0b       	sbc	r27, r26
    2966:	62 0b       	sbc	r22, r18
    2968:	73 0b       	sbc	r23, r19
    296a:	84 0b       	sbc	r24, r20
    296c:	ba f0       	brmi	.+46     	; 0x299c <__addsf3x+0x98>
    296e:	91 50       	subi	r25, 0x01	; 1
    2970:	a1 f0       	breq	.+40     	; 0x299a <__addsf3x+0x96>
    2972:	ff 0f       	add	r31, r31
    2974:	bb 1f       	adc	r27, r27
    2976:	66 1f       	adc	r22, r22
    2978:	77 1f       	adc	r23, r23
    297a:	88 1f       	adc	r24, r24
    297c:	c2 f7       	brpl	.-16     	; 0x296e <__addsf3x+0x6a>
    297e:	0e c0       	rjmp	.+28     	; 0x299c <__addsf3x+0x98>
    2980:	ba 0f       	add	r27, r26
    2982:	62 1f       	adc	r22, r18
    2984:	73 1f       	adc	r23, r19
    2986:	84 1f       	adc	r24, r20
    2988:	48 f4       	brcc	.+18     	; 0x299c <__addsf3x+0x98>
    298a:	87 95       	ror	r24
    298c:	77 95       	ror	r23
    298e:	67 95       	ror	r22
    2990:	b7 95       	ror	r27
    2992:	f7 95       	ror	r31
    2994:	9e 3f       	cpi	r25, 0xFE	; 254
    2996:	08 f0       	brcs	.+2      	; 0x299a <__addsf3x+0x96>
    2998:	b3 cf       	rjmp	.-154    	; 0x2900 <__addsf3+0x1e>
    299a:	93 95       	inc	r25
    299c:	88 0f       	add	r24, r24
    299e:	08 f0       	brcs	.+2      	; 0x29a2 <__addsf3x+0x9e>
    29a0:	99 27       	eor	r25, r25
    29a2:	ee 0f       	add	r30, r30
    29a4:	97 95       	ror	r25
    29a6:	87 95       	ror	r24
    29a8:	08 95       	ret

000029aa <__divsf3>:
    29aa:	0c d0       	rcall	.+24     	; 0x29c4 <__divsf3x>
    29ac:	eb c0       	rjmp	.+470    	; 0x2b84 <__fp_round>
    29ae:	e3 d0       	rcall	.+454    	; 0x2b76 <__fp_pscB>
    29b0:	40 f0       	brcs	.+16     	; 0x29c2 <__divsf3+0x18>
    29b2:	da d0       	rcall	.+436    	; 0x2b68 <__fp_pscA>
    29b4:	30 f0       	brcs	.+12     	; 0x29c2 <__divsf3+0x18>
    29b6:	21 f4       	brne	.+8      	; 0x29c0 <__divsf3+0x16>
    29b8:	5f 3f       	cpi	r21, 0xFF	; 255
    29ba:	19 f0       	breq	.+6      	; 0x29c2 <__divsf3+0x18>
    29bc:	cc c0       	rjmp	.+408    	; 0x2b56 <__fp_inf>
    29be:	51 11       	cpse	r21, r1
    29c0:	15 c1       	rjmp	.+554    	; 0x2bec <__fp_szero>
    29c2:	cf c0       	rjmp	.+414    	; 0x2b62 <__fp_nan>

000029c4 <__divsf3x>:
    29c4:	f0 d0       	rcall	.+480    	; 0x2ba6 <__fp_split3>
    29c6:	98 f3       	brcs	.-26     	; 0x29ae <__divsf3+0x4>

000029c8 <__divsf3_pse>:
    29c8:	99 23       	and	r25, r25
    29ca:	c9 f3       	breq	.-14     	; 0x29be <__divsf3+0x14>
    29cc:	55 23       	and	r21, r21
    29ce:	b1 f3       	breq	.-20     	; 0x29bc <__divsf3+0x12>
    29d0:	95 1b       	sub	r25, r21
    29d2:	55 0b       	sbc	r21, r21
    29d4:	bb 27       	eor	r27, r27
    29d6:	aa 27       	eor	r26, r26
    29d8:	62 17       	cp	r22, r18
    29da:	73 07       	cpc	r23, r19
    29dc:	84 07       	cpc	r24, r20
    29de:	38 f0       	brcs	.+14     	; 0x29ee <__divsf3_pse+0x26>
    29e0:	9f 5f       	subi	r25, 0xFF	; 255
    29e2:	5f 4f       	sbci	r21, 0xFF	; 255
    29e4:	22 0f       	add	r18, r18
    29e6:	33 1f       	adc	r19, r19
    29e8:	44 1f       	adc	r20, r20
    29ea:	aa 1f       	adc	r26, r26
    29ec:	a9 f3       	breq	.-22     	; 0x29d8 <__divsf3_pse+0x10>
    29ee:	33 d0       	rcall	.+102    	; 0x2a56 <__divsf3_pse+0x8e>
    29f0:	0e 2e       	mov	r0, r30
    29f2:	3a f0       	brmi	.+14     	; 0x2a02 <__divsf3_pse+0x3a>
    29f4:	e0 e8       	ldi	r30, 0x80	; 128
    29f6:	30 d0       	rcall	.+96     	; 0x2a58 <__divsf3_pse+0x90>
    29f8:	91 50       	subi	r25, 0x01	; 1
    29fa:	50 40       	sbci	r21, 0x00	; 0
    29fc:	e6 95       	lsr	r30
    29fe:	00 1c       	adc	r0, r0
    2a00:	ca f7       	brpl	.-14     	; 0x29f4 <__divsf3_pse+0x2c>
    2a02:	29 d0       	rcall	.+82     	; 0x2a56 <__divsf3_pse+0x8e>
    2a04:	fe 2f       	mov	r31, r30
    2a06:	27 d0       	rcall	.+78     	; 0x2a56 <__divsf3_pse+0x8e>
    2a08:	66 0f       	add	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	88 1f       	adc	r24, r24
    2a0e:	bb 1f       	adc	r27, r27
    2a10:	26 17       	cp	r18, r22
    2a12:	37 07       	cpc	r19, r23
    2a14:	48 07       	cpc	r20, r24
    2a16:	ab 07       	cpc	r26, r27
    2a18:	b0 e8       	ldi	r27, 0x80	; 128
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <__divsf3_pse+0x56>
    2a1c:	bb 0b       	sbc	r27, r27
    2a1e:	80 2d       	mov	r24, r0
    2a20:	bf 01       	movw	r22, r30
    2a22:	ff 27       	eor	r31, r31
    2a24:	93 58       	subi	r25, 0x83	; 131
    2a26:	5f 4f       	sbci	r21, 0xFF	; 255
    2a28:	2a f0       	brmi	.+10     	; 0x2a34 <__divsf3_pse+0x6c>
    2a2a:	9e 3f       	cpi	r25, 0xFE	; 254
    2a2c:	51 05       	cpc	r21, r1
    2a2e:	68 f0       	brcs	.+26     	; 0x2a4a <__divsf3_pse+0x82>
    2a30:	92 c0       	rjmp	.+292    	; 0x2b56 <__fp_inf>
    2a32:	dc c0       	rjmp	.+440    	; 0x2bec <__fp_szero>
    2a34:	5f 3f       	cpi	r21, 0xFF	; 255
    2a36:	ec f3       	brlt	.-6      	; 0x2a32 <__divsf3_pse+0x6a>
    2a38:	98 3e       	cpi	r25, 0xE8	; 232
    2a3a:	dc f3       	brlt	.-10     	; 0x2a32 <__divsf3_pse+0x6a>
    2a3c:	86 95       	lsr	r24
    2a3e:	77 95       	ror	r23
    2a40:	67 95       	ror	r22
    2a42:	b7 95       	ror	r27
    2a44:	f7 95       	ror	r31
    2a46:	9f 5f       	subi	r25, 0xFF	; 255
    2a48:	c9 f7       	brne	.-14     	; 0x2a3c <__divsf3_pse+0x74>
    2a4a:	88 0f       	add	r24, r24
    2a4c:	91 1d       	adc	r25, r1
    2a4e:	96 95       	lsr	r25
    2a50:	87 95       	ror	r24
    2a52:	97 f9       	bld	r25, 7
    2a54:	08 95       	ret
    2a56:	e1 e0       	ldi	r30, 0x01	; 1
    2a58:	66 0f       	add	r22, r22
    2a5a:	77 1f       	adc	r23, r23
    2a5c:	88 1f       	adc	r24, r24
    2a5e:	bb 1f       	adc	r27, r27
    2a60:	62 17       	cp	r22, r18
    2a62:	73 07       	cpc	r23, r19
    2a64:	84 07       	cpc	r24, r20
    2a66:	ba 07       	cpc	r27, r26
    2a68:	20 f0       	brcs	.+8      	; 0x2a72 <__divsf3_pse+0xaa>
    2a6a:	62 1b       	sub	r22, r18
    2a6c:	73 0b       	sbc	r23, r19
    2a6e:	84 0b       	sbc	r24, r20
    2a70:	ba 0b       	sbc	r27, r26
    2a72:	ee 1f       	adc	r30, r30
    2a74:	88 f7       	brcc	.-30     	; 0x2a58 <__divsf3_pse+0x90>
    2a76:	e0 95       	com	r30
    2a78:	08 95       	ret

00002a7a <__fixsfsi>:
    2a7a:	04 d0       	rcall	.+8      	; 0x2a84 <__fixunssfsi>
    2a7c:	68 94       	set
    2a7e:	b1 11       	cpse	r27, r1
    2a80:	b5 c0       	rjmp	.+362    	; 0x2bec <__fp_szero>
    2a82:	08 95       	ret

00002a84 <__fixunssfsi>:
    2a84:	98 d0       	rcall	.+304    	; 0x2bb6 <__fp_splitA>
    2a86:	88 f0       	brcs	.+34     	; 0x2aaa <__fixunssfsi+0x26>
    2a88:	9f 57       	subi	r25, 0x7F	; 127
    2a8a:	90 f0       	brcs	.+36     	; 0x2ab0 <__fixunssfsi+0x2c>
    2a8c:	b9 2f       	mov	r27, r25
    2a8e:	99 27       	eor	r25, r25
    2a90:	b7 51       	subi	r27, 0x17	; 23
    2a92:	a0 f0       	brcs	.+40     	; 0x2abc <__fixunssfsi+0x38>
    2a94:	d1 f0       	breq	.+52     	; 0x2aca <__fixunssfsi+0x46>
    2a96:	66 0f       	add	r22, r22
    2a98:	77 1f       	adc	r23, r23
    2a9a:	88 1f       	adc	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	1a f0       	brmi	.+6      	; 0x2aa6 <__fixunssfsi+0x22>
    2aa0:	ba 95       	dec	r27
    2aa2:	c9 f7       	brne	.-14     	; 0x2a96 <__fixunssfsi+0x12>
    2aa4:	12 c0       	rjmp	.+36     	; 0x2aca <__fixunssfsi+0x46>
    2aa6:	b1 30       	cpi	r27, 0x01	; 1
    2aa8:	81 f0       	breq	.+32     	; 0x2aca <__fixunssfsi+0x46>
    2aaa:	9f d0       	rcall	.+318    	; 0x2bea <__fp_zero>
    2aac:	b1 e0       	ldi	r27, 0x01	; 1
    2aae:	08 95       	ret
    2ab0:	9c c0       	rjmp	.+312    	; 0x2bea <__fp_zero>
    2ab2:	67 2f       	mov	r22, r23
    2ab4:	78 2f       	mov	r23, r24
    2ab6:	88 27       	eor	r24, r24
    2ab8:	b8 5f       	subi	r27, 0xF8	; 248
    2aba:	39 f0       	breq	.+14     	; 0x2aca <__fixunssfsi+0x46>
    2abc:	b9 3f       	cpi	r27, 0xF9	; 249
    2abe:	cc f3       	brlt	.-14     	; 0x2ab2 <__fixunssfsi+0x2e>
    2ac0:	86 95       	lsr	r24
    2ac2:	77 95       	ror	r23
    2ac4:	67 95       	ror	r22
    2ac6:	b3 95       	inc	r27
    2ac8:	d9 f7       	brne	.-10     	; 0x2ac0 <__fixunssfsi+0x3c>
    2aca:	3e f4       	brtc	.+14     	; 0x2ada <__fixunssfsi+0x56>
    2acc:	90 95       	com	r25
    2ace:	80 95       	com	r24
    2ad0:	70 95       	com	r23
    2ad2:	61 95       	neg	r22
    2ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ada:	08 95       	ret

00002adc <__floatunsisf>:
    2adc:	e8 94       	clt
    2ade:	09 c0       	rjmp	.+18     	; 0x2af2 <__floatsisf+0x12>

00002ae0 <__floatsisf>:
    2ae0:	97 fb       	bst	r25, 7
    2ae2:	3e f4       	brtc	.+14     	; 0x2af2 <__floatsisf+0x12>
    2ae4:	90 95       	com	r25
    2ae6:	80 95       	com	r24
    2ae8:	70 95       	com	r23
    2aea:	61 95       	neg	r22
    2aec:	7f 4f       	sbci	r23, 0xFF	; 255
    2aee:	8f 4f       	sbci	r24, 0xFF	; 255
    2af0:	9f 4f       	sbci	r25, 0xFF	; 255
    2af2:	99 23       	and	r25, r25
    2af4:	a9 f0       	breq	.+42     	; 0x2b20 <__floatsisf+0x40>
    2af6:	f9 2f       	mov	r31, r25
    2af8:	96 e9       	ldi	r25, 0x96	; 150
    2afa:	bb 27       	eor	r27, r27
    2afc:	93 95       	inc	r25
    2afe:	f6 95       	lsr	r31
    2b00:	87 95       	ror	r24
    2b02:	77 95       	ror	r23
    2b04:	67 95       	ror	r22
    2b06:	b7 95       	ror	r27
    2b08:	f1 11       	cpse	r31, r1
    2b0a:	f8 cf       	rjmp	.-16     	; 0x2afc <__floatsisf+0x1c>
    2b0c:	fa f4       	brpl	.+62     	; 0x2b4c <__floatsisf+0x6c>
    2b0e:	bb 0f       	add	r27, r27
    2b10:	11 f4       	brne	.+4      	; 0x2b16 <__floatsisf+0x36>
    2b12:	60 ff       	sbrs	r22, 0
    2b14:	1b c0       	rjmp	.+54     	; 0x2b4c <__floatsisf+0x6c>
    2b16:	6f 5f       	subi	r22, 0xFF	; 255
    2b18:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b1e:	16 c0       	rjmp	.+44     	; 0x2b4c <__floatsisf+0x6c>
    2b20:	88 23       	and	r24, r24
    2b22:	11 f0       	breq	.+4      	; 0x2b28 <__floatsisf+0x48>
    2b24:	96 e9       	ldi	r25, 0x96	; 150
    2b26:	11 c0       	rjmp	.+34     	; 0x2b4a <__floatsisf+0x6a>
    2b28:	77 23       	and	r23, r23
    2b2a:	21 f0       	breq	.+8      	; 0x2b34 <__floatsisf+0x54>
    2b2c:	9e e8       	ldi	r25, 0x8E	; 142
    2b2e:	87 2f       	mov	r24, r23
    2b30:	76 2f       	mov	r23, r22
    2b32:	05 c0       	rjmp	.+10     	; 0x2b3e <__floatsisf+0x5e>
    2b34:	66 23       	and	r22, r22
    2b36:	71 f0       	breq	.+28     	; 0x2b54 <__floatsisf+0x74>
    2b38:	96 e8       	ldi	r25, 0x86	; 134
    2b3a:	86 2f       	mov	r24, r22
    2b3c:	70 e0       	ldi	r23, 0x00	; 0
    2b3e:	60 e0       	ldi	r22, 0x00	; 0
    2b40:	2a f0       	brmi	.+10     	; 0x2b4c <__floatsisf+0x6c>
    2b42:	9a 95       	dec	r25
    2b44:	66 0f       	add	r22, r22
    2b46:	77 1f       	adc	r23, r23
    2b48:	88 1f       	adc	r24, r24
    2b4a:	da f7       	brpl	.-10     	; 0x2b42 <__floatsisf+0x62>
    2b4c:	88 0f       	add	r24, r24
    2b4e:	96 95       	lsr	r25
    2b50:	87 95       	ror	r24
    2b52:	97 f9       	bld	r25, 7
    2b54:	08 95       	ret

00002b56 <__fp_inf>:
    2b56:	97 f9       	bld	r25, 7
    2b58:	9f 67       	ori	r25, 0x7F	; 127
    2b5a:	80 e8       	ldi	r24, 0x80	; 128
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	08 95       	ret

00002b62 <__fp_nan>:
    2b62:	9f ef       	ldi	r25, 0xFF	; 255
    2b64:	80 ec       	ldi	r24, 0xC0	; 192
    2b66:	08 95       	ret

00002b68 <__fp_pscA>:
    2b68:	00 24       	eor	r0, r0
    2b6a:	0a 94       	dec	r0
    2b6c:	16 16       	cp	r1, r22
    2b6e:	17 06       	cpc	r1, r23
    2b70:	18 06       	cpc	r1, r24
    2b72:	09 06       	cpc	r0, r25
    2b74:	08 95       	ret

00002b76 <__fp_pscB>:
    2b76:	00 24       	eor	r0, r0
    2b78:	0a 94       	dec	r0
    2b7a:	12 16       	cp	r1, r18
    2b7c:	13 06       	cpc	r1, r19
    2b7e:	14 06       	cpc	r1, r20
    2b80:	05 06       	cpc	r0, r21
    2b82:	08 95       	ret

00002b84 <__fp_round>:
    2b84:	09 2e       	mov	r0, r25
    2b86:	03 94       	inc	r0
    2b88:	00 0c       	add	r0, r0
    2b8a:	11 f4       	brne	.+4      	; 0x2b90 <__fp_round+0xc>
    2b8c:	88 23       	and	r24, r24
    2b8e:	52 f0       	brmi	.+20     	; 0x2ba4 <__fp_round+0x20>
    2b90:	bb 0f       	add	r27, r27
    2b92:	40 f4       	brcc	.+16     	; 0x2ba4 <__fp_round+0x20>
    2b94:	bf 2b       	or	r27, r31
    2b96:	11 f4       	brne	.+4      	; 0x2b9c <__fp_round+0x18>
    2b98:	60 ff       	sbrs	r22, 0
    2b9a:	04 c0       	rjmp	.+8      	; 0x2ba4 <__fp_round+0x20>
    2b9c:	6f 5f       	subi	r22, 0xFF	; 255
    2b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba4:	08 95       	ret

00002ba6 <__fp_split3>:
    2ba6:	57 fd       	sbrc	r21, 7
    2ba8:	90 58       	subi	r25, 0x80	; 128
    2baa:	44 0f       	add	r20, r20
    2bac:	55 1f       	adc	r21, r21
    2bae:	59 f0       	breq	.+22     	; 0x2bc6 <__fp_splitA+0x10>
    2bb0:	5f 3f       	cpi	r21, 0xFF	; 255
    2bb2:	71 f0       	breq	.+28     	; 0x2bd0 <__fp_splitA+0x1a>
    2bb4:	47 95       	ror	r20

00002bb6 <__fp_splitA>:
    2bb6:	88 0f       	add	r24, r24
    2bb8:	97 fb       	bst	r25, 7
    2bba:	99 1f       	adc	r25, r25
    2bbc:	61 f0       	breq	.+24     	; 0x2bd6 <__fp_splitA+0x20>
    2bbe:	9f 3f       	cpi	r25, 0xFF	; 255
    2bc0:	79 f0       	breq	.+30     	; 0x2be0 <__fp_splitA+0x2a>
    2bc2:	87 95       	ror	r24
    2bc4:	08 95       	ret
    2bc6:	12 16       	cp	r1, r18
    2bc8:	13 06       	cpc	r1, r19
    2bca:	14 06       	cpc	r1, r20
    2bcc:	55 1f       	adc	r21, r21
    2bce:	f2 cf       	rjmp	.-28     	; 0x2bb4 <__fp_split3+0xe>
    2bd0:	46 95       	lsr	r20
    2bd2:	f1 df       	rcall	.-30     	; 0x2bb6 <__fp_splitA>
    2bd4:	08 c0       	rjmp	.+16     	; 0x2be6 <__fp_splitA+0x30>
    2bd6:	16 16       	cp	r1, r22
    2bd8:	17 06       	cpc	r1, r23
    2bda:	18 06       	cpc	r1, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	f1 cf       	rjmp	.-30     	; 0x2bc2 <__fp_splitA+0xc>
    2be0:	86 95       	lsr	r24
    2be2:	71 05       	cpc	r23, r1
    2be4:	61 05       	cpc	r22, r1
    2be6:	08 94       	sec
    2be8:	08 95       	ret

00002bea <__fp_zero>:
    2bea:	e8 94       	clt

00002bec <__fp_szero>:
    2bec:	bb 27       	eor	r27, r27
    2bee:	66 27       	eor	r22, r22
    2bf0:	77 27       	eor	r23, r23
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	97 f9       	bld	r25, 7
    2bf6:	08 95       	ret

00002bf8 <__mulsi3>:
    2bf8:	db 01       	movw	r26, r22
    2bfa:	8f 93       	push	r24
    2bfc:	9f 93       	push	r25
    2bfe:	58 d0       	rcall	.+176    	; 0x2cb0 <__muluhisi3>
    2c00:	bf 91       	pop	r27
    2c02:	af 91       	pop	r26
    2c04:	a2 9f       	mul	r26, r18
    2c06:	80 0d       	add	r24, r0
    2c08:	91 1d       	adc	r25, r1
    2c0a:	a3 9f       	mul	r26, r19
    2c0c:	90 0d       	add	r25, r0
    2c0e:	b2 9f       	mul	r27, r18
    2c10:	90 0d       	add	r25, r0
    2c12:	11 24       	eor	r1, r1
    2c14:	08 95       	ret

00002c16 <__udivmodsi4>:
    2c16:	a1 e2       	ldi	r26, 0x21	; 33
    2c18:	1a 2e       	mov	r1, r26
    2c1a:	aa 1b       	sub	r26, r26
    2c1c:	bb 1b       	sub	r27, r27
    2c1e:	fd 01       	movw	r30, r26
    2c20:	0d c0       	rjmp	.+26     	; 0x2c3c <__udivmodsi4_ep>

00002c22 <__udivmodsi4_loop>:
    2c22:	aa 1f       	adc	r26, r26
    2c24:	bb 1f       	adc	r27, r27
    2c26:	ee 1f       	adc	r30, r30
    2c28:	ff 1f       	adc	r31, r31
    2c2a:	a2 17       	cp	r26, r18
    2c2c:	b3 07       	cpc	r27, r19
    2c2e:	e4 07       	cpc	r30, r20
    2c30:	f5 07       	cpc	r31, r21
    2c32:	20 f0       	brcs	.+8      	; 0x2c3c <__udivmodsi4_ep>
    2c34:	a2 1b       	sub	r26, r18
    2c36:	b3 0b       	sbc	r27, r19
    2c38:	e4 0b       	sbc	r30, r20
    2c3a:	f5 0b       	sbc	r31, r21

00002c3c <__udivmodsi4_ep>:
    2c3c:	66 1f       	adc	r22, r22
    2c3e:	77 1f       	adc	r23, r23
    2c40:	88 1f       	adc	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	1a 94       	dec	r1
    2c46:	69 f7       	brne	.-38     	; 0x2c22 <__udivmodsi4_loop>
    2c48:	60 95       	com	r22
    2c4a:	70 95       	com	r23
    2c4c:	80 95       	com	r24
    2c4e:	90 95       	com	r25
    2c50:	9b 01       	movw	r18, r22
    2c52:	ac 01       	movw	r20, r24
    2c54:	bd 01       	movw	r22, r26
    2c56:	cf 01       	movw	r24, r30
    2c58:	08 95       	ret

00002c5a <__divmodsi4>:
    2c5a:	05 2e       	mov	r0, r21
    2c5c:	97 fb       	bst	r25, 7
    2c5e:	16 f4       	brtc	.+4      	; 0x2c64 <__divmodsi4+0xa>
    2c60:	00 94       	com	r0
    2c62:	0f d0       	rcall	.+30     	; 0x2c82 <__negsi2>
    2c64:	57 fd       	sbrc	r21, 7
    2c66:	05 d0       	rcall	.+10     	; 0x2c72 <__divmodsi4_neg2>
    2c68:	d6 df       	rcall	.-84     	; 0x2c16 <__udivmodsi4>
    2c6a:	07 fc       	sbrc	r0, 7
    2c6c:	02 d0       	rcall	.+4      	; 0x2c72 <__divmodsi4_neg2>
    2c6e:	46 f4       	brtc	.+16     	; 0x2c80 <__divmodsi4_exit>
    2c70:	08 c0       	rjmp	.+16     	; 0x2c82 <__negsi2>

00002c72 <__divmodsi4_neg2>:
    2c72:	50 95       	com	r21
    2c74:	40 95       	com	r20
    2c76:	30 95       	com	r19
    2c78:	21 95       	neg	r18
    2c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7c:	4f 4f       	sbci	r20, 0xFF	; 255
    2c7e:	5f 4f       	sbci	r21, 0xFF	; 255

00002c80 <__divmodsi4_exit>:
    2c80:	08 95       	ret

00002c82 <__negsi2>:
    2c82:	90 95       	com	r25
    2c84:	80 95       	com	r24
    2c86:	70 95       	com	r23
    2c88:	61 95       	neg	r22
    2c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c90:	08 95       	ret

00002c92 <__umulhisi3>:
    2c92:	a2 9f       	mul	r26, r18
    2c94:	b0 01       	movw	r22, r0
    2c96:	b3 9f       	mul	r27, r19
    2c98:	c0 01       	movw	r24, r0
    2c9a:	a3 9f       	mul	r26, r19
    2c9c:	70 0d       	add	r23, r0
    2c9e:	81 1d       	adc	r24, r1
    2ca0:	11 24       	eor	r1, r1
    2ca2:	91 1d       	adc	r25, r1
    2ca4:	b2 9f       	mul	r27, r18
    2ca6:	70 0d       	add	r23, r0
    2ca8:	81 1d       	adc	r24, r1
    2caa:	11 24       	eor	r1, r1
    2cac:	91 1d       	adc	r25, r1
    2cae:	08 95       	ret

00002cb0 <__muluhisi3>:
    2cb0:	f0 df       	rcall	.-32     	; 0x2c92 <__umulhisi3>
    2cb2:	a5 9f       	mul	r26, r21
    2cb4:	90 0d       	add	r25, r0
    2cb6:	b4 9f       	mul	r27, r20
    2cb8:	90 0d       	add	r25, r0
    2cba:	a4 9f       	mul	r26, r20
    2cbc:	80 0d       	add	r24, r0
    2cbe:	91 1d       	adc	r25, r1
    2cc0:	11 24       	eor	r1, r1
    2cc2:	08 95       	ret

00002cc4 <__mulshisi3>:
    2cc4:	b7 ff       	sbrs	r27, 7
    2cc6:	f4 cf       	rjmp	.-24     	; 0x2cb0 <__muluhisi3>

00002cc8 <__mulohisi3>:
    2cc8:	f3 df       	rcall	.-26     	; 0x2cb0 <__muluhisi3>
    2cca:	82 1b       	sub	r24, r18
    2ccc:	93 0b       	sbc	r25, r19
    2cce:	08 95       	ret

00002cd0 <malloc>:
    2cd0:	cf 93       	push	r28
    2cd2:	df 93       	push	r29
    2cd4:	82 30       	cpi	r24, 0x02	; 2
    2cd6:	91 05       	cpc	r25, r1
    2cd8:	10 f4       	brcc	.+4      	; 0x2cde <malloc+0xe>
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	e0 91 b2 1b 	lds	r30, 0x1BB2	; 0x801bb2 <__flp>
    2ce2:	f0 91 b3 1b 	lds	r31, 0x1BB3	; 0x801bb3 <__flp+0x1>
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	c0 e0       	ldi	r28, 0x00	; 0
    2cec:	d0 e0       	ldi	r29, 0x00	; 0
    2cee:	30 97       	sbiw	r30, 0x00	; 0
    2cf0:	11 f1       	breq	.+68     	; 0x2d36 <malloc+0x66>
    2cf2:	40 81       	ld	r20, Z
    2cf4:	51 81       	ldd	r21, Z+1	; 0x01
    2cf6:	48 17       	cp	r20, r24
    2cf8:	59 07       	cpc	r21, r25
    2cfa:	c0 f0       	brcs	.+48     	; 0x2d2c <malloc+0x5c>
    2cfc:	48 17       	cp	r20, r24
    2cfe:	59 07       	cpc	r21, r25
    2d00:	61 f4       	brne	.+24     	; 0x2d1a <malloc+0x4a>
    2d02:	82 81       	ldd	r24, Z+2	; 0x02
    2d04:	93 81       	ldd	r25, Z+3	; 0x03
    2d06:	20 97       	sbiw	r28, 0x00	; 0
    2d08:	19 f0       	breq	.+6      	; 0x2d10 <malloc+0x40>
    2d0a:	9b 83       	std	Y+3, r25	; 0x03
    2d0c:	8a 83       	std	Y+2, r24	; 0x02
    2d0e:	2b c0       	rjmp	.+86     	; 0x2d66 <malloc+0x96>
    2d10:	90 93 b3 1b 	sts	0x1BB3, r25	; 0x801bb3 <__flp+0x1>
    2d14:	80 93 b2 1b 	sts	0x1BB2, r24	; 0x801bb2 <__flp>
    2d18:	26 c0       	rjmp	.+76     	; 0x2d66 <malloc+0x96>
    2d1a:	21 15       	cp	r18, r1
    2d1c:	31 05       	cpc	r19, r1
    2d1e:	19 f0       	breq	.+6      	; 0x2d26 <malloc+0x56>
    2d20:	42 17       	cp	r20, r18
    2d22:	53 07       	cpc	r21, r19
    2d24:	18 f4       	brcc	.+6      	; 0x2d2c <malloc+0x5c>
    2d26:	9a 01       	movw	r18, r20
    2d28:	be 01       	movw	r22, r28
    2d2a:	df 01       	movw	r26, r30
    2d2c:	ef 01       	movw	r28, r30
    2d2e:	02 80       	ldd	r0, Z+2	; 0x02
    2d30:	f3 81       	ldd	r31, Z+3	; 0x03
    2d32:	e0 2d       	mov	r30, r0
    2d34:	dc cf       	rjmp	.-72     	; 0x2cee <malloc+0x1e>
    2d36:	21 15       	cp	r18, r1
    2d38:	31 05       	cpc	r19, r1
    2d3a:	09 f1       	breq	.+66     	; 0x2d7e <malloc+0xae>
    2d3c:	28 1b       	sub	r18, r24
    2d3e:	39 0b       	sbc	r19, r25
    2d40:	24 30       	cpi	r18, 0x04	; 4
    2d42:	31 05       	cpc	r19, r1
    2d44:	90 f4       	brcc	.+36     	; 0x2d6a <malloc+0x9a>
    2d46:	12 96       	adiw	r26, 0x02	; 2
    2d48:	8d 91       	ld	r24, X+
    2d4a:	9c 91       	ld	r25, X
    2d4c:	13 97       	sbiw	r26, 0x03	; 3
    2d4e:	61 15       	cp	r22, r1
    2d50:	71 05       	cpc	r23, r1
    2d52:	21 f0       	breq	.+8      	; 0x2d5c <malloc+0x8c>
    2d54:	fb 01       	movw	r30, r22
    2d56:	93 83       	std	Z+3, r25	; 0x03
    2d58:	82 83       	std	Z+2, r24	; 0x02
    2d5a:	04 c0       	rjmp	.+8      	; 0x2d64 <malloc+0x94>
    2d5c:	90 93 b3 1b 	sts	0x1BB3, r25	; 0x801bb3 <__flp+0x1>
    2d60:	80 93 b2 1b 	sts	0x1BB2, r24	; 0x801bb2 <__flp>
    2d64:	fd 01       	movw	r30, r26
    2d66:	32 96       	adiw	r30, 0x02	; 2
    2d68:	44 c0       	rjmp	.+136    	; 0x2df2 <malloc+0x122>
    2d6a:	fd 01       	movw	r30, r26
    2d6c:	e2 0f       	add	r30, r18
    2d6e:	f3 1f       	adc	r31, r19
    2d70:	81 93       	st	Z+, r24
    2d72:	91 93       	st	Z+, r25
    2d74:	22 50       	subi	r18, 0x02	; 2
    2d76:	31 09       	sbc	r19, r1
    2d78:	2d 93       	st	X+, r18
    2d7a:	3c 93       	st	X, r19
    2d7c:	3a c0       	rjmp	.+116    	; 0x2df2 <malloc+0x122>
    2d7e:	20 91 b0 1b 	lds	r18, 0x1BB0	; 0x801bb0 <__brkval>
    2d82:	30 91 b1 1b 	lds	r19, 0x1BB1	; 0x801bb1 <__brkval+0x1>
    2d86:	23 2b       	or	r18, r19
    2d88:	41 f4       	brne	.+16     	; 0x2d9a <malloc+0xca>
    2d8a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2d8e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2d92:	30 93 b1 1b 	sts	0x1BB1, r19	; 0x801bb1 <__brkval+0x1>
    2d96:	20 93 b0 1b 	sts	0x1BB0, r18	; 0x801bb0 <__brkval>
    2d9a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    2d9e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    2da2:	21 15       	cp	r18, r1
    2da4:	31 05       	cpc	r19, r1
    2da6:	41 f4       	brne	.+16     	; 0x2db8 <malloc+0xe8>
    2da8:	2d b7       	in	r18, 0x3d	; 61
    2daa:	3e b7       	in	r19, 0x3e	; 62
    2dac:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2db0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2db4:	24 1b       	sub	r18, r20
    2db6:	35 0b       	sbc	r19, r21
    2db8:	e0 91 b0 1b 	lds	r30, 0x1BB0	; 0x801bb0 <__brkval>
    2dbc:	f0 91 b1 1b 	lds	r31, 0x1BB1	; 0x801bb1 <__brkval+0x1>
    2dc0:	e2 17       	cp	r30, r18
    2dc2:	f3 07       	cpc	r31, r19
    2dc4:	a0 f4       	brcc	.+40     	; 0x2dee <malloc+0x11e>
    2dc6:	2e 1b       	sub	r18, r30
    2dc8:	3f 0b       	sbc	r19, r31
    2dca:	28 17       	cp	r18, r24
    2dcc:	39 07       	cpc	r19, r25
    2dce:	78 f0       	brcs	.+30     	; 0x2dee <malloc+0x11e>
    2dd0:	ac 01       	movw	r20, r24
    2dd2:	4e 5f       	subi	r20, 0xFE	; 254
    2dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd6:	24 17       	cp	r18, r20
    2dd8:	35 07       	cpc	r19, r21
    2dda:	48 f0       	brcs	.+18     	; 0x2dee <malloc+0x11e>
    2ddc:	4e 0f       	add	r20, r30
    2dde:	5f 1f       	adc	r21, r31
    2de0:	50 93 b1 1b 	sts	0x1BB1, r21	; 0x801bb1 <__brkval+0x1>
    2de4:	40 93 b0 1b 	sts	0x1BB0, r20	; 0x801bb0 <__brkval>
    2de8:	81 93       	st	Z+, r24
    2dea:	91 93       	st	Z+, r25
    2dec:	02 c0       	rjmp	.+4      	; 0x2df2 <malloc+0x122>
    2dee:	e0 e0       	ldi	r30, 0x00	; 0
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	cf 01       	movw	r24, r30
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	08 95       	ret

00002dfa <free>:
    2dfa:	0f 93       	push	r16
    2dfc:	1f 93       	push	r17
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <free+0xe>
    2e06:	8c c0       	rjmp	.+280    	; 0x2f20 <free+0x126>
    2e08:	fc 01       	movw	r30, r24
    2e0a:	32 97       	sbiw	r30, 0x02	; 2
    2e0c:	13 82       	std	Z+3, r1	; 0x03
    2e0e:	12 82       	std	Z+2, r1	; 0x02
    2e10:	00 91 b2 1b 	lds	r16, 0x1BB2	; 0x801bb2 <__flp>
    2e14:	10 91 b3 1b 	lds	r17, 0x1BB3	; 0x801bb3 <__flp+0x1>
    2e18:	01 15       	cp	r16, r1
    2e1a:	11 05       	cpc	r17, r1
    2e1c:	81 f4       	brne	.+32     	; 0x2e3e <free+0x44>
    2e1e:	20 81       	ld	r18, Z
    2e20:	31 81       	ldd	r19, Z+1	; 0x01
    2e22:	82 0f       	add	r24, r18
    2e24:	93 1f       	adc	r25, r19
    2e26:	20 91 b0 1b 	lds	r18, 0x1BB0	; 0x801bb0 <__brkval>
    2e2a:	30 91 b1 1b 	lds	r19, 0x1BB1	; 0x801bb1 <__brkval+0x1>
    2e2e:	28 17       	cp	r18, r24
    2e30:	39 07       	cpc	r19, r25
    2e32:	79 f5       	brne	.+94     	; 0x2e92 <free+0x98>
    2e34:	f0 93 b1 1b 	sts	0x1BB1, r31	; 0x801bb1 <__brkval+0x1>
    2e38:	e0 93 b0 1b 	sts	0x1BB0, r30	; 0x801bb0 <__brkval>
    2e3c:	71 c0       	rjmp	.+226    	; 0x2f20 <free+0x126>
    2e3e:	d8 01       	movw	r26, r16
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	50 e0       	ldi	r21, 0x00	; 0
    2e44:	ae 17       	cp	r26, r30
    2e46:	bf 07       	cpc	r27, r31
    2e48:	50 f4       	brcc	.+20     	; 0x2e5e <free+0x64>
    2e4a:	12 96       	adiw	r26, 0x02	; 2
    2e4c:	2d 91       	ld	r18, X+
    2e4e:	3c 91       	ld	r19, X
    2e50:	13 97       	sbiw	r26, 0x03	; 3
    2e52:	ad 01       	movw	r20, r26
    2e54:	21 15       	cp	r18, r1
    2e56:	31 05       	cpc	r19, r1
    2e58:	09 f1       	breq	.+66     	; 0x2e9c <free+0xa2>
    2e5a:	d9 01       	movw	r26, r18
    2e5c:	f3 cf       	rjmp	.-26     	; 0x2e44 <free+0x4a>
    2e5e:	9d 01       	movw	r18, r26
    2e60:	da 01       	movw	r26, r20
    2e62:	33 83       	std	Z+3, r19	; 0x03
    2e64:	22 83       	std	Z+2, r18	; 0x02
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	86 0f       	add	r24, r22
    2e6c:	97 1f       	adc	r25, r23
    2e6e:	82 17       	cp	r24, r18
    2e70:	93 07       	cpc	r25, r19
    2e72:	69 f4       	brne	.+26     	; 0x2e8e <free+0x94>
    2e74:	ec 01       	movw	r28, r24
    2e76:	28 81       	ld	r18, Y
    2e78:	39 81       	ldd	r19, Y+1	; 0x01
    2e7a:	26 0f       	add	r18, r22
    2e7c:	37 1f       	adc	r19, r23
    2e7e:	2e 5f       	subi	r18, 0xFE	; 254
    2e80:	3f 4f       	sbci	r19, 0xFF	; 255
    2e82:	31 83       	std	Z+1, r19	; 0x01
    2e84:	20 83       	st	Z, r18
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8a:	93 83       	std	Z+3, r25	; 0x03
    2e8c:	82 83       	std	Z+2, r24	; 0x02
    2e8e:	45 2b       	or	r20, r21
    2e90:	29 f4       	brne	.+10     	; 0x2e9c <free+0xa2>
    2e92:	f0 93 b3 1b 	sts	0x1BB3, r31	; 0x801bb3 <__flp+0x1>
    2e96:	e0 93 b2 1b 	sts	0x1BB2, r30	; 0x801bb2 <__flp>
    2e9a:	42 c0       	rjmp	.+132    	; 0x2f20 <free+0x126>
    2e9c:	13 96       	adiw	r26, 0x03	; 3
    2e9e:	fc 93       	st	X, r31
    2ea0:	ee 93       	st	-X, r30
    2ea2:	12 97       	sbiw	r26, 0x02	; 2
    2ea4:	ed 01       	movw	r28, r26
    2ea6:	49 91       	ld	r20, Y+
    2ea8:	59 91       	ld	r21, Y+
    2eaa:	9e 01       	movw	r18, r28
    2eac:	24 0f       	add	r18, r20
    2eae:	35 1f       	adc	r19, r21
    2eb0:	e2 17       	cp	r30, r18
    2eb2:	f3 07       	cpc	r31, r19
    2eb4:	71 f4       	brne	.+28     	; 0x2ed2 <free+0xd8>
    2eb6:	80 81       	ld	r24, Z
    2eb8:	91 81       	ldd	r25, Z+1	; 0x01
    2eba:	84 0f       	add	r24, r20
    2ebc:	95 1f       	adc	r25, r21
    2ebe:	02 96       	adiw	r24, 0x02	; 2
    2ec0:	11 96       	adiw	r26, 0x01	; 1
    2ec2:	9c 93       	st	X, r25
    2ec4:	8e 93       	st	-X, r24
    2ec6:	82 81       	ldd	r24, Z+2	; 0x02
    2ec8:	93 81       	ldd	r25, Z+3	; 0x03
    2eca:	13 96       	adiw	r26, 0x03	; 3
    2ecc:	9c 93       	st	X, r25
    2ece:	8e 93       	st	-X, r24
    2ed0:	12 97       	sbiw	r26, 0x02	; 2
    2ed2:	e0 e0       	ldi	r30, 0x00	; 0
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	d8 01       	movw	r26, r16
    2ed8:	12 96       	adiw	r26, 0x02	; 2
    2eda:	8d 91       	ld	r24, X+
    2edc:	9c 91       	ld	r25, X
    2ede:	13 97       	sbiw	r26, 0x03	; 3
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	19 f0       	breq	.+6      	; 0x2eea <free+0xf0>
    2ee4:	f8 01       	movw	r30, r16
    2ee6:	8c 01       	movw	r16, r24
    2ee8:	f6 cf       	rjmp	.-20     	; 0x2ed6 <free+0xdc>
    2eea:	8d 91       	ld	r24, X+
    2eec:	9c 91       	ld	r25, X
    2eee:	98 01       	movw	r18, r16
    2ef0:	2e 5f       	subi	r18, 0xFE	; 254
    2ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef4:	82 0f       	add	r24, r18
    2ef6:	93 1f       	adc	r25, r19
    2ef8:	20 91 b0 1b 	lds	r18, 0x1BB0	; 0x801bb0 <__brkval>
    2efc:	30 91 b1 1b 	lds	r19, 0x1BB1	; 0x801bb1 <__brkval+0x1>
    2f00:	28 17       	cp	r18, r24
    2f02:	39 07       	cpc	r19, r25
    2f04:	69 f4       	brne	.+26     	; 0x2f20 <free+0x126>
    2f06:	30 97       	sbiw	r30, 0x00	; 0
    2f08:	29 f4       	brne	.+10     	; 0x2f14 <free+0x11a>
    2f0a:	10 92 b3 1b 	sts	0x1BB3, r1	; 0x801bb3 <__flp+0x1>
    2f0e:	10 92 b2 1b 	sts	0x1BB2, r1	; 0x801bb2 <__flp>
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <free+0x11e>
    2f14:	13 82       	std	Z+3, r1	; 0x03
    2f16:	12 82       	std	Z+2, r1	; 0x02
    2f18:	10 93 b1 1b 	sts	0x1BB1, r17	; 0x801bb1 <__brkval+0x1>
    2f1c:	00 93 b0 1b 	sts	0x1BB0, r16	; 0x801bb0 <__brkval>
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	1f 91       	pop	r17
    2f26:	0f 91       	pop	r16
    2f28:	08 95       	ret

00002f2a <do_rand>:
    2f2a:	8f 92       	push	r8
    2f2c:	9f 92       	push	r9
    2f2e:	af 92       	push	r10
    2f30:	bf 92       	push	r11
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	ec 01       	movw	r28, r24
    2f40:	68 81       	ld	r22, Y
    2f42:	79 81       	ldd	r23, Y+1	; 0x01
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	9b 81       	ldd	r25, Y+3	; 0x03
    2f48:	61 15       	cp	r22, r1
    2f4a:	71 05       	cpc	r23, r1
    2f4c:	81 05       	cpc	r24, r1
    2f4e:	91 05       	cpc	r25, r1
    2f50:	21 f4       	brne	.+8      	; 0x2f5a <do_rand+0x30>
    2f52:	64 e2       	ldi	r22, 0x24	; 36
    2f54:	79 ed       	ldi	r23, 0xD9	; 217
    2f56:	8b e5       	ldi	r24, 0x5B	; 91
    2f58:	97 e0       	ldi	r25, 0x07	; 7
    2f5a:	2d e1       	ldi	r18, 0x1D	; 29
    2f5c:	33 ef       	ldi	r19, 0xF3	; 243
    2f5e:	41 e0       	ldi	r20, 0x01	; 1
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	7b de       	rcall	.-778    	; 0x2c5a <__divmodsi4>
    2f64:	49 01       	movw	r8, r18
    2f66:	5a 01       	movw	r10, r20
    2f68:	9b 01       	movw	r18, r22
    2f6a:	ac 01       	movw	r20, r24
    2f6c:	a7 ea       	ldi	r26, 0xA7	; 167
    2f6e:	b1 e4       	ldi	r27, 0x41	; 65
    2f70:	9f de       	rcall	.-706    	; 0x2cb0 <__muluhisi3>
    2f72:	6b 01       	movw	r12, r22
    2f74:	7c 01       	movw	r14, r24
    2f76:	ac ee       	ldi	r26, 0xEC	; 236
    2f78:	b4 ef       	ldi	r27, 0xF4	; 244
    2f7a:	a5 01       	movw	r20, r10
    2f7c:	94 01       	movw	r18, r8
    2f7e:	a4 de       	rcall	.-696    	; 0x2cc8 <__mulohisi3>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	8c 0d       	add	r24, r12
    2f86:	9d 1d       	adc	r25, r13
    2f88:	ae 1d       	adc	r26, r14
    2f8a:	bf 1d       	adc	r27, r15
    2f8c:	b7 ff       	sbrs	r27, 7
    2f8e:	03 c0       	rjmp	.+6      	; 0x2f96 <do_rand+0x6c>
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	a1 09       	sbc	r26, r1
    2f94:	b0 48       	sbci	r27, 0x80	; 128
    2f96:	88 83       	st	Y, r24
    2f98:	99 83       	std	Y+1, r25	; 0x01
    2f9a:	aa 83       	std	Y+2, r26	; 0x02
    2f9c:	bb 83       	std	Y+3, r27	; 0x03
    2f9e:	9f 77       	andi	r25, 0x7F	; 127
    2fa0:	df 91       	pop	r29
    2fa2:	cf 91       	pop	r28
    2fa4:	ff 90       	pop	r15
    2fa6:	ef 90       	pop	r14
    2fa8:	df 90       	pop	r13
    2faa:	cf 90       	pop	r12
    2fac:	bf 90       	pop	r11
    2fae:	af 90       	pop	r10
    2fb0:	9f 90       	pop	r9
    2fb2:	8f 90       	pop	r8
    2fb4:	08 95       	ret

00002fb6 <rand_r>:
    2fb6:	b9 cf       	rjmp	.-142    	; 0x2f2a <do_rand>

00002fb8 <rand>:
    2fb8:	86 e0       	ldi	r24, 0x06	; 6
    2fba:	92 e0       	ldi	r25, 0x02	; 2
    2fbc:	b6 cf       	rjmp	.-148    	; 0x2f2a <do_rand>

00002fbe <srand>:
    2fbe:	a0 e0       	ldi	r26, 0x00	; 0
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    2fc6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    2fca:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    2fce:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    2fd2:	08 95       	ret

00002fd4 <memcpy>:
    2fd4:	fb 01       	movw	r30, r22
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	02 c0       	rjmp	.+4      	; 0x2fde <memcpy+0xa>
    2fda:	01 90       	ld	r0, Z+
    2fdc:	0d 92       	st	X+, r0
    2fde:	41 50       	subi	r20, 0x01	; 1
    2fe0:	50 40       	sbci	r21, 0x00	; 0
    2fe2:	d8 f7       	brcc	.-10     	; 0x2fda <memcpy+0x6>
    2fe4:	08 95       	ret

00002fe6 <itoa>:
    2fe6:	45 32       	cpi	r20, 0x25	; 37
    2fe8:	51 05       	cpc	r21, r1
    2fea:	18 f4       	brcc	.+6      	; 0x2ff2 <itoa+0xc>
    2fec:	42 30       	cpi	r20, 0x02	; 2
    2fee:	08 f0       	brcs	.+2      	; 0x2ff2 <itoa+0xc>
    2ff0:	04 c0       	rjmp	.+8      	; 0x2ffa <__itoa_ncheck>
    2ff2:	fb 01       	movw	r30, r22
    2ff4:	10 82       	st	Z, r1
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	08 95       	ret

00002ffa <__itoa_ncheck>:
    2ffa:	bb 27       	eor	r27, r27
    2ffc:	4a 30       	cpi	r20, 0x0A	; 10
    2ffe:	31 f4       	brne	.+12     	; 0x300c <__itoa_ncheck+0x12>
    3000:	99 23       	and	r25, r25
    3002:	22 f4       	brpl	.+8      	; 0x300c <__itoa_ncheck+0x12>
    3004:	bd e2       	ldi	r27, 0x2D	; 45
    3006:	90 95       	com	r25
    3008:	81 95       	neg	r24
    300a:	9f 4f       	sbci	r25, 0xFF	; 255
    300c:	01 c0       	rjmp	.+2      	; 0x3010 <__utoa_common>

0000300e <__utoa_ncheck>:
    300e:	bb 27       	eor	r27, r27

00003010 <__utoa_common>:
    3010:	fb 01       	movw	r30, r22
    3012:	55 27       	eor	r21, r21
    3014:	aa 27       	eor	r26, r26
    3016:	88 0f       	add	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	aa 1f       	adc	r26, r26
    301c:	a4 17       	cp	r26, r20
    301e:	10 f0       	brcs	.+4      	; 0x3024 <__utoa_common+0x14>
    3020:	a4 1b       	sub	r26, r20
    3022:	83 95       	inc	r24
    3024:	50 51       	subi	r21, 0x10	; 16
    3026:	b9 f7       	brne	.-18     	; 0x3016 <__utoa_common+0x6>
    3028:	a0 5d       	subi	r26, 0xD0	; 208
    302a:	aa 33       	cpi	r26, 0x3A	; 58
    302c:	08 f0       	brcs	.+2      	; 0x3030 <__utoa_common+0x20>
    302e:	a9 5d       	subi	r26, 0xD9	; 217
    3030:	a1 93       	st	Z+, r26
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	79 f7       	brne	.-34     	; 0x3014 <__utoa_common+0x4>
    3036:	b1 11       	cpse	r27, r1
    3038:	b1 93       	st	Z+, r27
    303a:	11 92       	st	Z+, r1
    303c:	cb 01       	movw	r24, r22
    303e:	00 c0       	rjmp	.+0      	; 0x3040 <strrev>

00003040 <strrev>:
    3040:	dc 01       	movw	r26, r24
    3042:	fc 01       	movw	r30, r24
    3044:	67 2f       	mov	r22, r23
    3046:	71 91       	ld	r23, Z+
    3048:	77 23       	and	r23, r23
    304a:	e1 f7       	brne	.-8      	; 0x3044 <strrev+0x4>
    304c:	32 97       	sbiw	r30, 0x02	; 2
    304e:	04 c0       	rjmp	.+8      	; 0x3058 <strrev+0x18>
    3050:	7c 91       	ld	r23, X
    3052:	6d 93       	st	X+, r22
    3054:	70 83       	st	Z, r23
    3056:	62 91       	ld	r22, -Z
    3058:	ae 17       	cp	r26, r30
    305a:	bf 07       	cpc	r27, r31
    305c:	c8 f3       	brcs	.-14     	; 0x3050 <strrev+0x10>
    305e:	08 95       	ret

00003060 <_exit>:
    3060:	f8 94       	cli

00003062 <__stop_program>:
    3062:	ff cf       	rjmp	.-2      	; 0x3062 <__stop_program>
